// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: controlmessage.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "controlmessage.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* ControlMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ControlMessage_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ControlMessage_Action_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_controlmessage_2eproto() {
  protobuf_AddDesc_controlmessage_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "controlmessage.proto");
  GOOGLE_CHECK(file != NULL);
  ControlMessage_descriptor_ = file->message_type(0);
  static const int ControlMessage_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ControlMessage, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ControlMessage, jobid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ControlMessage, quid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ControlMessage, action_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ControlMessage, progress_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ControlMessage, cluster_jobs_),
  };
  ControlMessage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ControlMessage_descriptor_,
      ControlMessage::default_instance_,
      ControlMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ControlMessage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ControlMessage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ControlMessage));
  ControlMessage_Action_descriptor_ = ControlMessage_descriptor_->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_controlmessage_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ControlMessage_descriptor_, &ControlMessage::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_controlmessage_2eproto() {
  delete ControlMessage::default_instance_;
  delete ControlMessage_reflection_;
}

void protobuf_AddDesc_controlmessage_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\024controlmessage.proto\"\353\001\n\016ControlMessag"
    "e\022\n\n\002id\030\001 \002(\005\022\r\n\005jobid\030\002 \002(\005\022\014\n\004quid\030\003 \002"
    "(\t\022&\n\006action\030\004 \002(\0162\026.ControlMessage.Acti"
    "on\022\020\n\010progress\030\005 \001(\005\022\024\n\014cluster_jobs\030\006 \001"
    "(\005\"`\n\006Action\022\010\n\004IDLE\020\001\022\014\n\010AWAITING\020\002\022\014\n\010"
    "ACCEPTED\020\003\022\t\n\005SETUP\020\004\022\013\n\007RUNNING\020\005\022\014\n\010TE"
    "ARDOWN\020\006\022\n\n\006FAILED\020\007", 260);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "controlmessage.proto", &protobuf_RegisterTypes);
  ControlMessage::default_instance_ = new ControlMessage();
  ControlMessage::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_controlmessage_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_controlmessage_2eproto {
  StaticDescriptorInitializer_controlmessage_2eproto() {
    protobuf_AddDesc_controlmessage_2eproto();
  }
} static_descriptor_initializer_controlmessage_2eproto_;

// ===================================================================

const ::google::protobuf::EnumDescriptor* ControlMessage_Action_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ControlMessage_Action_descriptor_;
}
bool ControlMessage_Action_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const ControlMessage_Action ControlMessage::IDLE;
const ControlMessage_Action ControlMessage::AWAITING;
const ControlMessage_Action ControlMessage::ACCEPTED;
const ControlMessage_Action ControlMessage::SETUP;
const ControlMessage_Action ControlMessage::RUNNING;
const ControlMessage_Action ControlMessage::TEARDOWN;
const ControlMessage_Action ControlMessage::FAILED;
const ControlMessage_Action ControlMessage::Action_MIN;
const ControlMessage_Action ControlMessage::Action_MAX;
const int ControlMessage::Action_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int ControlMessage::kIdFieldNumber;
const int ControlMessage::kJobidFieldNumber;
const int ControlMessage::kQuidFieldNumber;
const int ControlMessage::kActionFieldNumber;
const int ControlMessage::kProgressFieldNumber;
const int ControlMessage::kClusterJobsFieldNumber;
#endif  // !_MSC_VER

ControlMessage::ControlMessage()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ControlMessage)
}

void ControlMessage::InitAsDefaultInstance() {
}

ControlMessage::ControlMessage(const ControlMessage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ControlMessage)
}

void ControlMessage::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  id_ = 0;
  jobid_ = 0;
  quid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  action_ = 1;
  progress_ = 0;
  cluster_jobs_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ControlMessage::~ControlMessage() {
  // @@protoc_insertion_point(destructor:ControlMessage)
  SharedDtor();
}

void ControlMessage::SharedDtor() {
  if (quid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete quid_;
  }
  if (this != default_instance_) {
  }
}

void ControlMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ControlMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ControlMessage_descriptor_;
}

const ControlMessage& ControlMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_controlmessage_2eproto();
  return *default_instance_;
}

ControlMessage* ControlMessage::default_instance_ = NULL;

ControlMessage* ControlMessage::New() const {
  return new ControlMessage;
}

void ControlMessage::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<ControlMessage*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 63) {
    ZR_(id_, jobid_);
    ZR_(progress_, cluster_jobs_);
    if (has_quid()) {
      if (quid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        quid_->clear();
      }
    }
    action_ = 1;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ControlMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ControlMessage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_jobid;
        break;
      }

      // required int32 jobid = 2;
      case 2: {
        if (tag == 16) {
         parse_jobid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &jobid_)));
          set_has_jobid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_quid;
        break;
      }

      // required string quid = 3;
      case 3: {
        if (tag == 26) {
         parse_quid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_quid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->quid().data(), this->quid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "quid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_action;
        break;
      }

      // required .ControlMessage.Action action = 4;
      case 4: {
        if (tag == 32) {
         parse_action:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::ControlMessage_Action_IsValid(value)) {
            set_action(static_cast< ::ControlMessage_Action >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_progress;
        break;
      }

      // optional int32 progress = 5;
      case 5: {
        if (tag == 40) {
         parse_progress:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &progress_)));
          set_has_progress();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_cluster_jobs;
        break;
      }

      // optional int32 cluster_jobs = 6;
      case 6: {
        if (tag == 48) {
         parse_cluster_jobs:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cluster_jobs_)));
          set_has_cluster_jobs();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ControlMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ControlMessage)
  return false;
#undef DO_
}

void ControlMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ControlMessage)
  // required int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // required int32 jobid = 2;
  if (has_jobid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->jobid(), output);
  }

  // required string quid = 3;
  if (has_quid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->quid().data(), this->quid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "quid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->quid(), output);
  }

  // required .ControlMessage.Action action = 4;
  if (has_action()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->action(), output);
  }

  // optional int32 progress = 5;
  if (has_progress()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->progress(), output);
  }

  // optional int32 cluster_jobs = 6;
  if (has_cluster_jobs()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->cluster_jobs(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ControlMessage)
}

::google::protobuf::uint8* ControlMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ControlMessage)
  // required int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // required int32 jobid = 2;
  if (has_jobid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->jobid(), target);
  }

  // required string quid = 3;
  if (has_quid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->quid().data(), this->quid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "quid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->quid(), target);
  }

  // required .ControlMessage.Action action = 4;
  if (has_action()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->action(), target);
  }

  // optional int32 progress = 5;
  if (has_progress()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->progress(), target);
  }

  // optional int32 cluster_jobs = 6;
  if (has_cluster_jobs()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->cluster_jobs(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ControlMessage)
  return target;
}

int ControlMessage::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // required int32 jobid = 2;
    if (has_jobid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->jobid());
    }

    // required string quid = 3;
    if (has_quid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->quid());
    }

    // required .ControlMessage.Action action = 4;
    if (has_action()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->action());
    }

    // optional int32 progress = 5;
    if (has_progress()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->progress());
    }

    // optional int32 cluster_jobs = 6;
    if (has_cluster_jobs()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cluster_jobs());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ControlMessage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ControlMessage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ControlMessage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ControlMessage::MergeFrom(const ControlMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_jobid()) {
      set_jobid(from.jobid());
    }
    if (from.has_quid()) {
      set_quid(from.quid());
    }
    if (from.has_action()) {
      set_action(from.action());
    }
    if (from.has_progress()) {
      set_progress(from.progress());
    }
    if (from.has_cluster_jobs()) {
      set_cluster_jobs(from.cluster_jobs());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ControlMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ControlMessage::CopyFrom(const ControlMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ControlMessage::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void ControlMessage::Swap(ControlMessage* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(jobid_, other->jobid_);
    std::swap(quid_, other->quid_);
    std::swap(action_, other->action_);
    std::swap(progress_, other->progress_);
    std::swap(cluster_jobs_, other->cluster_jobs_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ControlMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ControlMessage_descriptor_;
  metadata.reflection = ControlMessage_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)

// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: storagequery.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "storagequery.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* StorageQuery_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StorageQuery_reflection_ = NULL;
const ::google::protobuf::Descriptor* StorageQuery_MetaEntry_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StorageQuery_MetaEntry_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* StorageQuery_Action_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* StorageQuery_Result_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_storagequery_2eproto() {
  protobuf_AddDesc_storagequery_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "storagequery.proto");
  GOOGLE_CHECK(file != NULL);
  StorageQuery_descriptor_ = file->message_type(0);
  static const int StorageQuery_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StorageQuery, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StorageQuery, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StorageQuery, quid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StorageQuery, content_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StorageQuery, queryaction_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StorageQuery, queryresult_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StorageQuery, meta_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StorageQuery, next_),
  };
  StorageQuery_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      StorageQuery_descriptor_,
      StorageQuery::default_instance_,
      StorageQuery_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StorageQuery, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StorageQuery, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(StorageQuery));
  StorageQuery_MetaEntry_descriptor_ = StorageQuery_descriptor_->nested_type(0);
  static const int StorageQuery_MetaEntry_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StorageQuery_MetaEntry, key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StorageQuery_MetaEntry, value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StorageQuery_MetaEntry, meta_),
  };
  StorageQuery_MetaEntry_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      StorageQuery_MetaEntry_descriptor_,
      StorageQuery_MetaEntry::default_instance_,
      StorageQuery_MetaEntry_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StorageQuery_MetaEntry, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StorageQuery_MetaEntry, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(StorageQuery_MetaEntry));
  StorageQuery_Action_descriptor_ = StorageQuery_descriptor_->enum_type(0);
  StorageQuery_Result_descriptor_ = StorageQuery_descriptor_->enum_type(1);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_storagequery_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    StorageQuery_descriptor_, &StorageQuery::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    StorageQuery_MetaEntry_descriptor_, &StorageQuery_MetaEntry::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_storagequery_2eproto() {
  delete StorageQuery::default_instance_;
  delete StorageQuery_reflection_;
  delete StorageQuery_MetaEntry::default_instance_;
  delete StorageQuery_MetaEntry_reflection_;
}

void protobuf_AddDesc_storagequery_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\022storagequery.proto\"\253\003\n\014StorageQuery\022\014\n"
    "\004name\030\001 \002(\t\022\n\n\002id\030\002 \002(\005\022\014\n\004quid\030\003 \002(\t\022\017\n"
    "\007content\030\004 \001(\014\022)\n\013queryaction\030\005 \002(\0162\024.St"
    "orageQuery.Action\022)\n\013queryresult\030\006 \002(\0162\024"
    ".StorageQuery.Result\022%\n\004meta\030\007 \003(\0132\027.Sto"
    "rageQuery.MetaEntry\022\033\n\004next\030\010 \003(\0132\r.Stor"
    "ageQuery\032N\n\tMetaEntry\022\013\n\003key\030\001 \002(\t\022\r\n\005va"
    "lue\030\002 \001(\014\022%\n\004meta\030\003 \003(\0132\027.StorageQuery.M"
    "etaEntry\"D\n\006Action\022\n\n\006SELECT\020\000\022\n\n\006INSERT"
    "\020\001\022\n\n\006UPDATE\020\002\022\n\n\006DELETE\020\003\022\n\n\006SEARCH\020\004\"2"
    "\n\006Result\022\013\n\007SUCCESS\020\000\022\014\n\010NOTFOUND\020\001\022\r\n\tD"
    "UPLICATE\020\002", 450);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "storagequery.proto", &protobuf_RegisterTypes);
  StorageQuery::default_instance_ = new StorageQuery();
  StorageQuery_MetaEntry::default_instance_ = new StorageQuery_MetaEntry();
  StorageQuery::default_instance_->InitAsDefaultInstance();
  StorageQuery_MetaEntry::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_storagequery_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_storagequery_2eproto {
  StaticDescriptorInitializer_storagequery_2eproto() {
    protobuf_AddDesc_storagequery_2eproto();
  }
} static_descriptor_initializer_storagequery_2eproto_;

// ===================================================================

const ::google::protobuf::EnumDescriptor* StorageQuery_Action_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StorageQuery_Action_descriptor_;
}
bool StorageQuery_Action_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const StorageQuery_Action StorageQuery::SELECT;
const StorageQuery_Action StorageQuery::INSERT;
const StorageQuery_Action StorageQuery::UPDATE;
const StorageQuery_Action StorageQuery::DELETE;
const StorageQuery_Action StorageQuery::SEARCH;
const StorageQuery_Action StorageQuery::Action_MIN;
const StorageQuery_Action StorageQuery::Action_MAX;
const int StorageQuery::Action_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* StorageQuery_Result_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StorageQuery_Result_descriptor_;
}
bool StorageQuery_Result_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const StorageQuery_Result StorageQuery::SUCCESS;
const StorageQuery_Result StorageQuery::NOTFOUND;
const StorageQuery_Result StorageQuery::DUPLICATE;
const StorageQuery_Result StorageQuery::Result_MIN;
const StorageQuery_Result StorageQuery::Result_MAX;
const int StorageQuery::Result_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int StorageQuery_MetaEntry::kKeyFieldNumber;
const int StorageQuery_MetaEntry::kValueFieldNumber;
const int StorageQuery_MetaEntry::kMetaFieldNumber;
#endif  // !_MSC_VER

StorageQuery_MetaEntry::StorageQuery_MetaEntry()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:StorageQuery.MetaEntry)
}

void StorageQuery_MetaEntry::InitAsDefaultInstance() {
}

StorageQuery_MetaEntry::StorageQuery_MetaEntry(const StorageQuery_MetaEntry& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:StorageQuery.MetaEntry)
}

void StorageQuery_MetaEntry::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  key_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StorageQuery_MetaEntry::~StorageQuery_MetaEntry() {
  // @@protoc_insertion_point(destructor:StorageQuery.MetaEntry)
  SharedDtor();
}

void StorageQuery_MetaEntry::SharedDtor() {
  if (key_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete key_;
  }
  if (value_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete value_;
  }
  if (this != default_instance_) {
  }
}

void StorageQuery_MetaEntry::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StorageQuery_MetaEntry::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StorageQuery_MetaEntry_descriptor_;
}

const StorageQuery_MetaEntry& StorageQuery_MetaEntry::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_storagequery_2eproto();
  return *default_instance_;
}

StorageQuery_MetaEntry* StorageQuery_MetaEntry::default_instance_ = NULL;

StorageQuery_MetaEntry* StorageQuery_MetaEntry::New() const {
  return new StorageQuery_MetaEntry;
}

void StorageQuery_MetaEntry::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_key()) {
      if (key_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        key_->clear();
      }
    }
    if (has_value()) {
      if (value_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        value_->clear();
      }
    }
  }
  meta_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool StorageQuery_MetaEntry::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:StorageQuery.MetaEntry)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string key = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_key()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->key().data(), this->key().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "key");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_value;
        break;
      }

      // optional bytes value = 2;
      case 2: {
        if (tag == 18) {
         parse_value:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_value()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_meta;
        break;
      }

      // repeated .StorageQuery.MetaEntry meta = 3;
      case 3: {
        if (tag == 26) {
         parse_meta:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_meta()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_meta;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:StorageQuery.MetaEntry)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:StorageQuery.MetaEntry)
  return false;
#undef DO_
}

void StorageQuery_MetaEntry::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:StorageQuery.MetaEntry)
  // required string key = 1;
  if (has_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->key().data(), this->key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "key");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->key(), output);
  }

  // optional bytes value = 2;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->value(), output);
  }

  // repeated .StorageQuery.MetaEntry meta = 3;
  for (int i = 0; i < this->meta_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->meta(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:StorageQuery.MetaEntry)
}

::google::protobuf::uint8* StorageQuery_MetaEntry::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:StorageQuery.MetaEntry)
  // required string key = 1;
  if (has_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->key().data(), this->key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "key");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->key(), target);
  }

  // optional bytes value = 2;
  if (has_value()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->value(), target);
  }

  // repeated .StorageQuery.MetaEntry meta = 3;
  for (int i = 0; i < this->meta_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->meta(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:StorageQuery.MetaEntry)
  return target;
}

int StorageQuery_MetaEntry::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string key = 1;
    if (has_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->key());
    }

    // optional bytes value = 2;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->value());
    }

  }
  // repeated .StorageQuery.MetaEntry meta = 3;
  total_size += 1 * this->meta_size();
  for (int i = 0; i < this->meta_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->meta(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StorageQuery_MetaEntry::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const StorageQuery_MetaEntry* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const StorageQuery_MetaEntry*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void StorageQuery_MetaEntry::MergeFrom(const StorageQuery_MetaEntry& from) {
  GOOGLE_CHECK_NE(&from, this);
  meta_.MergeFrom(from.meta_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_key()) {
      set_key(from.key());
    }
    if (from.has_value()) {
      set_value(from.value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void StorageQuery_MetaEntry::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StorageQuery_MetaEntry::CopyFrom(const StorageQuery_MetaEntry& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StorageQuery_MetaEntry::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->meta())) return false;
  return true;
}

void StorageQuery_MetaEntry::Swap(StorageQuery_MetaEntry* other) {
  if (other != this) {
    std::swap(key_, other->key_);
    std::swap(value_, other->value_);
    meta_.Swap(&other->meta_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata StorageQuery_MetaEntry::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = StorageQuery_MetaEntry_descriptor_;
  metadata.reflection = StorageQuery_MetaEntry_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int StorageQuery::kNameFieldNumber;
const int StorageQuery::kIdFieldNumber;
const int StorageQuery::kQuidFieldNumber;
const int StorageQuery::kContentFieldNumber;
const int StorageQuery::kQueryactionFieldNumber;
const int StorageQuery::kQueryresultFieldNumber;
const int StorageQuery::kMetaFieldNumber;
const int StorageQuery::kNextFieldNumber;
#endif  // !_MSC_VER

StorageQuery::StorageQuery()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:StorageQuery)
}

void StorageQuery::InitAsDefaultInstance() {
}

StorageQuery::StorageQuery(const StorageQuery& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:StorageQuery)
}

void StorageQuery::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  id_ = 0;
  quid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  content_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  queryaction_ = 0;
  queryresult_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StorageQuery::~StorageQuery() {
  // @@protoc_insertion_point(destructor:StorageQuery)
  SharedDtor();
}

void StorageQuery::SharedDtor() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (quid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete quid_;
  }
  if (content_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete content_;
  }
  if (this != default_instance_) {
  }
}

void StorageQuery::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StorageQuery::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StorageQuery_descriptor_;
}

const StorageQuery& StorageQuery::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_storagequery_2eproto();
  return *default_instance_;
}

StorageQuery* StorageQuery::default_instance_ = NULL;

StorageQuery* StorageQuery::New() const {
  return new StorageQuery;
}

void StorageQuery::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<StorageQuery*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 63) {
    ZR_(id_, queryaction_);
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        name_->clear();
      }
    }
    if (has_quid()) {
      if (quid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        quid_->clear();
      }
    }
    if (has_content()) {
      if (content_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        content_->clear();
      }
    }
    queryresult_ = 0;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  meta_.Clear();
  next_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool StorageQuery::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:StorageQuery)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_id;
        break;
      }

      // required int32 id = 2;
      case 2: {
        if (tag == 16) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_quid;
        break;
      }

      // required string quid = 3;
      case 3: {
        if (tag == 26) {
         parse_quid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_quid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->quid().data(), this->quid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "quid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_content;
        break;
      }

      // optional bytes content = 4;
      case 4: {
        if (tag == 34) {
         parse_content:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_content()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_queryaction;
        break;
      }

      // required .StorageQuery.Action queryaction = 5;
      case 5: {
        if (tag == 40) {
         parse_queryaction:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::StorageQuery_Action_IsValid(value)) {
            set_queryaction(static_cast< ::StorageQuery_Action >(value));
          } else {
            mutable_unknown_fields()->AddVarint(5, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_queryresult;
        break;
      }

      // required .StorageQuery.Result queryresult = 6;
      case 6: {
        if (tag == 48) {
         parse_queryresult:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::StorageQuery_Result_IsValid(value)) {
            set_queryresult(static_cast< ::StorageQuery_Result >(value));
          } else {
            mutable_unknown_fields()->AddVarint(6, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_meta;
        break;
      }

      // repeated .StorageQuery.MetaEntry meta = 7;
      case 7: {
        if (tag == 58) {
         parse_meta:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_meta()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_meta;
        if (input->ExpectTag(66)) goto parse_next;
        break;
      }

      // repeated .StorageQuery next = 8;
      case 8: {
        if (tag == 66) {
         parse_next:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_next()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_next;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:StorageQuery)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:StorageQuery)
  return false;
#undef DO_
}

void StorageQuery::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:StorageQuery)
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // required int32 id = 2;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->id(), output);
  }

  // required string quid = 3;
  if (has_quid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->quid().data(), this->quid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "quid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->quid(), output);
  }

  // optional bytes content = 4;
  if (has_content()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->content(), output);
  }

  // required .StorageQuery.Action queryaction = 5;
  if (has_queryaction()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->queryaction(), output);
  }

  // required .StorageQuery.Result queryresult = 6;
  if (has_queryresult()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      6, this->queryresult(), output);
  }

  // repeated .StorageQuery.MetaEntry meta = 7;
  for (int i = 0; i < this->meta_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->meta(i), output);
  }

  // repeated .StorageQuery next = 8;
  for (int i = 0; i < this->next_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->next(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:StorageQuery)
}

::google::protobuf::uint8* StorageQuery::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:StorageQuery)
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // required int32 id = 2;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->id(), target);
  }

  // required string quid = 3;
  if (has_quid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->quid().data(), this->quid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "quid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->quid(), target);
  }

  // optional bytes content = 4;
  if (has_content()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->content(), target);
  }

  // required .StorageQuery.Action queryaction = 5;
  if (has_queryaction()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->queryaction(), target);
  }

  // required .StorageQuery.Result queryresult = 6;
  if (has_queryresult()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      6, this->queryresult(), target);
  }

  // repeated .StorageQuery.MetaEntry meta = 7;
  for (int i = 0; i < this->meta_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->meta(i), target);
  }

  // repeated .StorageQuery next = 8;
  for (int i = 0; i < this->next_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->next(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:StorageQuery)
  return target;
}

int StorageQuery::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // required int32 id = 2;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // required string quid = 3;
    if (has_quid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->quid());
    }

    // optional bytes content = 4;
    if (has_content()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->content());
    }

    // required .StorageQuery.Action queryaction = 5;
    if (has_queryaction()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->queryaction());
    }

    // required .StorageQuery.Result queryresult = 6;
    if (has_queryresult()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->queryresult());
    }

  }
  // repeated .StorageQuery.MetaEntry meta = 7;
  total_size += 1 * this->meta_size();
  for (int i = 0; i < this->meta_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->meta(i));
  }

  // repeated .StorageQuery next = 8;
  total_size += 1 * this->next_size();
  for (int i = 0; i < this->next_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->next(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StorageQuery::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const StorageQuery* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const StorageQuery*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void StorageQuery::MergeFrom(const StorageQuery& from) {
  GOOGLE_CHECK_NE(&from, this);
  meta_.MergeFrom(from.meta_);
  next_.MergeFrom(from.next_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_quid()) {
      set_quid(from.quid());
    }
    if (from.has_content()) {
      set_content(from.content());
    }
    if (from.has_queryaction()) {
      set_queryaction(from.queryaction());
    }
    if (from.has_queryresult()) {
      set_queryresult(from.queryresult());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void StorageQuery::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StorageQuery::CopyFrom(const StorageQuery& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StorageQuery::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000037) != 0x00000037) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->meta())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->next())) return false;
  return true;
}

void StorageQuery::Swap(StorageQuery* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(id_, other->id_);
    std::swap(quid_, other->quid_);
    std::swap(content_, other->content_);
    std::swap(queryaction_, other->queryaction_);
    std::swap(queryresult_, other->queryresult_);
    meta_.Swap(&other->meta_);
    next_.Swap(&other->next_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata StorageQuery::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = StorageQuery_descriptor_;
  metadata.reflection = StorageQuery_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)

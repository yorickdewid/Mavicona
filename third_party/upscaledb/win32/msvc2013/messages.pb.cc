// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: messages.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "messages.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)

namespace upscaledb {

void protobuf_ShutdownFile_messages_2eproto() {
  delete ProtoWrapper::default_instance_;
  delete ConnectRequest::default_instance_;
  delete ConnectReply::default_instance_;
  delete DisconnectRequest::default_instance_;
  delete DisconnectReply::default_instance_;
  delete EnvGetParametersRequest::default_instance_;
  delete EnvGetParametersReply::default_instance_;
  delete EnvGetDatabaseNamesRequest::default_instance_;
  delete EnvGetDatabaseNamesReply::default_instance_;
  delete EnvRenameRequest::default_instance_;
  delete EnvRenameReply::default_instance_;
  delete EnvFlushRequest::default_instance_;
  delete EnvFlushReply::default_instance_;
  delete EnvCreateDbRequest::default_instance_;
  delete EnvCreateDbReply::default_instance_;
  delete EnvOpenDbRequest::default_instance_;
  delete EnvOpenDbReply::default_instance_;
  delete EnvEraseDbRequest::default_instance_;
  delete EnvEraseDbReply::default_instance_;
  delete DbCloseRequest::default_instance_;
  delete DbCloseReply::default_instance_;
  delete DbGetParametersRequest::default_instance_;
  delete DbGetParametersReply::default_instance_;
  delete TxnBeginRequest::default_instance_;
  delete TxnBeginReply::default_instance_;
  delete TxnCommitRequest::default_instance_;
  delete TxnCommitReply::default_instance_;
  delete TxnAbortRequest::default_instance_;
  delete TxnAbortReply::default_instance_;
  delete DbCheckIntegrityRequest::default_instance_;
  delete DbCheckIntegrityReply::default_instance_;
  delete DbCountRequest::default_instance_;
  delete DbCountReply::default_instance_;
  delete Key::default_instance_;
  delete Record::default_instance_;
  delete DbInsertRequest::default_instance_;
  delete DbInsertReply::default_instance_;
  delete DbEraseRequest::default_instance_;
  delete DbEraseReply::default_instance_;
  delete DbFindRequest::default_instance_;
  delete DbFindReply::default_instance_;
  delete CursorCreateRequest::default_instance_;
  delete CursorCreateReply::default_instance_;
  delete CursorCloneRequest::default_instance_;
  delete CursorCloneReply::default_instance_;
  delete CursorCloseRequest::default_instance_;
  delete CursorCloseReply::default_instance_;
  delete CursorInsertRequest::default_instance_;
  delete CursorInsertReply::default_instance_;
  delete CursorEraseRequest::default_instance_;
  delete CursorEraseReply::default_instance_;
  delete CursorGetRecordCountRequest::default_instance_;
  delete CursorGetRecordCountReply::default_instance_;
  delete CursorGetRecordSizeRequest::default_instance_;
  delete CursorGetRecordSizeReply::default_instance_;
  delete CursorGetDuplicatePositionRequest::default_instance_;
  delete CursorGetDuplicatePositionReply::default_instance_;
  delete CursorOverwriteRequest::default_instance_;
  delete CursorOverwriteReply::default_instance_;
  delete CursorMoveRequest::default_instance_;
  delete CursorMoveReply::default_instance_;
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
void protobuf_AddDesc_messages_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#else
void protobuf_AddDesc_messages_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#endif
  ProtoWrapper::default_instance_ = new ProtoWrapper();
  ConnectRequest::default_instance_ = new ConnectRequest();
  ConnectReply::default_instance_ = new ConnectReply();
  DisconnectRequest::default_instance_ = new DisconnectRequest();
  DisconnectReply::default_instance_ = new DisconnectReply();
  EnvGetParametersRequest::default_instance_ = new EnvGetParametersRequest();
  EnvGetParametersReply::default_instance_ = new EnvGetParametersReply();
  EnvGetDatabaseNamesRequest::default_instance_ = new EnvGetDatabaseNamesRequest();
  EnvGetDatabaseNamesReply::default_instance_ = new EnvGetDatabaseNamesReply();
  EnvRenameRequest::default_instance_ = new EnvRenameRequest();
  EnvRenameReply::default_instance_ = new EnvRenameReply();
  EnvFlushRequest::default_instance_ = new EnvFlushRequest();
  EnvFlushReply::default_instance_ = new EnvFlushReply();
  EnvCreateDbRequest::default_instance_ = new EnvCreateDbRequest();
  EnvCreateDbReply::default_instance_ = new EnvCreateDbReply();
  EnvOpenDbRequest::default_instance_ = new EnvOpenDbRequest();
  EnvOpenDbReply::default_instance_ = new EnvOpenDbReply();
  EnvEraseDbRequest::default_instance_ = new EnvEraseDbRequest();
  EnvEraseDbReply::default_instance_ = new EnvEraseDbReply();
  DbCloseRequest::default_instance_ = new DbCloseRequest();
  DbCloseReply::default_instance_ = new DbCloseReply();
  DbGetParametersRequest::default_instance_ = new DbGetParametersRequest();
  DbGetParametersReply::default_instance_ = new DbGetParametersReply();
  TxnBeginRequest::default_instance_ = new TxnBeginRequest();
  TxnBeginReply::default_instance_ = new TxnBeginReply();
  TxnCommitRequest::default_instance_ = new TxnCommitRequest();
  TxnCommitReply::default_instance_ = new TxnCommitReply();
  TxnAbortRequest::default_instance_ = new TxnAbortRequest();
  TxnAbortReply::default_instance_ = new TxnAbortReply();
  DbCheckIntegrityRequest::default_instance_ = new DbCheckIntegrityRequest();
  DbCheckIntegrityReply::default_instance_ = new DbCheckIntegrityReply();
  DbCountRequest::default_instance_ = new DbCountRequest();
  DbCountReply::default_instance_ = new DbCountReply();
  Key::default_instance_ = new Key();
  Record::default_instance_ = new Record();
  DbInsertRequest::default_instance_ = new DbInsertRequest();
  DbInsertReply::default_instance_ = new DbInsertReply();
  DbEraseRequest::default_instance_ = new DbEraseRequest();
  DbEraseReply::default_instance_ = new DbEraseReply();
  DbFindRequest::default_instance_ = new DbFindRequest();
  DbFindReply::default_instance_ = new DbFindReply();
  CursorCreateRequest::default_instance_ = new CursorCreateRequest();
  CursorCreateReply::default_instance_ = new CursorCreateReply();
  CursorCloneRequest::default_instance_ = new CursorCloneRequest();
  CursorCloneReply::default_instance_ = new CursorCloneReply();
  CursorCloseRequest::default_instance_ = new CursorCloseRequest();
  CursorCloseReply::default_instance_ = new CursorCloseReply();
  CursorInsertRequest::default_instance_ = new CursorInsertRequest();
  CursorInsertReply::default_instance_ = new CursorInsertReply();
  CursorEraseRequest::default_instance_ = new CursorEraseRequest();
  CursorEraseReply::default_instance_ = new CursorEraseReply();
  CursorGetRecordCountRequest::default_instance_ = new CursorGetRecordCountRequest();
  CursorGetRecordCountReply::default_instance_ = new CursorGetRecordCountReply();
  CursorGetRecordSizeRequest::default_instance_ = new CursorGetRecordSizeRequest();
  CursorGetRecordSizeReply::default_instance_ = new CursorGetRecordSizeReply();
  CursorGetDuplicatePositionRequest::default_instance_ = new CursorGetDuplicatePositionRequest();
  CursorGetDuplicatePositionReply::default_instance_ = new CursorGetDuplicatePositionReply();
  CursorOverwriteRequest::default_instance_ = new CursorOverwriteRequest();
  CursorOverwriteReply::default_instance_ = new CursorOverwriteReply();
  CursorMoveRequest::default_instance_ = new CursorMoveRequest();
  CursorMoveReply::default_instance_ = new CursorMoveReply();
  ProtoWrapper::default_instance_->InitAsDefaultInstance();
  ConnectRequest::default_instance_->InitAsDefaultInstance();
  ConnectReply::default_instance_->InitAsDefaultInstance();
  DisconnectRequest::default_instance_->InitAsDefaultInstance();
  DisconnectReply::default_instance_->InitAsDefaultInstance();
  EnvGetParametersRequest::default_instance_->InitAsDefaultInstance();
  EnvGetParametersReply::default_instance_->InitAsDefaultInstance();
  EnvGetDatabaseNamesRequest::default_instance_->InitAsDefaultInstance();
  EnvGetDatabaseNamesReply::default_instance_->InitAsDefaultInstance();
  EnvRenameRequest::default_instance_->InitAsDefaultInstance();
  EnvRenameReply::default_instance_->InitAsDefaultInstance();
  EnvFlushRequest::default_instance_->InitAsDefaultInstance();
  EnvFlushReply::default_instance_->InitAsDefaultInstance();
  EnvCreateDbRequest::default_instance_->InitAsDefaultInstance();
  EnvCreateDbReply::default_instance_->InitAsDefaultInstance();
  EnvOpenDbRequest::default_instance_->InitAsDefaultInstance();
  EnvOpenDbReply::default_instance_->InitAsDefaultInstance();
  EnvEraseDbRequest::default_instance_->InitAsDefaultInstance();
  EnvEraseDbReply::default_instance_->InitAsDefaultInstance();
  DbCloseRequest::default_instance_->InitAsDefaultInstance();
  DbCloseReply::default_instance_->InitAsDefaultInstance();
  DbGetParametersRequest::default_instance_->InitAsDefaultInstance();
  DbGetParametersReply::default_instance_->InitAsDefaultInstance();
  TxnBeginRequest::default_instance_->InitAsDefaultInstance();
  TxnBeginReply::default_instance_->InitAsDefaultInstance();
  TxnCommitRequest::default_instance_->InitAsDefaultInstance();
  TxnCommitReply::default_instance_->InitAsDefaultInstance();
  TxnAbortRequest::default_instance_->InitAsDefaultInstance();
  TxnAbortReply::default_instance_->InitAsDefaultInstance();
  DbCheckIntegrityRequest::default_instance_->InitAsDefaultInstance();
  DbCheckIntegrityReply::default_instance_->InitAsDefaultInstance();
  DbCountRequest::default_instance_->InitAsDefaultInstance();
  DbCountReply::default_instance_->InitAsDefaultInstance();
  Key::default_instance_->InitAsDefaultInstance();
  Record::default_instance_->InitAsDefaultInstance();
  DbInsertRequest::default_instance_->InitAsDefaultInstance();
  DbInsertReply::default_instance_->InitAsDefaultInstance();
  DbEraseRequest::default_instance_->InitAsDefaultInstance();
  DbEraseReply::default_instance_->InitAsDefaultInstance();
  DbFindRequest::default_instance_->InitAsDefaultInstance();
  DbFindReply::default_instance_->InitAsDefaultInstance();
  CursorCreateRequest::default_instance_->InitAsDefaultInstance();
  CursorCreateReply::default_instance_->InitAsDefaultInstance();
  CursorCloneRequest::default_instance_->InitAsDefaultInstance();
  CursorCloneReply::default_instance_->InitAsDefaultInstance();
  CursorCloseRequest::default_instance_->InitAsDefaultInstance();
  CursorCloseReply::default_instance_->InitAsDefaultInstance();
  CursorInsertRequest::default_instance_->InitAsDefaultInstance();
  CursorInsertReply::default_instance_->InitAsDefaultInstance();
  CursorEraseRequest::default_instance_->InitAsDefaultInstance();
  CursorEraseReply::default_instance_->InitAsDefaultInstance();
  CursorGetRecordCountRequest::default_instance_->InitAsDefaultInstance();
  CursorGetRecordCountReply::default_instance_->InitAsDefaultInstance();
  CursorGetRecordSizeRequest::default_instance_->InitAsDefaultInstance();
  CursorGetRecordSizeReply::default_instance_->InitAsDefaultInstance();
  CursorGetDuplicatePositionRequest::default_instance_->InitAsDefaultInstance();
  CursorGetDuplicatePositionReply::default_instance_->InitAsDefaultInstance();
  CursorOverwriteRequest::default_instance_->InitAsDefaultInstance();
  CursorOverwriteReply::default_instance_->InitAsDefaultInstance();
  CursorMoveRequest::default_instance_->InitAsDefaultInstance();
  CursorMoveReply::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_messages_2eproto);
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_messages_2eproto_once_);
void protobuf_AddDesc_messages_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_messages_2eproto_once_,
                 &protobuf_AddDesc_messages_2eproto_impl);
}
#else
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_messages_2eproto {
  StaticDescriptorInitializer_messages_2eproto() {
    protobuf_AddDesc_messages_2eproto();
  }
} static_descriptor_initializer_messages_2eproto_;
#endif

// ===================================================================

bool ProtoWrapper_Type_IsValid(int value) {
  switch(value) {
    case 10:
    case 11:
    case 12:
    case 13:
    case 20:
    case 21:
    case 30:
    case 31:
    case 40:
    case 41:
    case 50:
    case 51:
    case 60:
    case 61:
    case 70:
    case 71:
    case 80:
    case 81:
    case 90:
    case 91:
    case 100:
    case 101:
    case 120:
    case 121:
    case 130:
    case 131:
    case 140:
    case 141:
    case 150:
    case 151:
    case 160:
    case 161:
    case 170:
    case 171:
    case 180:
    case 181:
    case 190:
    case 191:
    case 200:
    case 201:
    case 210:
    case 211:
    case 220:
    case 221:
    case 230:
    case 231:
    case 240:
    case 241:
    case 260:
    case 261:
    case 262:
    case 263:
    case 264:
    case 265:
    case 270:
    case 271:
    case 280:
    case 281:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const ProtoWrapper_Type ProtoWrapper::CONNECT_REQUEST;
const ProtoWrapper_Type ProtoWrapper::CONNECT_REPLY;
const ProtoWrapper_Type ProtoWrapper::DISCONNECT_REQUEST;
const ProtoWrapper_Type ProtoWrapper::DISCONNECT_REPLY;
const ProtoWrapper_Type ProtoWrapper::ENV_RENAME_REQUEST;
const ProtoWrapper_Type ProtoWrapper::ENV_RENAME_REPLY;
const ProtoWrapper_Type ProtoWrapper::ENV_GET_PARAMETERS_REQUEST;
const ProtoWrapper_Type ProtoWrapper::ENV_GET_PARAMETERS_REPLY;
const ProtoWrapper_Type ProtoWrapper::ENV_GET_DATABASE_NAMES_REQUEST;
const ProtoWrapper_Type ProtoWrapper::ENV_GET_DATABASE_NAMES_REPLY;
const ProtoWrapper_Type ProtoWrapper::ENV_FLUSH_REQUEST;
const ProtoWrapper_Type ProtoWrapper::ENV_FLUSH_REPLY;
const ProtoWrapper_Type ProtoWrapper::ENV_CREATE_DB_REQUEST;
const ProtoWrapper_Type ProtoWrapper::ENV_CREATE_DB_REPLY;
const ProtoWrapper_Type ProtoWrapper::ENV_OPEN_DB_REQUEST;
const ProtoWrapper_Type ProtoWrapper::ENV_OPEN_DB_REPLY;
const ProtoWrapper_Type ProtoWrapper::ENV_ERASE_DB_REQUEST;
const ProtoWrapper_Type ProtoWrapper::ENV_ERASE_DB_REPLY;
const ProtoWrapper_Type ProtoWrapper::DB_CLOSE_REQUEST;
const ProtoWrapper_Type ProtoWrapper::DB_CLOSE_REPLY;
const ProtoWrapper_Type ProtoWrapper::DB_GET_PARAMETERS_REQUEST;
const ProtoWrapper_Type ProtoWrapper::DB_GET_PARAMETERS_REPLY;
const ProtoWrapper_Type ProtoWrapper::TXN_BEGIN_REQUEST;
const ProtoWrapper_Type ProtoWrapper::TXN_BEGIN_REPLY;
const ProtoWrapper_Type ProtoWrapper::TXN_COMMIT_REQUEST;
const ProtoWrapper_Type ProtoWrapper::TXN_COMMIT_REPLY;
const ProtoWrapper_Type ProtoWrapper::TXN_ABORT_REQUEST;
const ProtoWrapper_Type ProtoWrapper::TXN_ABORT_REPLY;
const ProtoWrapper_Type ProtoWrapper::DB_CHECK_INTEGRITY_REQUEST;
const ProtoWrapper_Type ProtoWrapper::DB_CHECK_INTEGRITY_REPLY;
const ProtoWrapper_Type ProtoWrapper::DB_GET_KEY_COUNT_REQUEST;
const ProtoWrapper_Type ProtoWrapper::DB_GET_KEY_COUNT_REPLY;
const ProtoWrapper_Type ProtoWrapper::DB_INSERT_REQUEST;
const ProtoWrapper_Type ProtoWrapper::DB_INSERT_REPLY;
const ProtoWrapper_Type ProtoWrapper::DB_ERASE_REQUEST;
const ProtoWrapper_Type ProtoWrapper::DB_ERASE_REPLY;
const ProtoWrapper_Type ProtoWrapper::DB_FIND_REQUEST;
const ProtoWrapper_Type ProtoWrapper::DB_FIND_REPLY;
const ProtoWrapper_Type ProtoWrapper::CURSOR_CREATE_REQUEST;
const ProtoWrapper_Type ProtoWrapper::CURSOR_CREATE_REPLY;
const ProtoWrapper_Type ProtoWrapper::CURSOR_CLONE_REQUEST;
const ProtoWrapper_Type ProtoWrapper::CURSOR_CLONE_REPLY;
const ProtoWrapper_Type ProtoWrapper::CURSOR_CLOSE_REQUEST;
const ProtoWrapper_Type ProtoWrapper::CURSOR_CLOSE_REPLY;
const ProtoWrapper_Type ProtoWrapper::CURSOR_INSERT_REQUEST;
const ProtoWrapper_Type ProtoWrapper::CURSOR_INSERT_REPLY;
const ProtoWrapper_Type ProtoWrapper::CURSOR_ERASE_REQUEST;
const ProtoWrapper_Type ProtoWrapper::CURSOR_ERASE_REPLY;
const ProtoWrapper_Type ProtoWrapper::CURSOR_GET_RECORD_COUNT_REQUEST;
const ProtoWrapper_Type ProtoWrapper::CURSOR_GET_RECORD_COUNT_REPLY;
const ProtoWrapper_Type ProtoWrapper::CURSOR_GET_DUPLICATE_POSITION_REQUEST;
const ProtoWrapper_Type ProtoWrapper::CURSOR_GET_DUPLICATE_POSITION_REPLY;
const ProtoWrapper_Type ProtoWrapper::CURSOR_GET_RECORD_SIZE_REQUEST;
const ProtoWrapper_Type ProtoWrapper::CURSOR_GET_RECORD_SIZE_REPLY;
const ProtoWrapper_Type ProtoWrapper::CURSOR_OVERWRITE_REQUEST;
const ProtoWrapper_Type ProtoWrapper::CURSOR_OVERWRITE_REPLY;
const ProtoWrapper_Type ProtoWrapper::CURSOR_MOVE_REQUEST;
const ProtoWrapper_Type ProtoWrapper::CURSOR_MOVE_REPLY;
const ProtoWrapper_Type ProtoWrapper::Type_MIN;
const ProtoWrapper_Type ProtoWrapper::Type_MAX;
const int ProtoWrapper::Type_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int ProtoWrapper::kTypeFieldNumber;
const int ProtoWrapper::kConnectRequestFieldNumber;
const int ProtoWrapper::kConnectReplyFieldNumber;
const int ProtoWrapper::kDisconnectRequestFieldNumber;
const int ProtoWrapper::kDisconnectReplyFieldNumber;
const int ProtoWrapper::kEnvRenameRequestFieldNumber;
const int ProtoWrapper::kEnvRenameReplyFieldNumber;
const int ProtoWrapper::kEnvGetParametersRequestFieldNumber;
const int ProtoWrapper::kEnvGetParametersReplyFieldNumber;
const int ProtoWrapper::kEnvGetDatabaseNamesRequestFieldNumber;
const int ProtoWrapper::kEnvGetDatabaseNamesReplyFieldNumber;
const int ProtoWrapper::kEnvFlushRequestFieldNumber;
const int ProtoWrapper::kEnvFlushReplyFieldNumber;
const int ProtoWrapper::kEnvCreateDbRequestFieldNumber;
const int ProtoWrapper::kEnvCreateDbReplyFieldNumber;
const int ProtoWrapper::kEnvOpenDbRequestFieldNumber;
const int ProtoWrapper::kEnvOpenDbReplyFieldNumber;
const int ProtoWrapper::kEnvEraseDbRequestFieldNumber;
const int ProtoWrapper::kEnvEraseDbReplyFieldNumber;
const int ProtoWrapper::kDbCloseRequestFieldNumber;
const int ProtoWrapper::kDbCloseReplyFieldNumber;
const int ProtoWrapper::kDbGetParametersRequestFieldNumber;
const int ProtoWrapper::kDbGetParametersReplyFieldNumber;
const int ProtoWrapper::kTxnBeginRequestFieldNumber;
const int ProtoWrapper::kTxnBeginReplyFieldNumber;
const int ProtoWrapper::kTxnCommitRequestFieldNumber;
const int ProtoWrapper::kTxnCommitReplyFieldNumber;
const int ProtoWrapper::kTxnAbortRequestFieldNumber;
const int ProtoWrapper::kTxnAbortReplyFieldNumber;
const int ProtoWrapper::kDbCheckIntegrityRequestFieldNumber;
const int ProtoWrapper::kDbCheckIntegrityReplyFieldNumber;
const int ProtoWrapper::kDbCountRequestFieldNumber;
const int ProtoWrapper::kDbCountReplyFieldNumber;
const int ProtoWrapper::kDbInsertRequestFieldNumber;
const int ProtoWrapper::kDbInsertReplyFieldNumber;
const int ProtoWrapper::kDbEraseRequestFieldNumber;
const int ProtoWrapper::kDbEraseReplyFieldNumber;
const int ProtoWrapper::kDbFindRequestFieldNumber;
const int ProtoWrapper::kDbFindReplyFieldNumber;
const int ProtoWrapper::kCursorCreateRequestFieldNumber;
const int ProtoWrapper::kCursorCreateReplyFieldNumber;
const int ProtoWrapper::kCursorCloneRequestFieldNumber;
const int ProtoWrapper::kCursorCloneReplyFieldNumber;
const int ProtoWrapper::kCursorCloseRequestFieldNumber;
const int ProtoWrapper::kCursorCloseReplyFieldNumber;
const int ProtoWrapper::kCursorInsertRequestFieldNumber;
const int ProtoWrapper::kCursorInsertReplyFieldNumber;
const int ProtoWrapper::kCursorEraseRequestFieldNumber;
const int ProtoWrapper::kCursorEraseReplyFieldNumber;
const int ProtoWrapper::kCursorGetRecordCountRequestFieldNumber;
const int ProtoWrapper::kCursorGetRecordCountReplyFieldNumber;
const int ProtoWrapper::kCursorGetDuplicatePositionRequestFieldNumber;
const int ProtoWrapper::kCursorGetDuplicatePositionReplyFieldNumber;
const int ProtoWrapper::kCursorGetRecordSizeRequestFieldNumber;
const int ProtoWrapper::kCursorGetRecordSizeReplyFieldNumber;
const int ProtoWrapper::kCursorOverwriteRequestFieldNumber;
const int ProtoWrapper::kCursorOverwriteReplyFieldNumber;
const int ProtoWrapper::kCursorMoveRequestFieldNumber;
const int ProtoWrapper::kCursorMoveReplyFieldNumber;
#endif  // !_MSC_VER

ProtoWrapper::ProtoWrapper()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:upscaledb.ProtoWrapper)
}

void ProtoWrapper::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  connect_request_ = const_cast< ::upscaledb::ConnectRequest*>(
      ::upscaledb::ConnectRequest::internal_default_instance());
#else
  connect_request_ = const_cast< ::upscaledb::ConnectRequest*>(&::upscaledb::ConnectRequest::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  connect_reply_ = const_cast< ::upscaledb::ConnectReply*>(
      ::upscaledb::ConnectReply::internal_default_instance());
#else
  connect_reply_ = const_cast< ::upscaledb::ConnectReply*>(&::upscaledb::ConnectReply::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  disconnect_request_ = const_cast< ::upscaledb::DisconnectRequest*>(
      ::upscaledb::DisconnectRequest::internal_default_instance());
#else
  disconnect_request_ = const_cast< ::upscaledb::DisconnectRequest*>(&::upscaledb::DisconnectRequest::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  disconnect_reply_ = const_cast< ::upscaledb::DisconnectReply*>(
      ::upscaledb::DisconnectReply::internal_default_instance());
#else
  disconnect_reply_ = const_cast< ::upscaledb::DisconnectReply*>(&::upscaledb::DisconnectReply::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  env_rename_request_ = const_cast< ::upscaledb::EnvRenameRequest*>(
      ::upscaledb::EnvRenameRequest::internal_default_instance());
#else
  env_rename_request_ = const_cast< ::upscaledb::EnvRenameRequest*>(&::upscaledb::EnvRenameRequest::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  env_rename_reply_ = const_cast< ::upscaledb::EnvRenameReply*>(
      ::upscaledb::EnvRenameReply::internal_default_instance());
#else
  env_rename_reply_ = const_cast< ::upscaledb::EnvRenameReply*>(&::upscaledb::EnvRenameReply::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  env_get_parameters_request_ = const_cast< ::upscaledb::EnvGetParametersRequest*>(
      ::upscaledb::EnvGetParametersRequest::internal_default_instance());
#else
  env_get_parameters_request_ = const_cast< ::upscaledb::EnvGetParametersRequest*>(&::upscaledb::EnvGetParametersRequest::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  env_get_parameters_reply_ = const_cast< ::upscaledb::EnvGetParametersReply*>(
      ::upscaledb::EnvGetParametersReply::internal_default_instance());
#else
  env_get_parameters_reply_ = const_cast< ::upscaledb::EnvGetParametersReply*>(&::upscaledb::EnvGetParametersReply::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  env_get_database_names_request_ = const_cast< ::upscaledb::EnvGetDatabaseNamesRequest*>(
      ::upscaledb::EnvGetDatabaseNamesRequest::internal_default_instance());
#else
  env_get_database_names_request_ = const_cast< ::upscaledb::EnvGetDatabaseNamesRequest*>(&::upscaledb::EnvGetDatabaseNamesRequest::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  env_get_database_names_reply_ = const_cast< ::upscaledb::EnvGetDatabaseNamesReply*>(
      ::upscaledb::EnvGetDatabaseNamesReply::internal_default_instance());
#else
  env_get_database_names_reply_ = const_cast< ::upscaledb::EnvGetDatabaseNamesReply*>(&::upscaledb::EnvGetDatabaseNamesReply::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  env_flush_request_ = const_cast< ::upscaledb::EnvFlushRequest*>(
      ::upscaledb::EnvFlushRequest::internal_default_instance());
#else
  env_flush_request_ = const_cast< ::upscaledb::EnvFlushRequest*>(&::upscaledb::EnvFlushRequest::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  env_flush_reply_ = const_cast< ::upscaledb::EnvFlushReply*>(
      ::upscaledb::EnvFlushReply::internal_default_instance());
#else
  env_flush_reply_ = const_cast< ::upscaledb::EnvFlushReply*>(&::upscaledb::EnvFlushReply::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  env_create_db_request_ = const_cast< ::upscaledb::EnvCreateDbRequest*>(
      ::upscaledb::EnvCreateDbRequest::internal_default_instance());
#else
  env_create_db_request_ = const_cast< ::upscaledb::EnvCreateDbRequest*>(&::upscaledb::EnvCreateDbRequest::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  env_create_db_reply_ = const_cast< ::upscaledb::EnvCreateDbReply*>(
      ::upscaledb::EnvCreateDbReply::internal_default_instance());
#else
  env_create_db_reply_ = const_cast< ::upscaledb::EnvCreateDbReply*>(&::upscaledb::EnvCreateDbReply::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  env_open_db_request_ = const_cast< ::upscaledb::EnvOpenDbRequest*>(
      ::upscaledb::EnvOpenDbRequest::internal_default_instance());
#else
  env_open_db_request_ = const_cast< ::upscaledb::EnvOpenDbRequest*>(&::upscaledb::EnvOpenDbRequest::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  env_open_db_reply_ = const_cast< ::upscaledb::EnvOpenDbReply*>(
      ::upscaledb::EnvOpenDbReply::internal_default_instance());
#else
  env_open_db_reply_ = const_cast< ::upscaledb::EnvOpenDbReply*>(&::upscaledb::EnvOpenDbReply::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  env_erase_db_request_ = const_cast< ::upscaledb::EnvEraseDbRequest*>(
      ::upscaledb::EnvEraseDbRequest::internal_default_instance());
#else
  env_erase_db_request_ = const_cast< ::upscaledb::EnvEraseDbRequest*>(&::upscaledb::EnvEraseDbRequest::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  env_erase_db_reply_ = const_cast< ::upscaledb::EnvEraseDbReply*>(
      ::upscaledb::EnvEraseDbReply::internal_default_instance());
#else
  env_erase_db_reply_ = const_cast< ::upscaledb::EnvEraseDbReply*>(&::upscaledb::EnvEraseDbReply::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  db_close_request_ = const_cast< ::upscaledb::DbCloseRequest*>(
      ::upscaledb::DbCloseRequest::internal_default_instance());
#else
  db_close_request_ = const_cast< ::upscaledb::DbCloseRequest*>(&::upscaledb::DbCloseRequest::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  db_close_reply_ = const_cast< ::upscaledb::DbCloseReply*>(
      ::upscaledb::DbCloseReply::internal_default_instance());
#else
  db_close_reply_ = const_cast< ::upscaledb::DbCloseReply*>(&::upscaledb::DbCloseReply::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  db_get_parameters_request_ = const_cast< ::upscaledb::DbGetParametersRequest*>(
      ::upscaledb::DbGetParametersRequest::internal_default_instance());
#else
  db_get_parameters_request_ = const_cast< ::upscaledb::DbGetParametersRequest*>(&::upscaledb::DbGetParametersRequest::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  db_get_parameters_reply_ = const_cast< ::upscaledb::DbGetParametersReply*>(
      ::upscaledb::DbGetParametersReply::internal_default_instance());
#else
  db_get_parameters_reply_ = const_cast< ::upscaledb::DbGetParametersReply*>(&::upscaledb::DbGetParametersReply::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  txn_begin_request_ = const_cast< ::upscaledb::TxnBeginRequest*>(
      ::upscaledb::TxnBeginRequest::internal_default_instance());
#else
  txn_begin_request_ = const_cast< ::upscaledb::TxnBeginRequest*>(&::upscaledb::TxnBeginRequest::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  txn_begin_reply_ = const_cast< ::upscaledb::TxnBeginReply*>(
      ::upscaledb::TxnBeginReply::internal_default_instance());
#else
  txn_begin_reply_ = const_cast< ::upscaledb::TxnBeginReply*>(&::upscaledb::TxnBeginReply::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  txn_commit_request_ = const_cast< ::upscaledb::TxnCommitRequest*>(
      ::upscaledb::TxnCommitRequest::internal_default_instance());
#else
  txn_commit_request_ = const_cast< ::upscaledb::TxnCommitRequest*>(&::upscaledb::TxnCommitRequest::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  txn_commit_reply_ = const_cast< ::upscaledb::TxnCommitReply*>(
      ::upscaledb::TxnCommitReply::internal_default_instance());
#else
  txn_commit_reply_ = const_cast< ::upscaledb::TxnCommitReply*>(&::upscaledb::TxnCommitReply::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  txn_abort_request_ = const_cast< ::upscaledb::TxnAbortRequest*>(
      ::upscaledb::TxnAbortRequest::internal_default_instance());
#else
  txn_abort_request_ = const_cast< ::upscaledb::TxnAbortRequest*>(&::upscaledb::TxnAbortRequest::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  txn_abort_reply_ = const_cast< ::upscaledb::TxnAbortReply*>(
      ::upscaledb::TxnAbortReply::internal_default_instance());
#else
  txn_abort_reply_ = const_cast< ::upscaledb::TxnAbortReply*>(&::upscaledb::TxnAbortReply::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  db_check_integrity_request_ = const_cast< ::upscaledb::DbCheckIntegrityRequest*>(
      ::upscaledb::DbCheckIntegrityRequest::internal_default_instance());
#else
  db_check_integrity_request_ = const_cast< ::upscaledb::DbCheckIntegrityRequest*>(&::upscaledb::DbCheckIntegrityRequest::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  db_check_integrity_reply_ = const_cast< ::upscaledb::DbCheckIntegrityReply*>(
      ::upscaledb::DbCheckIntegrityReply::internal_default_instance());
#else
  db_check_integrity_reply_ = const_cast< ::upscaledb::DbCheckIntegrityReply*>(&::upscaledb::DbCheckIntegrityReply::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  db_count_request_ = const_cast< ::upscaledb::DbCountRequest*>(
      ::upscaledb::DbCountRequest::internal_default_instance());
#else
  db_count_request_ = const_cast< ::upscaledb::DbCountRequest*>(&::upscaledb::DbCountRequest::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  db_count_reply_ = const_cast< ::upscaledb::DbCountReply*>(
      ::upscaledb::DbCountReply::internal_default_instance());
#else
  db_count_reply_ = const_cast< ::upscaledb::DbCountReply*>(&::upscaledb::DbCountReply::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  db_insert_request_ = const_cast< ::upscaledb::DbInsertRequest*>(
      ::upscaledb::DbInsertRequest::internal_default_instance());
#else
  db_insert_request_ = const_cast< ::upscaledb::DbInsertRequest*>(&::upscaledb::DbInsertRequest::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  db_insert_reply_ = const_cast< ::upscaledb::DbInsertReply*>(
      ::upscaledb::DbInsertReply::internal_default_instance());
#else
  db_insert_reply_ = const_cast< ::upscaledb::DbInsertReply*>(&::upscaledb::DbInsertReply::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  db_erase_request_ = const_cast< ::upscaledb::DbEraseRequest*>(
      ::upscaledb::DbEraseRequest::internal_default_instance());
#else
  db_erase_request_ = const_cast< ::upscaledb::DbEraseRequest*>(&::upscaledb::DbEraseRequest::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  db_erase_reply_ = const_cast< ::upscaledb::DbEraseReply*>(
      ::upscaledb::DbEraseReply::internal_default_instance());
#else
  db_erase_reply_ = const_cast< ::upscaledb::DbEraseReply*>(&::upscaledb::DbEraseReply::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  db_find_request_ = const_cast< ::upscaledb::DbFindRequest*>(
      ::upscaledb::DbFindRequest::internal_default_instance());
#else
  db_find_request_ = const_cast< ::upscaledb::DbFindRequest*>(&::upscaledb::DbFindRequest::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  db_find_reply_ = const_cast< ::upscaledb::DbFindReply*>(
      ::upscaledb::DbFindReply::internal_default_instance());
#else
  db_find_reply_ = const_cast< ::upscaledb::DbFindReply*>(&::upscaledb::DbFindReply::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  cursor_create_request_ = const_cast< ::upscaledb::CursorCreateRequest*>(
      ::upscaledb::CursorCreateRequest::internal_default_instance());
#else
  cursor_create_request_ = const_cast< ::upscaledb::CursorCreateRequest*>(&::upscaledb::CursorCreateRequest::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  cursor_create_reply_ = const_cast< ::upscaledb::CursorCreateReply*>(
      ::upscaledb::CursorCreateReply::internal_default_instance());
#else
  cursor_create_reply_ = const_cast< ::upscaledb::CursorCreateReply*>(&::upscaledb::CursorCreateReply::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  cursor_clone_request_ = const_cast< ::upscaledb::CursorCloneRequest*>(
      ::upscaledb::CursorCloneRequest::internal_default_instance());
#else
  cursor_clone_request_ = const_cast< ::upscaledb::CursorCloneRequest*>(&::upscaledb::CursorCloneRequest::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  cursor_clone_reply_ = const_cast< ::upscaledb::CursorCloneReply*>(
      ::upscaledb::CursorCloneReply::internal_default_instance());
#else
  cursor_clone_reply_ = const_cast< ::upscaledb::CursorCloneReply*>(&::upscaledb::CursorCloneReply::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  cursor_close_request_ = const_cast< ::upscaledb::CursorCloseRequest*>(
      ::upscaledb::CursorCloseRequest::internal_default_instance());
#else
  cursor_close_request_ = const_cast< ::upscaledb::CursorCloseRequest*>(&::upscaledb::CursorCloseRequest::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  cursor_close_reply_ = const_cast< ::upscaledb::CursorCloseReply*>(
      ::upscaledb::CursorCloseReply::internal_default_instance());
#else
  cursor_close_reply_ = const_cast< ::upscaledb::CursorCloseReply*>(&::upscaledb::CursorCloseReply::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  cursor_insert_request_ = const_cast< ::upscaledb::CursorInsertRequest*>(
      ::upscaledb::CursorInsertRequest::internal_default_instance());
#else
  cursor_insert_request_ = const_cast< ::upscaledb::CursorInsertRequest*>(&::upscaledb::CursorInsertRequest::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  cursor_insert_reply_ = const_cast< ::upscaledb::CursorInsertReply*>(
      ::upscaledb::CursorInsertReply::internal_default_instance());
#else
  cursor_insert_reply_ = const_cast< ::upscaledb::CursorInsertReply*>(&::upscaledb::CursorInsertReply::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  cursor_erase_request_ = const_cast< ::upscaledb::CursorEraseRequest*>(
      ::upscaledb::CursorEraseRequest::internal_default_instance());
#else
  cursor_erase_request_ = const_cast< ::upscaledb::CursorEraseRequest*>(&::upscaledb::CursorEraseRequest::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  cursor_erase_reply_ = const_cast< ::upscaledb::CursorEraseReply*>(
      ::upscaledb::CursorEraseReply::internal_default_instance());
#else
  cursor_erase_reply_ = const_cast< ::upscaledb::CursorEraseReply*>(&::upscaledb::CursorEraseReply::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  cursor_get_record_count_request_ = const_cast< ::upscaledb::CursorGetRecordCountRequest*>(
      ::upscaledb::CursorGetRecordCountRequest::internal_default_instance());
#else
  cursor_get_record_count_request_ = const_cast< ::upscaledb::CursorGetRecordCountRequest*>(&::upscaledb::CursorGetRecordCountRequest::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  cursor_get_record_count_reply_ = const_cast< ::upscaledb::CursorGetRecordCountReply*>(
      ::upscaledb::CursorGetRecordCountReply::internal_default_instance());
#else
  cursor_get_record_count_reply_ = const_cast< ::upscaledb::CursorGetRecordCountReply*>(&::upscaledb::CursorGetRecordCountReply::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  cursor_get_duplicate_position_request_ = const_cast< ::upscaledb::CursorGetDuplicatePositionRequest*>(
      ::upscaledb::CursorGetDuplicatePositionRequest::internal_default_instance());
#else
  cursor_get_duplicate_position_request_ = const_cast< ::upscaledb::CursorGetDuplicatePositionRequest*>(&::upscaledb::CursorGetDuplicatePositionRequest::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  cursor_get_duplicate_position_reply_ = const_cast< ::upscaledb::CursorGetDuplicatePositionReply*>(
      ::upscaledb::CursorGetDuplicatePositionReply::internal_default_instance());
#else
  cursor_get_duplicate_position_reply_ = const_cast< ::upscaledb::CursorGetDuplicatePositionReply*>(&::upscaledb::CursorGetDuplicatePositionReply::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  cursor_get_record_size_request_ = const_cast< ::upscaledb::CursorGetRecordSizeRequest*>(
      ::upscaledb::CursorGetRecordSizeRequest::internal_default_instance());
#else
  cursor_get_record_size_request_ = const_cast< ::upscaledb::CursorGetRecordSizeRequest*>(&::upscaledb::CursorGetRecordSizeRequest::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  cursor_get_record_size_reply_ = const_cast< ::upscaledb::CursorGetRecordSizeReply*>(
      ::upscaledb::CursorGetRecordSizeReply::internal_default_instance());
#else
  cursor_get_record_size_reply_ = const_cast< ::upscaledb::CursorGetRecordSizeReply*>(&::upscaledb::CursorGetRecordSizeReply::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  cursor_overwrite_request_ = const_cast< ::upscaledb::CursorOverwriteRequest*>(
      ::upscaledb::CursorOverwriteRequest::internal_default_instance());
#else
  cursor_overwrite_request_ = const_cast< ::upscaledb::CursorOverwriteRequest*>(&::upscaledb::CursorOverwriteRequest::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  cursor_overwrite_reply_ = const_cast< ::upscaledb::CursorOverwriteReply*>(
      ::upscaledb::CursorOverwriteReply::internal_default_instance());
#else
  cursor_overwrite_reply_ = const_cast< ::upscaledb::CursorOverwriteReply*>(&::upscaledb::CursorOverwriteReply::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  cursor_move_request_ = const_cast< ::upscaledb::CursorMoveRequest*>(
      ::upscaledb::CursorMoveRequest::internal_default_instance());
#else
  cursor_move_request_ = const_cast< ::upscaledb::CursorMoveRequest*>(&::upscaledb::CursorMoveRequest::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  cursor_move_reply_ = const_cast< ::upscaledb::CursorMoveReply*>(
      ::upscaledb::CursorMoveReply::internal_default_instance());
#else
  cursor_move_reply_ = const_cast< ::upscaledb::CursorMoveReply*>(&::upscaledb::CursorMoveReply::default_instance());
#endif
}

ProtoWrapper::ProtoWrapper(const ProtoWrapper& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:upscaledb.ProtoWrapper)
}

void ProtoWrapper::SharedCtor() {
  _cached_size_ = 0;
  type_ = 10;
  connect_request_ = NULL;
  connect_reply_ = NULL;
  disconnect_request_ = NULL;
  disconnect_reply_ = NULL;
  env_rename_request_ = NULL;
  env_rename_reply_ = NULL;
  env_get_parameters_request_ = NULL;
  env_get_parameters_reply_ = NULL;
  env_get_database_names_request_ = NULL;
  env_get_database_names_reply_ = NULL;
  env_flush_request_ = NULL;
  env_flush_reply_ = NULL;
  env_create_db_request_ = NULL;
  env_create_db_reply_ = NULL;
  env_open_db_request_ = NULL;
  env_open_db_reply_ = NULL;
  env_erase_db_request_ = NULL;
  env_erase_db_reply_ = NULL;
  db_close_request_ = NULL;
  db_close_reply_ = NULL;
  db_get_parameters_request_ = NULL;
  db_get_parameters_reply_ = NULL;
  txn_begin_request_ = NULL;
  txn_begin_reply_ = NULL;
  txn_commit_request_ = NULL;
  txn_commit_reply_ = NULL;
  txn_abort_request_ = NULL;
  txn_abort_reply_ = NULL;
  db_check_integrity_request_ = NULL;
  db_check_integrity_reply_ = NULL;
  db_count_request_ = NULL;
  db_count_reply_ = NULL;
  db_insert_request_ = NULL;
  db_insert_reply_ = NULL;
  db_erase_request_ = NULL;
  db_erase_reply_ = NULL;
  db_find_request_ = NULL;
  db_find_reply_ = NULL;
  cursor_create_request_ = NULL;
  cursor_create_reply_ = NULL;
  cursor_clone_request_ = NULL;
  cursor_clone_reply_ = NULL;
  cursor_close_request_ = NULL;
  cursor_close_reply_ = NULL;
  cursor_insert_request_ = NULL;
  cursor_insert_reply_ = NULL;
  cursor_erase_request_ = NULL;
  cursor_erase_reply_ = NULL;
  cursor_get_record_count_request_ = NULL;
  cursor_get_record_count_reply_ = NULL;
  cursor_get_duplicate_position_request_ = NULL;
  cursor_get_duplicate_position_reply_ = NULL;
  cursor_get_record_size_request_ = NULL;
  cursor_get_record_size_reply_ = NULL;
  cursor_overwrite_request_ = NULL;
  cursor_overwrite_reply_ = NULL;
  cursor_move_request_ = NULL;
  cursor_move_reply_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProtoWrapper::~ProtoWrapper() {
  // @@protoc_insertion_point(destructor:upscaledb.ProtoWrapper)
  SharedDtor();
}

void ProtoWrapper::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete connect_request_;
    delete connect_reply_;
    delete disconnect_request_;
    delete disconnect_reply_;
    delete env_rename_request_;
    delete env_rename_reply_;
    delete env_get_parameters_request_;
    delete env_get_parameters_reply_;
    delete env_get_database_names_request_;
    delete env_get_database_names_reply_;
    delete env_flush_request_;
    delete env_flush_reply_;
    delete env_create_db_request_;
    delete env_create_db_reply_;
    delete env_open_db_request_;
    delete env_open_db_reply_;
    delete env_erase_db_request_;
    delete env_erase_db_reply_;
    delete db_close_request_;
    delete db_close_reply_;
    delete db_get_parameters_request_;
    delete db_get_parameters_reply_;
    delete txn_begin_request_;
    delete txn_begin_reply_;
    delete txn_commit_request_;
    delete txn_commit_reply_;
    delete txn_abort_request_;
    delete txn_abort_reply_;
    delete db_check_integrity_request_;
    delete db_check_integrity_reply_;
    delete db_count_request_;
    delete db_count_reply_;
    delete db_insert_request_;
    delete db_insert_reply_;
    delete db_erase_request_;
    delete db_erase_reply_;
    delete db_find_request_;
    delete db_find_reply_;
    delete cursor_create_request_;
    delete cursor_create_reply_;
    delete cursor_clone_request_;
    delete cursor_clone_reply_;
    delete cursor_close_request_;
    delete cursor_close_reply_;
    delete cursor_insert_request_;
    delete cursor_insert_reply_;
    delete cursor_erase_request_;
    delete cursor_erase_reply_;
    delete cursor_get_record_count_request_;
    delete cursor_get_record_count_reply_;
    delete cursor_get_duplicate_position_request_;
    delete cursor_get_duplicate_position_reply_;
    delete cursor_get_record_size_request_;
    delete cursor_get_record_size_reply_;
    delete cursor_overwrite_request_;
    delete cursor_overwrite_reply_;
    delete cursor_move_request_;
    delete cursor_move_reply_;
  }
}

void ProtoWrapper::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ProtoWrapper& ProtoWrapper::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_messages_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_messages_2eproto();
#endif
  return *default_instance_;
}

ProtoWrapper* ProtoWrapper::default_instance_ = NULL;

ProtoWrapper* ProtoWrapper::New() const {
  return new ProtoWrapper;
}

void ProtoWrapper::Clear() {
  if (_has_bits_[0 / 32] & 255) {
    type_ = 10;
    if (has_connect_request()) {
      if (connect_request_ != NULL) connect_request_->::upscaledb::ConnectRequest::Clear();
    }
    if (has_connect_reply()) {
      if (connect_reply_ != NULL) connect_reply_->::upscaledb::ConnectReply::Clear();
    }
    if (has_disconnect_request()) {
      if (disconnect_request_ != NULL) disconnect_request_->::upscaledb::DisconnectRequest::Clear();
    }
    if (has_disconnect_reply()) {
      if (disconnect_reply_ != NULL) disconnect_reply_->::upscaledb::DisconnectReply::Clear();
    }
    if (has_env_rename_request()) {
      if (env_rename_request_ != NULL) env_rename_request_->::upscaledb::EnvRenameRequest::Clear();
    }
    if (has_env_rename_reply()) {
      if (env_rename_reply_ != NULL) env_rename_reply_->::upscaledb::EnvRenameReply::Clear();
    }
    if (has_env_get_parameters_request()) {
      if (env_get_parameters_request_ != NULL) env_get_parameters_request_->::upscaledb::EnvGetParametersRequest::Clear();
    }
  }
  if (_has_bits_[8 / 32] & 65280) {
    if (has_env_get_parameters_reply()) {
      if (env_get_parameters_reply_ != NULL) env_get_parameters_reply_->::upscaledb::EnvGetParametersReply::Clear();
    }
    if (has_env_get_database_names_request()) {
      if (env_get_database_names_request_ != NULL) env_get_database_names_request_->::upscaledb::EnvGetDatabaseNamesRequest::Clear();
    }
    if (has_env_get_database_names_reply()) {
      if (env_get_database_names_reply_ != NULL) env_get_database_names_reply_->::upscaledb::EnvGetDatabaseNamesReply::Clear();
    }
    if (has_env_flush_request()) {
      if (env_flush_request_ != NULL) env_flush_request_->::upscaledb::EnvFlushRequest::Clear();
    }
    if (has_env_flush_reply()) {
      if (env_flush_reply_ != NULL) env_flush_reply_->::upscaledb::EnvFlushReply::Clear();
    }
    if (has_env_create_db_request()) {
      if (env_create_db_request_ != NULL) env_create_db_request_->::upscaledb::EnvCreateDbRequest::Clear();
    }
    if (has_env_create_db_reply()) {
      if (env_create_db_reply_ != NULL) env_create_db_reply_->::upscaledb::EnvCreateDbReply::Clear();
    }
    if (has_env_open_db_request()) {
      if (env_open_db_request_ != NULL) env_open_db_request_->::upscaledb::EnvOpenDbRequest::Clear();
    }
  }
  if (_has_bits_[16 / 32] & 16711680) {
    if (has_env_open_db_reply()) {
      if (env_open_db_reply_ != NULL) env_open_db_reply_->::upscaledb::EnvOpenDbReply::Clear();
    }
    if (has_env_erase_db_request()) {
      if (env_erase_db_request_ != NULL) env_erase_db_request_->::upscaledb::EnvEraseDbRequest::Clear();
    }
    if (has_env_erase_db_reply()) {
      if (env_erase_db_reply_ != NULL) env_erase_db_reply_->::upscaledb::EnvEraseDbReply::Clear();
    }
    if (has_db_close_request()) {
      if (db_close_request_ != NULL) db_close_request_->::upscaledb::DbCloseRequest::Clear();
    }
    if (has_db_close_reply()) {
      if (db_close_reply_ != NULL) db_close_reply_->::upscaledb::DbCloseReply::Clear();
    }
    if (has_db_get_parameters_request()) {
      if (db_get_parameters_request_ != NULL) db_get_parameters_request_->::upscaledb::DbGetParametersRequest::Clear();
    }
    if (has_db_get_parameters_reply()) {
      if (db_get_parameters_reply_ != NULL) db_get_parameters_reply_->::upscaledb::DbGetParametersReply::Clear();
    }
    if (has_txn_begin_request()) {
      if (txn_begin_request_ != NULL) txn_begin_request_->::upscaledb::TxnBeginRequest::Clear();
    }
  }
  if (_has_bits_[24 / 32] & 4278190080) {
    if (has_txn_begin_reply()) {
      if (txn_begin_reply_ != NULL) txn_begin_reply_->::upscaledb::TxnBeginReply::Clear();
    }
    if (has_txn_commit_request()) {
      if (txn_commit_request_ != NULL) txn_commit_request_->::upscaledb::TxnCommitRequest::Clear();
    }
    if (has_txn_commit_reply()) {
      if (txn_commit_reply_ != NULL) txn_commit_reply_->::upscaledb::TxnCommitReply::Clear();
    }
    if (has_txn_abort_request()) {
      if (txn_abort_request_ != NULL) txn_abort_request_->::upscaledb::TxnAbortRequest::Clear();
    }
    if (has_txn_abort_reply()) {
      if (txn_abort_reply_ != NULL) txn_abort_reply_->::upscaledb::TxnAbortReply::Clear();
    }
    if (has_db_check_integrity_request()) {
      if (db_check_integrity_request_ != NULL) db_check_integrity_request_->::upscaledb::DbCheckIntegrityRequest::Clear();
    }
    if (has_db_check_integrity_reply()) {
      if (db_check_integrity_reply_ != NULL) db_check_integrity_reply_->::upscaledb::DbCheckIntegrityReply::Clear();
    }
    if (has_db_count_request()) {
      if (db_count_request_ != NULL) db_count_request_->::upscaledb::DbCountRequest::Clear();
    }
  }
  if (_has_bits_[32 / 32] & 255) {
    if (has_db_count_reply()) {
      if (db_count_reply_ != NULL) db_count_reply_->::upscaledb::DbCountReply::Clear();
    }
    if (has_db_insert_request()) {
      if (db_insert_request_ != NULL) db_insert_request_->::upscaledb::DbInsertRequest::Clear();
    }
    if (has_db_insert_reply()) {
      if (db_insert_reply_ != NULL) db_insert_reply_->::upscaledb::DbInsertReply::Clear();
    }
    if (has_db_erase_request()) {
      if (db_erase_request_ != NULL) db_erase_request_->::upscaledb::DbEraseRequest::Clear();
    }
    if (has_db_erase_reply()) {
      if (db_erase_reply_ != NULL) db_erase_reply_->::upscaledb::DbEraseReply::Clear();
    }
    if (has_db_find_request()) {
      if (db_find_request_ != NULL) db_find_request_->::upscaledb::DbFindRequest::Clear();
    }
    if (has_db_find_reply()) {
      if (db_find_reply_ != NULL) db_find_reply_->::upscaledb::DbFindReply::Clear();
    }
    if (has_cursor_create_request()) {
      if (cursor_create_request_ != NULL) cursor_create_request_->::upscaledb::CursorCreateRequest::Clear();
    }
  }
  if (_has_bits_[40 / 32] & 65280) {
    if (has_cursor_create_reply()) {
      if (cursor_create_reply_ != NULL) cursor_create_reply_->::upscaledb::CursorCreateReply::Clear();
    }
    if (has_cursor_clone_request()) {
      if (cursor_clone_request_ != NULL) cursor_clone_request_->::upscaledb::CursorCloneRequest::Clear();
    }
    if (has_cursor_clone_reply()) {
      if (cursor_clone_reply_ != NULL) cursor_clone_reply_->::upscaledb::CursorCloneReply::Clear();
    }
    if (has_cursor_close_request()) {
      if (cursor_close_request_ != NULL) cursor_close_request_->::upscaledb::CursorCloseRequest::Clear();
    }
    if (has_cursor_close_reply()) {
      if (cursor_close_reply_ != NULL) cursor_close_reply_->::upscaledb::CursorCloseReply::Clear();
    }
    if (has_cursor_insert_request()) {
      if (cursor_insert_request_ != NULL) cursor_insert_request_->::upscaledb::CursorInsertRequest::Clear();
    }
    if (has_cursor_insert_reply()) {
      if (cursor_insert_reply_ != NULL) cursor_insert_reply_->::upscaledb::CursorInsertReply::Clear();
    }
    if (has_cursor_erase_request()) {
      if (cursor_erase_request_ != NULL) cursor_erase_request_->::upscaledb::CursorEraseRequest::Clear();
    }
  }
  if (_has_bits_[48 / 32] & 16711680) {
    if (has_cursor_erase_reply()) {
      if (cursor_erase_reply_ != NULL) cursor_erase_reply_->::upscaledb::CursorEraseReply::Clear();
    }
    if (has_cursor_get_record_count_request()) {
      if (cursor_get_record_count_request_ != NULL) cursor_get_record_count_request_->::upscaledb::CursorGetRecordCountRequest::Clear();
    }
    if (has_cursor_get_record_count_reply()) {
      if (cursor_get_record_count_reply_ != NULL) cursor_get_record_count_reply_->::upscaledb::CursorGetRecordCountReply::Clear();
    }
    if (has_cursor_get_duplicate_position_request()) {
      if (cursor_get_duplicate_position_request_ != NULL) cursor_get_duplicate_position_request_->::upscaledb::CursorGetDuplicatePositionRequest::Clear();
    }
    if (has_cursor_get_duplicate_position_reply()) {
      if (cursor_get_duplicate_position_reply_ != NULL) cursor_get_duplicate_position_reply_->::upscaledb::CursorGetDuplicatePositionReply::Clear();
    }
    if (has_cursor_get_record_size_request()) {
      if (cursor_get_record_size_request_ != NULL) cursor_get_record_size_request_->::upscaledb::CursorGetRecordSizeRequest::Clear();
    }
    if (has_cursor_get_record_size_reply()) {
      if (cursor_get_record_size_reply_ != NULL) cursor_get_record_size_reply_->::upscaledb::CursorGetRecordSizeReply::Clear();
    }
    if (has_cursor_overwrite_request()) {
      if (cursor_overwrite_request_ != NULL) cursor_overwrite_request_->::upscaledb::CursorOverwriteRequest::Clear();
    }
  }
  if (_has_bits_[56 / 32] & 117440512) {
    if (has_cursor_overwrite_reply()) {
      if (cursor_overwrite_reply_ != NULL) cursor_overwrite_reply_->::upscaledb::CursorOverwriteReply::Clear();
    }
    if (has_cursor_move_request()) {
      if (cursor_move_request_ != NULL) cursor_move_request_->::upscaledb::CursorMoveRequest::Clear();
    }
    if (has_cursor_move_reply()) {
      if (cursor_move_reply_ != NULL) cursor_move_reply_->::upscaledb::CursorMoveReply::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool ProtoWrapper::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:upscaledb.ProtoWrapper)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .upscaledb.ProtoWrapper.Type type = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::upscaledb::ProtoWrapper_Type_IsValid(value)) {
            set_type(static_cast< ::upscaledb::ProtoWrapper_Type >(value));
          } else {
            unknown_fields_stream.WriteVarint32(tag);
            unknown_fields_stream.WriteVarint32(value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_connect_request;
        break;
      }

      // optional .upscaledb.ConnectRequest connect_request = 10;
      case 10: {
        if (tag == 82) {
         parse_connect_request:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_connect_request()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(90)) goto parse_connect_reply;
        break;
      }

      // optional .upscaledb.ConnectReply connect_reply = 11;
      case 11: {
        if (tag == 90) {
         parse_connect_reply:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_connect_reply()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(98)) goto parse_disconnect_request;
        break;
      }

      // optional .upscaledb.DisconnectRequest disconnect_request = 12;
      case 12: {
        if (tag == 98) {
         parse_disconnect_request:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_disconnect_request()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(106)) goto parse_disconnect_reply;
        break;
      }

      // optional .upscaledb.DisconnectReply disconnect_reply = 13;
      case 13: {
        if (tag == 106) {
         parse_disconnect_reply:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_disconnect_reply()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(162)) goto parse_env_rename_request;
        break;
      }

      // optional .upscaledb.EnvRenameRequest env_rename_request = 20;
      case 20: {
        if (tag == 162) {
         parse_env_rename_request:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_env_rename_request()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(170)) goto parse_env_rename_reply;
        break;
      }

      // optional .upscaledb.EnvRenameReply env_rename_reply = 21;
      case 21: {
        if (tag == 170) {
         parse_env_rename_reply:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_env_rename_reply()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(242)) goto parse_env_get_parameters_request;
        break;
      }

      // optional .upscaledb.EnvGetParametersRequest env_get_parameters_request = 30;
      case 30: {
        if (tag == 242) {
         parse_env_get_parameters_request:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_env_get_parameters_request()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(250)) goto parse_env_get_parameters_reply;
        break;
      }

      // optional .upscaledb.EnvGetParametersReply env_get_parameters_reply = 31;
      case 31: {
        if (tag == 250) {
         parse_env_get_parameters_reply:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_env_get_parameters_reply()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(322)) goto parse_env_get_database_names_request;
        break;
      }

      // optional .upscaledb.EnvGetDatabaseNamesRequest env_get_database_names_request = 40;
      case 40: {
        if (tag == 322) {
         parse_env_get_database_names_request:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_env_get_database_names_request()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(330)) goto parse_env_get_database_names_reply;
        break;
      }

      // optional .upscaledb.EnvGetDatabaseNamesReply env_get_database_names_reply = 41;
      case 41: {
        if (tag == 330) {
         parse_env_get_database_names_reply:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_env_get_database_names_reply()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(402)) goto parse_env_flush_request;
        break;
      }

      // optional .upscaledb.EnvFlushRequest env_flush_request = 50;
      case 50: {
        if (tag == 402) {
         parse_env_flush_request:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_env_flush_request()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(410)) goto parse_env_flush_reply;
        break;
      }

      // optional .upscaledb.EnvFlushReply env_flush_reply = 51;
      case 51: {
        if (tag == 410) {
         parse_env_flush_reply:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_env_flush_reply()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(482)) goto parse_env_create_db_request;
        break;
      }

      // optional .upscaledb.EnvCreateDbRequest env_create_db_request = 60;
      case 60: {
        if (tag == 482) {
         parse_env_create_db_request:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_env_create_db_request()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(490)) goto parse_env_create_db_reply;
        break;
      }

      // optional .upscaledb.EnvCreateDbReply env_create_db_reply = 61;
      case 61: {
        if (tag == 490) {
         parse_env_create_db_reply:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_env_create_db_reply()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(562)) goto parse_env_open_db_request;
        break;
      }

      // optional .upscaledb.EnvOpenDbRequest env_open_db_request = 70;
      case 70: {
        if (tag == 562) {
         parse_env_open_db_request:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_env_open_db_request()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(570)) goto parse_env_open_db_reply;
        break;
      }

      // optional .upscaledb.EnvOpenDbReply env_open_db_reply = 71;
      case 71: {
        if (tag == 570) {
         parse_env_open_db_reply:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_env_open_db_reply()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(642)) goto parse_env_erase_db_request;
        break;
      }

      // optional .upscaledb.EnvEraseDbRequest env_erase_db_request = 80;
      case 80: {
        if (tag == 642) {
         parse_env_erase_db_request:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_env_erase_db_request()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(650)) goto parse_env_erase_db_reply;
        break;
      }

      // optional .upscaledb.EnvEraseDbReply env_erase_db_reply = 81;
      case 81: {
        if (tag == 650) {
         parse_env_erase_db_reply:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_env_erase_db_reply()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(722)) goto parse_db_close_request;
        break;
      }

      // optional .upscaledb.DbCloseRequest db_close_request = 90;
      case 90: {
        if (tag == 722) {
         parse_db_close_request:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_db_close_request()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(730)) goto parse_db_close_reply;
        break;
      }

      // optional .upscaledb.DbCloseReply db_close_reply = 91;
      case 91: {
        if (tag == 730) {
         parse_db_close_reply:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_db_close_reply()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(802)) goto parse_db_get_parameters_request;
        break;
      }

      // optional .upscaledb.DbGetParametersRequest db_get_parameters_request = 100;
      case 100: {
        if (tag == 802) {
         parse_db_get_parameters_request:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_db_get_parameters_request()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(810)) goto parse_db_get_parameters_reply;
        break;
      }

      // optional .upscaledb.DbGetParametersReply db_get_parameters_reply = 101;
      case 101: {
        if (tag == 810) {
         parse_db_get_parameters_reply:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_db_get_parameters_reply()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(962)) goto parse_txn_begin_request;
        break;
      }

      // optional .upscaledb.TxnBeginRequest txn_begin_request = 120;
      case 120: {
        if (tag == 962) {
         parse_txn_begin_request:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_txn_begin_request()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(970)) goto parse_txn_begin_reply;
        break;
      }

      // optional .upscaledb.TxnBeginReply txn_begin_reply = 121;
      case 121: {
        if (tag == 970) {
         parse_txn_begin_reply:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_txn_begin_reply()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(1042)) goto parse_txn_commit_request;
        break;
      }

      // optional .upscaledb.TxnCommitRequest txn_commit_request = 130;
      case 130: {
        if (tag == 1042) {
         parse_txn_commit_request:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_txn_commit_request()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(1050)) goto parse_txn_commit_reply;
        break;
      }

      // optional .upscaledb.TxnCommitReply txn_commit_reply = 131;
      case 131: {
        if (tag == 1050) {
         parse_txn_commit_reply:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_txn_commit_reply()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(1122)) goto parse_txn_abort_request;
        break;
      }

      // optional .upscaledb.TxnAbortRequest txn_abort_request = 140;
      case 140: {
        if (tag == 1122) {
         parse_txn_abort_request:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_txn_abort_request()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(1130)) goto parse_txn_abort_reply;
        break;
      }

      // optional .upscaledb.TxnAbortReply txn_abort_reply = 141;
      case 141: {
        if (tag == 1130) {
         parse_txn_abort_reply:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_txn_abort_reply()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(1202)) goto parse_db_check_integrity_request;
        break;
      }

      // optional .upscaledb.DbCheckIntegrityRequest db_check_integrity_request = 150;
      case 150: {
        if (tag == 1202) {
         parse_db_check_integrity_request:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_db_check_integrity_request()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(1210)) goto parse_db_check_integrity_reply;
        break;
      }

      // optional .upscaledb.DbCheckIntegrityReply db_check_integrity_reply = 151;
      case 151: {
        if (tag == 1210) {
         parse_db_check_integrity_reply:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_db_check_integrity_reply()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(1282)) goto parse_db_count_request;
        break;
      }

      // optional .upscaledb.DbCountRequest db_count_request = 160;
      case 160: {
        if (tag == 1282) {
         parse_db_count_request:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_db_count_request()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(1290)) goto parse_db_count_reply;
        break;
      }

      // optional .upscaledb.DbCountReply db_count_reply = 161;
      case 161: {
        if (tag == 1290) {
         parse_db_count_reply:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_db_count_reply()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(1362)) goto parse_db_insert_request;
        break;
      }

      // optional .upscaledb.DbInsertRequest db_insert_request = 170;
      case 170: {
        if (tag == 1362) {
         parse_db_insert_request:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_db_insert_request()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(1370)) goto parse_db_insert_reply;
        break;
      }

      // optional .upscaledb.DbInsertReply db_insert_reply = 171;
      case 171: {
        if (tag == 1370) {
         parse_db_insert_reply:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_db_insert_reply()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(1442)) goto parse_db_erase_request;
        break;
      }

      // optional .upscaledb.DbEraseRequest db_erase_request = 180;
      case 180: {
        if (tag == 1442) {
         parse_db_erase_request:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_db_erase_request()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(1450)) goto parse_db_erase_reply;
        break;
      }

      // optional .upscaledb.DbEraseReply db_erase_reply = 181;
      case 181: {
        if (tag == 1450) {
         parse_db_erase_reply:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_db_erase_reply()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(1522)) goto parse_db_find_request;
        break;
      }

      // optional .upscaledb.DbFindRequest db_find_request = 190;
      case 190: {
        if (tag == 1522) {
         parse_db_find_request:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_db_find_request()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(1530)) goto parse_db_find_reply;
        break;
      }

      // optional .upscaledb.DbFindReply db_find_reply = 191;
      case 191: {
        if (tag == 1530) {
         parse_db_find_reply:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_db_find_reply()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(1602)) goto parse_cursor_create_request;
        break;
      }

      // optional .upscaledb.CursorCreateRequest cursor_create_request = 200;
      case 200: {
        if (tag == 1602) {
         parse_cursor_create_request:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_cursor_create_request()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(1610)) goto parse_cursor_create_reply;
        break;
      }

      // optional .upscaledb.CursorCreateReply cursor_create_reply = 201;
      case 201: {
        if (tag == 1610) {
         parse_cursor_create_reply:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_cursor_create_reply()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(1682)) goto parse_cursor_clone_request;
        break;
      }

      // optional .upscaledb.CursorCloneRequest cursor_clone_request = 210;
      case 210: {
        if (tag == 1682) {
         parse_cursor_clone_request:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_cursor_clone_request()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(1690)) goto parse_cursor_clone_reply;
        break;
      }

      // optional .upscaledb.CursorCloneReply cursor_clone_reply = 211;
      case 211: {
        if (tag == 1690) {
         parse_cursor_clone_reply:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_cursor_clone_reply()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(1762)) goto parse_cursor_close_request;
        break;
      }

      // optional .upscaledb.CursorCloseRequest cursor_close_request = 220;
      case 220: {
        if (tag == 1762) {
         parse_cursor_close_request:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_cursor_close_request()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(1770)) goto parse_cursor_close_reply;
        break;
      }

      // optional .upscaledb.CursorCloseReply cursor_close_reply = 221;
      case 221: {
        if (tag == 1770) {
         parse_cursor_close_reply:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_cursor_close_reply()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(1842)) goto parse_cursor_insert_request;
        break;
      }

      // optional .upscaledb.CursorInsertRequest cursor_insert_request = 230;
      case 230: {
        if (tag == 1842) {
         parse_cursor_insert_request:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_cursor_insert_request()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(1850)) goto parse_cursor_insert_reply;
        break;
      }

      // optional .upscaledb.CursorInsertReply cursor_insert_reply = 231;
      case 231: {
        if (tag == 1850) {
         parse_cursor_insert_reply:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_cursor_insert_reply()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(1922)) goto parse_cursor_erase_request;
        break;
      }

      // optional .upscaledb.CursorEraseRequest cursor_erase_request = 240;
      case 240: {
        if (tag == 1922) {
         parse_cursor_erase_request:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_cursor_erase_request()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(1930)) goto parse_cursor_erase_reply;
        break;
      }

      // optional .upscaledb.CursorEraseReply cursor_erase_reply = 241;
      case 241: {
        if (tag == 1930) {
         parse_cursor_erase_reply:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_cursor_erase_reply()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(2082)) goto parse_cursor_get_record_count_request;
        break;
      }

      // optional .upscaledb.CursorGetRecordCountRequest cursor_get_record_count_request = 260;
      case 260: {
        if (tag == 2082) {
         parse_cursor_get_record_count_request:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_cursor_get_record_count_request()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(2090)) goto parse_cursor_get_record_count_reply;
        break;
      }

      // optional .upscaledb.CursorGetRecordCountReply cursor_get_record_count_reply = 261;
      case 261: {
        if (tag == 2090) {
         parse_cursor_get_record_count_reply:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_cursor_get_record_count_reply()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(2098)) goto parse_cursor_get_duplicate_position_request;
        break;
      }

      // optional .upscaledb.CursorGetDuplicatePositionRequest cursor_get_duplicate_position_request = 262;
      case 262: {
        if (tag == 2098) {
         parse_cursor_get_duplicate_position_request:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_cursor_get_duplicate_position_request()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(2106)) goto parse_cursor_get_duplicate_position_reply;
        break;
      }

      // optional .upscaledb.CursorGetDuplicatePositionReply cursor_get_duplicate_position_reply = 263;
      case 263: {
        if (tag == 2106) {
         parse_cursor_get_duplicate_position_reply:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_cursor_get_duplicate_position_reply()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(2114)) goto parse_cursor_get_record_size_request;
        break;
      }

      // optional .upscaledb.CursorGetRecordSizeRequest cursor_get_record_size_request = 264;
      case 264: {
        if (tag == 2114) {
         parse_cursor_get_record_size_request:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_cursor_get_record_size_request()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(2122)) goto parse_cursor_get_record_size_reply;
        break;
      }

      // optional .upscaledb.CursorGetRecordSizeReply cursor_get_record_size_reply = 265;
      case 265: {
        if (tag == 2122) {
         parse_cursor_get_record_size_reply:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_cursor_get_record_size_reply()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(2162)) goto parse_cursor_overwrite_request;
        break;
      }

      // optional .upscaledb.CursorOverwriteRequest cursor_overwrite_request = 270;
      case 270: {
        if (tag == 2162) {
         parse_cursor_overwrite_request:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_cursor_overwrite_request()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(2170)) goto parse_cursor_overwrite_reply;
        break;
      }

      // optional .upscaledb.CursorOverwriteReply cursor_overwrite_reply = 271;
      case 271: {
        if (tag == 2170) {
         parse_cursor_overwrite_reply:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_cursor_overwrite_reply()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(2242)) goto parse_cursor_move_request;
        break;
      }

      // optional .upscaledb.CursorMoveRequest cursor_move_request = 280;
      case 280: {
        if (tag == 2242) {
         parse_cursor_move_request:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_cursor_move_request()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(2250)) goto parse_cursor_move_reply;
        break;
      }

      // optional .upscaledb.CursorMoveReply cursor_move_reply = 281;
      case 281: {
        if (tag == 2250) {
         parse_cursor_move_reply:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_cursor_move_reply()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:upscaledb.ProtoWrapper)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:upscaledb.ProtoWrapper)
  return false;
#undef DO_
}

void ProtoWrapper::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:upscaledb.ProtoWrapper)
  // required .upscaledb.ProtoWrapper.Type type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // optional .upscaledb.ConnectRequest connect_request = 10;
  if (has_connect_request()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      10, this->connect_request(), output);
  }

  // optional .upscaledb.ConnectReply connect_reply = 11;
  if (has_connect_reply()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      11, this->connect_reply(), output);
  }

  // optional .upscaledb.DisconnectRequest disconnect_request = 12;
  if (has_disconnect_request()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      12, this->disconnect_request(), output);
  }

  // optional .upscaledb.DisconnectReply disconnect_reply = 13;
  if (has_disconnect_reply()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      13, this->disconnect_reply(), output);
  }

  // optional .upscaledb.EnvRenameRequest env_rename_request = 20;
  if (has_env_rename_request()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      20, this->env_rename_request(), output);
  }

  // optional .upscaledb.EnvRenameReply env_rename_reply = 21;
  if (has_env_rename_reply()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      21, this->env_rename_reply(), output);
  }

  // optional .upscaledb.EnvGetParametersRequest env_get_parameters_request = 30;
  if (has_env_get_parameters_request()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      30, this->env_get_parameters_request(), output);
  }

  // optional .upscaledb.EnvGetParametersReply env_get_parameters_reply = 31;
  if (has_env_get_parameters_reply()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      31, this->env_get_parameters_reply(), output);
  }

  // optional .upscaledb.EnvGetDatabaseNamesRequest env_get_database_names_request = 40;
  if (has_env_get_database_names_request()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      40, this->env_get_database_names_request(), output);
  }

  // optional .upscaledb.EnvGetDatabaseNamesReply env_get_database_names_reply = 41;
  if (has_env_get_database_names_reply()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      41, this->env_get_database_names_reply(), output);
  }

  // optional .upscaledb.EnvFlushRequest env_flush_request = 50;
  if (has_env_flush_request()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      50, this->env_flush_request(), output);
  }

  // optional .upscaledb.EnvFlushReply env_flush_reply = 51;
  if (has_env_flush_reply()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      51, this->env_flush_reply(), output);
  }

  // optional .upscaledb.EnvCreateDbRequest env_create_db_request = 60;
  if (has_env_create_db_request()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      60, this->env_create_db_request(), output);
  }

  // optional .upscaledb.EnvCreateDbReply env_create_db_reply = 61;
  if (has_env_create_db_reply()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      61, this->env_create_db_reply(), output);
  }

  // optional .upscaledb.EnvOpenDbRequest env_open_db_request = 70;
  if (has_env_open_db_request()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      70, this->env_open_db_request(), output);
  }

  // optional .upscaledb.EnvOpenDbReply env_open_db_reply = 71;
  if (has_env_open_db_reply()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      71, this->env_open_db_reply(), output);
  }

  // optional .upscaledb.EnvEraseDbRequest env_erase_db_request = 80;
  if (has_env_erase_db_request()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      80, this->env_erase_db_request(), output);
  }

  // optional .upscaledb.EnvEraseDbReply env_erase_db_reply = 81;
  if (has_env_erase_db_reply()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      81, this->env_erase_db_reply(), output);
  }

  // optional .upscaledb.DbCloseRequest db_close_request = 90;
  if (has_db_close_request()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      90, this->db_close_request(), output);
  }

  // optional .upscaledb.DbCloseReply db_close_reply = 91;
  if (has_db_close_reply()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      91, this->db_close_reply(), output);
  }

  // optional .upscaledb.DbGetParametersRequest db_get_parameters_request = 100;
  if (has_db_get_parameters_request()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      100, this->db_get_parameters_request(), output);
  }

  // optional .upscaledb.DbGetParametersReply db_get_parameters_reply = 101;
  if (has_db_get_parameters_reply()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      101, this->db_get_parameters_reply(), output);
  }

  // optional .upscaledb.TxnBeginRequest txn_begin_request = 120;
  if (has_txn_begin_request()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      120, this->txn_begin_request(), output);
  }

  // optional .upscaledb.TxnBeginReply txn_begin_reply = 121;
  if (has_txn_begin_reply()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      121, this->txn_begin_reply(), output);
  }

  // optional .upscaledb.TxnCommitRequest txn_commit_request = 130;
  if (has_txn_commit_request()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      130, this->txn_commit_request(), output);
  }

  // optional .upscaledb.TxnCommitReply txn_commit_reply = 131;
  if (has_txn_commit_reply()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      131, this->txn_commit_reply(), output);
  }

  // optional .upscaledb.TxnAbortRequest txn_abort_request = 140;
  if (has_txn_abort_request()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      140, this->txn_abort_request(), output);
  }

  // optional .upscaledb.TxnAbortReply txn_abort_reply = 141;
  if (has_txn_abort_reply()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      141, this->txn_abort_reply(), output);
  }

  // optional .upscaledb.DbCheckIntegrityRequest db_check_integrity_request = 150;
  if (has_db_check_integrity_request()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      150, this->db_check_integrity_request(), output);
  }

  // optional .upscaledb.DbCheckIntegrityReply db_check_integrity_reply = 151;
  if (has_db_check_integrity_reply()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      151, this->db_check_integrity_reply(), output);
  }

  // optional .upscaledb.DbCountRequest db_count_request = 160;
  if (has_db_count_request()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      160, this->db_count_request(), output);
  }

  // optional .upscaledb.DbCountReply db_count_reply = 161;
  if (has_db_count_reply()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      161, this->db_count_reply(), output);
  }

  // optional .upscaledb.DbInsertRequest db_insert_request = 170;
  if (has_db_insert_request()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      170, this->db_insert_request(), output);
  }

  // optional .upscaledb.DbInsertReply db_insert_reply = 171;
  if (has_db_insert_reply()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      171, this->db_insert_reply(), output);
  }

  // optional .upscaledb.DbEraseRequest db_erase_request = 180;
  if (has_db_erase_request()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      180, this->db_erase_request(), output);
  }

  // optional .upscaledb.DbEraseReply db_erase_reply = 181;
  if (has_db_erase_reply()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      181, this->db_erase_reply(), output);
  }

  // optional .upscaledb.DbFindRequest db_find_request = 190;
  if (has_db_find_request()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      190, this->db_find_request(), output);
  }

  // optional .upscaledb.DbFindReply db_find_reply = 191;
  if (has_db_find_reply()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      191, this->db_find_reply(), output);
  }

  // optional .upscaledb.CursorCreateRequest cursor_create_request = 200;
  if (has_cursor_create_request()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      200, this->cursor_create_request(), output);
  }

  // optional .upscaledb.CursorCreateReply cursor_create_reply = 201;
  if (has_cursor_create_reply()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      201, this->cursor_create_reply(), output);
  }

  // optional .upscaledb.CursorCloneRequest cursor_clone_request = 210;
  if (has_cursor_clone_request()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      210, this->cursor_clone_request(), output);
  }

  // optional .upscaledb.CursorCloneReply cursor_clone_reply = 211;
  if (has_cursor_clone_reply()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      211, this->cursor_clone_reply(), output);
  }

  // optional .upscaledb.CursorCloseRequest cursor_close_request = 220;
  if (has_cursor_close_request()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      220, this->cursor_close_request(), output);
  }

  // optional .upscaledb.CursorCloseReply cursor_close_reply = 221;
  if (has_cursor_close_reply()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      221, this->cursor_close_reply(), output);
  }

  // optional .upscaledb.CursorInsertRequest cursor_insert_request = 230;
  if (has_cursor_insert_request()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      230, this->cursor_insert_request(), output);
  }

  // optional .upscaledb.CursorInsertReply cursor_insert_reply = 231;
  if (has_cursor_insert_reply()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      231, this->cursor_insert_reply(), output);
  }

  // optional .upscaledb.CursorEraseRequest cursor_erase_request = 240;
  if (has_cursor_erase_request()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      240, this->cursor_erase_request(), output);
  }

  // optional .upscaledb.CursorEraseReply cursor_erase_reply = 241;
  if (has_cursor_erase_reply()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      241, this->cursor_erase_reply(), output);
  }

  // optional .upscaledb.CursorGetRecordCountRequest cursor_get_record_count_request = 260;
  if (has_cursor_get_record_count_request()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      260, this->cursor_get_record_count_request(), output);
  }

  // optional .upscaledb.CursorGetRecordCountReply cursor_get_record_count_reply = 261;
  if (has_cursor_get_record_count_reply()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      261, this->cursor_get_record_count_reply(), output);
  }

  // optional .upscaledb.CursorGetDuplicatePositionRequest cursor_get_duplicate_position_request = 262;
  if (has_cursor_get_duplicate_position_request()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      262, this->cursor_get_duplicate_position_request(), output);
  }

  // optional .upscaledb.CursorGetDuplicatePositionReply cursor_get_duplicate_position_reply = 263;
  if (has_cursor_get_duplicate_position_reply()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      263, this->cursor_get_duplicate_position_reply(), output);
  }

  // optional .upscaledb.CursorGetRecordSizeRequest cursor_get_record_size_request = 264;
  if (has_cursor_get_record_size_request()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      264, this->cursor_get_record_size_request(), output);
  }

  // optional .upscaledb.CursorGetRecordSizeReply cursor_get_record_size_reply = 265;
  if (has_cursor_get_record_size_reply()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      265, this->cursor_get_record_size_reply(), output);
  }

  // optional .upscaledb.CursorOverwriteRequest cursor_overwrite_request = 270;
  if (has_cursor_overwrite_request()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      270, this->cursor_overwrite_request(), output);
  }

  // optional .upscaledb.CursorOverwriteReply cursor_overwrite_reply = 271;
  if (has_cursor_overwrite_reply()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      271, this->cursor_overwrite_reply(), output);
  }

  // optional .upscaledb.CursorMoveRequest cursor_move_request = 280;
  if (has_cursor_move_request()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      280, this->cursor_move_request(), output);
  }

  // optional .upscaledb.CursorMoveReply cursor_move_reply = 281;
  if (has_cursor_move_reply()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      281, this->cursor_move_reply(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:upscaledb.ProtoWrapper)
}

int ProtoWrapper::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .upscaledb.ProtoWrapper.Type type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional .upscaledb.ConnectRequest connect_request = 10;
    if (has_connect_request()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->connect_request());
    }

    // optional .upscaledb.ConnectReply connect_reply = 11;
    if (has_connect_reply()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->connect_reply());
    }

    // optional .upscaledb.DisconnectRequest disconnect_request = 12;
    if (has_disconnect_request()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->disconnect_request());
    }

    // optional .upscaledb.DisconnectReply disconnect_reply = 13;
    if (has_disconnect_reply()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->disconnect_reply());
    }

    // optional .upscaledb.EnvRenameRequest env_rename_request = 20;
    if (has_env_rename_request()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->env_rename_request());
    }

    // optional .upscaledb.EnvRenameReply env_rename_reply = 21;
    if (has_env_rename_reply()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->env_rename_reply());
    }

    // optional .upscaledb.EnvGetParametersRequest env_get_parameters_request = 30;
    if (has_env_get_parameters_request()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->env_get_parameters_request());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional .upscaledb.EnvGetParametersReply env_get_parameters_reply = 31;
    if (has_env_get_parameters_reply()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->env_get_parameters_reply());
    }

    // optional .upscaledb.EnvGetDatabaseNamesRequest env_get_database_names_request = 40;
    if (has_env_get_database_names_request()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->env_get_database_names_request());
    }

    // optional .upscaledb.EnvGetDatabaseNamesReply env_get_database_names_reply = 41;
    if (has_env_get_database_names_reply()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->env_get_database_names_reply());
    }

    // optional .upscaledb.EnvFlushRequest env_flush_request = 50;
    if (has_env_flush_request()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->env_flush_request());
    }

    // optional .upscaledb.EnvFlushReply env_flush_reply = 51;
    if (has_env_flush_reply()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->env_flush_reply());
    }

    // optional .upscaledb.EnvCreateDbRequest env_create_db_request = 60;
    if (has_env_create_db_request()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->env_create_db_request());
    }

    // optional .upscaledb.EnvCreateDbReply env_create_db_reply = 61;
    if (has_env_create_db_reply()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->env_create_db_reply());
    }

    // optional .upscaledb.EnvOpenDbRequest env_open_db_request = 70;
    if (has_env_open_db_request()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->env_open_db_request());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional .upscaledb.EnvOpenDbReply env_open_db_reply = 71;
    if (has_env_open_db_reply()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->env_open_db_reply());
    }

    // optional .upscaledb.EnvEraseDbRequest env_erase_db_request = 80;
    if (has_env_erase_db_request()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->env_erase_db_request());
    }

    // optional .upscaledb.EnvEraseDbReply env_erase_db_reply = 81;
    if (has_env_erase_db_reply()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->env_erase_db_reply());
    }

    // optional .upscaledb.DbCloseRequest db_close_request = 90;
    if (has_db_close_request()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->db_close_request());
    }

    // optional .upscaledb.DbCloseReply db_close_reply = 91;
    if (has_db_close_reply()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->db_close_reply());
    }

    // optional .upscaledb.DbGetParametersRequest db_get_parameters_request = 100;
    if (has_db_get_parameters_request()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->db_get_parameters_request());
    }

    // optional .upscaledb.DbGetParametersReply db_get_parameters_reply = 101;
    if (has_db_get_parameters_reply()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->db_get_parameters_reply());
    }

    // optional .upscaledb.TxnBeginRequest txn_begin_request = 120;
    if (has_txn_begin_request()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->txn_begin_request());
    }

  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    // optional .upscaledb.TxnBeginReply txn_begin_reply = 121;
    if (has_txn_begin_reply()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->txn_begin_reply());
    }

    // optional .upscaledb.TxnCommitRequest txn_commit_request = 130;
    if (has_txn_commit_request()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->txn_commit_request());
    }

    // optional .upscaledb.TxnCommitReply txn_commit_reply = 131;
    if (has_txn_commit_reply()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->txn_commit_reply());
    }

    // optional .upscaledb.TxnAbortRequest txn_abort_request = 140;
    if (has_txn_abort_request()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->txn_abort_request());
    }

    // optional .upscaledb.TxnAbortReply txn_abort_reply = 141;
    if (has_txn_abort_reply()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->txn_abort_reply());
    }

    // optional .upscaledb.DbCheckIntegrityRequest db_check_integrity_request = 150;
    if (has_db_check_integrity_request()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->db_check_integrity_request());
    }

    // optional .upscaledb.DbCheckIntegrityReply db_check_integrity_reply = 151;
    if (has_db_check_integrity_reply()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->db_check_integrity_reply());
    }

    // optional .upscaledb.DbCountRequest db_count_request = 160;
    if (has_db_count_request()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->db_count_request());
    }

  }
  if (_has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    // optional .upscaledb.DbCountReply db_count_reply = 161;
    if (has_db_count_reply()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->db_count_reply());
    }

    // optional .upscaledb.DbInsertRequest db_insert_request = 170;
    if (has_db_insert_request()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->db_insert_request());
    }

    // optional .upscaledb.DbInsertReply db_insert_reply = 171;
    if (has_db_insert_reply()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->db_insert_reply());
    }

    // optional .upscaledb.DbEraseRequest db_erase_request = 180;
    if (has_db_erase_request()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->db_erase_request());
    }

    // optional .upscaledb.DbEraseReply db_erase_reply = 181;
    if (has_db_erase_reply()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->db_erase_reply());
    }

    // optional .upscaledb.DbFindRequest db_find_request = 190;
    if (has_db_find_request()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->db_find_request());
    }

    // optional .upscaledb.DbFindReply db_find_reply = 191;
    if (has_db_find_reply()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->db_find_reply());
    }

    // optional .upscaledb.CursorCreateRequest cursor_create_request = 200;
    if (has_cursor_create_request()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->cursor_create_request());
    }

  }
  if (_has_bits_[40 / 32] & (0xffu << (40 % 32))) {
    // optional .upscaledb.CursorCreateReply cursor_create_reply = 201;
    if (has_cursor_create_reply()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->cursor_create_reply());
    }

    // optional .upscaledb.CursorCloneRequest cursor_clone_request = 210;
    if (has_cursor_clone_request()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->cursor_clone_request());
    }

    // optional .upscaledb.CursorCloneReply cursor_clone_reply = 211;
    if (has_cursor_clone_reply()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->cursor_clone_reply());
    }

    // optional .upscaledb.CursorCloseRequest cursor_close_request = 220;
    if (has_cursor_close_request()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->cursor_close_request());
    }

    // optional .upscaledb.CursorCloseReply cursor_close_reply = 221;
    if (has_cursor_close_reply()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->cursor_close_reply());
    }

    // optional .upscaledb.CursorInsertRequest cursor_insert_request = 230;
    if (has_cursor_insert_request()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->cursor_insert_request());
    }

    // optional .upscaledb.CursorInsertReply cursor_insert_reply = 231;
    if (has_cursor_insert_reply()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->cursor_insert_reply());
    }

    // optional .upscaledb.CursorEraseRequest cursor_erase_request = 240;
    if (has_cursor_erase_request()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->cursor_erase_request());
    }

  }
  if (_has_bits_[48 / 32] & (0xffu << (48 % 32))) {
    // optional .upscaledb.CursorEraseReply cursor_erase_reply = 241;
    if (has_cursor_erase_reply()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->cursor_erase_reply());
    }

    // optional .upscaledb.CursorGetRecordCountRequest cursor_get_record_count_request = 260;
    if (has_cursor_get_record_count_request()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->cursor_get_record_count_request());
    }

    // optional .upscaledb.CursorGetRecordCountReply cursor_get_record_count_reply = 261;
    if (has_cursor_get_record_count_reply()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->cursor_get_record_count_reply());
    }

    // optional .upscaledb.CursorGetDuplicatePositionRequest cursor_get_duplicate_position_request = 262;
    if (has_cursor_get_duplicate_position_request()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->cursor_get_duplicate_position_request());
    }

    // optional .upscaledb.CursorGetDuplicatePositionReply cursor_get_duplicate_position_reply = 263;
    if (has_cursor_get_duplicate_position_reply()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->cursor_get_duplicate_position_reply());
    }

    // optional .upscaledb.CursorGetRecordSizeRequest cursor_get_record_size_request = 264;
    if (has_cursor_get_record_size_request()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->cursor_get_record_size_request());
    }

    // optional .upscaledb.CursorGetRecordSizeReply cursor_get_record_size_reply = 265;
    if (has_cursor_get_record_size_reply()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->cursor_get_record_size_reply());
    }

    // optional .upscaledb.CursorOverwriteRequest cursor_overwrite_request = 270;
    if (has_cursor_overwrite_request()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->cursor_overwrite_request());
    }

  }
  if (_has_bits_[56 / 32] & (0xffu << (56 % 32))) {
    // optional .upscaledb.CursorOverwriteReply cursor_overwrite_reply = 271;
    if (has_cursor_overwrite_reply()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->cursor_overwrite_reply());
    }

    // optional .upscaledb.CursorMoveRequest cursor_move_request = 280;
    if (has_cursor_move_request()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->cursor_move_request());
    }

    // optional .upscaledb.CursorMoveReply cursor_move_reply = 281;
    if (has_cursor_move_reply()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->cursor_move_reply());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProtoWrapper::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const ProtoWrapper*>(&from));
}

void ProtoWrapper::MergeFrom(const ProtoWrapper& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_connect_request()) {
      mutable_connect_request()->::upscaledb::ConnectRequest::MergeFrom(from.connect_request());
    }
    if (from.has_connect_reply()) {
      mutable_connect_reply()->::upscaledb::ConnectReply::MergeFrom(from.connect_reply());
    }
    if (from.has_disconnect_request()) {
      mutable_disconnect_request()->::upscaledb::DisconnectRequest::MergeFrom(from.disconnect_request());
    }
    if (from.has_disconnect_reply()) {
      mutable_disconnect_reply()->::upscaledb::DisconnectReply::MergeFrom(from.disconnect_reply());
    }
    if (from.has_env_rename_request()) {
      mutable_env_rename_request()->::upscaledb::EnvRenameRequest::MergeFrom(from.env_rename_request());
    }
    if (from.has_env_rename_reply()) {
      mutable_env_rename_reply()->::upscaledb::EnvRenameReply::MergeFrom(from.env_rename_reply());
    }
    if (from.has_env_get_parameters_request()) {
      mutable_env_get_parameters_request()->::upscaledb::EnvGetParametersRequest::MergeFrom(from.env_get_parameters_request());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_env_get_parameters_reply()) {
      mutable_env_get_parameters_reply()->::upscaledb::EnvGetParametersReply::MergeFrom(from.env_get_parameters_reply());
    }
    if (from.has_env_get_database_names_request()) {
      mutable_env_get_database_names_request()->::upscaledb::EnvGetDatabaseNamesRequest::MergeFrom(from.env_get_database_names_request());
    }
    if (from.has_env_get_database_names_reply()) {
      mutable_env_get_database_names_reply()->::upscaledb::EnvGetDatabaseNamesReply::MergeFrom(from.env_get_database_names_reply());
    }
    if (from.has_env_flush_request()) {
      mutable_env_flush_request()->::upscaledb::EnvFlushRequest::MergeFrom(from.env_flush_request());
    }
    if (from.has_env_flush_reply()) {
      mutable_env_flush_reply()->::upscaledb::EnvFlushReply::MergeFrom(from.env_flush_reply());
    }
    if (from.has_env_create_db_request()) {
      mutable_env_create_db_request()->::upscaledb::EnvCreateDbRequest::MergeFrom(from.env_create_db_request());
    }
    if (from.has_env_create_db_reply()) {
      mutable_env_create_db_reply()->::upscaledb::EnvCreateDbReply::MergeFrom(from.env_create_db_reply());
    }
    if (from.has_env_open_db_request()) {
      mutable_env_open_db_request()->::upscaledb::EnvOpenDbRequest::MergeFrom(from.env_open_db_request());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_env_open_db_reply()) {
      mutable_env_open_db_reply()->::upscaledb::EnvOpenDbReply::MergeFrom(from.env_open_db_reply());
    }
    if (from.has_env_erase_db_request()) {
      mutable_env_erase_db_request()->::upscaledb::EnvEraseDbRequest::MergeFrom(from.env_erase_db_request());
    }
    if (from.has_env_erase_db_reply()) {
      mutable_env_erase_db_reply()->::upscaledb::EnvEraseDbReply::MergeFrom(from.env_erase_db_reply());
    }
    if (from.has_db_close_request()) {
      mutable_db_close_request()->::upscaledb::DbCloseRequest::MergeFrom(from.db_close_request());
    }
    if (from.has_db_close_reply()) {
      mutable_db_close_reply()->::upscaledb::DbCloseReply::MergeFrom(from.db_close_reply());
    }
    if (from.has_db_get_parameters_request()) {
      mutable_db_get_parameters_request()->::upscaledb::DbGetParametersRequest::MergeFrom(from.db_get_parameters_request());
    }
    if (from.has_db_get_parameters_reply()) {
      mutable_db_get_parameters_reply()->::upscaledb::DbGetParametersReply::MergeFrom(from.db_get_parameters_reply());
    }
    if (from.has_txn_begin_request()) {
      mutable_txn_begin_request()->::upscaledb::TxnBeginRequest::MergeFrom(from.txn_begin_request());
    }
  }
  if (from._has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (from.has_txn_begin_reply()) {
      mutable_txn_begin_reply()->::upscaledb::TxnBeginReply::MergeFrom(from.txn_begin_reply());
    }
    if (from.has_txn_commit_request()) {
      mutable_txn_commit_request()->::upscaledb::TxnCommitRequest::MergeFrom(from.txn_commit_request());
    }
    if (from.has_txn_commit_reply()) {
      mutable_txn_commit_reply()->::upscaledb::TxnCommitReply::MergeFrom(from.txn_commit_reply());
    }
    if (from.has_txn_abort_request()) {
      mutable_txn_abort_request()->::upscaledb::TxnAbortRequest::MergeFrom(from.txn_abort_request());
    }
    if (from.has_txn_abort_reply()) {
      mutable_txn_abort_reply()->::upscaledb::TxnAbortReply::MergeFrom(from.txn_abort_reply());
    }
    if (from.has_db_check_integrity_request()) {
      mutable_db_check_integrity_request()->::upscaledb::DbCheckIntegrityRequest::MergeFrom(from.db_check_integrity_request());
    }
    if (from.has_db_check_integrity_reply()) {
      mutable_db_check_integrity_reply()->::upscaledb::DbCheckIntegrityReply::MergeFrom(from.db_check_integrity_reply());
    }
    if (from.has_db_count_request()) {
      mutable_db_count_request()->::upscaledb::DbCountRequest::MergeFrom(from.db_count_request());
    }
  }
  if (from._has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    if (from.has_db_count_reply()) {
      mutable_db_count_reply()->::upscaledb::DbCountReply::MergeFrom(from.db_count_reply());
    }
    if (from.has_db_insert_request()) {
      mutable_db_insert_request()->::upscaledb::DbInsertRequest::MergeFrom(from.db_insert_request());
    }
    if (from.has_db_insert_reply()) {
      mutable_db_insert_reply()->::upscaledb::DbInsertReply::MergeFrom(from.db_insert_reply());
    }
    if (from.has_db_erase_request()) {
      mutable_db_erase_request()->::upscaledb::DbEraseRequest::MergeFrom(from.db_erase_request());
    }
    if (from.has_db_erase_reply()) {
      mutable_db_erase_reply()->::upscaledb::DbEraseReply::MergeFrom(from.db_erase_reply());
    }
    if (from.has_db_find_request()) {
      mutable_db_find_request()->::upscaledb::DbFindRequest::MergeFrom(from.db_find_request());
    }
    if (from.has_db_find_reply()) {
      mutable_db_find_reply()->::upscaledb::DbFindReply::MergeFrom(from.db_find_reply());
    }
    if (from.has_cursor_create_request()) {
      mutable_cursor_create_request()->::upscaledb::CursorCreateRequest::MergeFrom(from.cursor_create_request());
    }
  }
  if (from._has_bits_[40 / 32] & (0xffu << (40 % 32))) {
    if (from.has_cursor_create_reply()) {
      mutable_cursor_create_reply()->::upscaledb::CursorCreateReply::MergeFrom(from.cursor_create_reply());
    }
    if (from.has_cursor_clone_request()) {
      mutable_cursor_clone_request()->::upscaledb::CursorCloneRequest::MergeFrom(from.cursor_clone_request());
    }
    if (from.has_cursor_clone_reply()) {
      mutable_cursor_clone_reply()->::upscaledb::CursorCloneReply::MergeFrom(from.cursor_clone_reply());
    }
    if (from.has_cursor_close_request()) {
      mutable_cursor_close_request()->::upscaledb::CursorCloseRequest::MergeFrom(from.cursor_close_request());
    }
    if (from.has_cursor_close_reply()) {
      mutable_cursor_close_reply()->::upscaledb::CursorCloseReply::MergeFrom(from.cursor_close_reply());
    }
    if (from.has_cursor_insert_request()) {
      mutable_cursor_insert_request()->::upscaledb::CursorInsertRequest::MergeFrom(from.cursor_insert_request());
    }
    if (from.has_cursor_insert_reply()) {
      mutable_cursor_insert_reply()->::upscaledb::CursorInsertReply::MergeFrom(from.cursor_insert_reply());
    }
    if (from.has_cursor_erase_request()) {
      mutable_cursor_erase_request()->::upscaledb::CursorEraseRequest::MergeFrom(from.cursor_erase_request());
    }
  }
  if (from._has_bits_[48 / 32] & (0xffu << (48 % 32))) {
    if (from.has_cursor_erase_reply()) {
      mutable_cursor_erase_reply()->::upscaledb::CursorEraseReply::MergeFrom(from.cursor_erase_reply());
    }
    if (from.has_cursor_get_record_count_request()) {
      mutable_cursor_get_record_count_request()->::upscaledb::CursorGetRecordCountRequest::MergeFrom(from.cursor_get_record_count_request());
    }
    if (from.has_cursor_get_record_count_reply()) {
      mutable_cursor_get_record_count_reply()->::upscaledb::CursorGetRecordCountReply::MergeFrom(from.cursor_get_record_count_reply());
    }
    if (from.has_cursor_get_duplicate_position_request()) {
      mutable_cursor_get_duplicate_position_request()->::upscaledb::CursorGetDuplicatePositionRequest::MergeFrom(from.cursor_get_duplicate_position_request());
    }
    if (from.has_cursor_get_duplicate_position_reply()) {
      mutable_cursor_get_duplicate_position_reply()->::upscaledb::CursorGetDuplicatePositionReply::MergeFrom(from.cursor_get_duplicate_position_reply());
    }
    if (from.has_cursor_get_record_size_request()) {
      mutable_cursor_get_record_size_request()->::upscaledb::CursorGetRecordSizeRequest::MergeFrom(from.cursor_get_record_size_request());
    }
    if (from.has_cursor_get_record_size_reply()) {
      mutable_cursor_get_record_size_reply()->::upscaledb::CursorGetRecordSizeReply::MergeFrom(from.cursor_get_record_size_reply());
    }
    if (from.has_cursor_overwrite_request()) {
      mutable_cursor_overwrite_request()->::upscaledb::CursorOverwriteRequest::MergeFrom(from.cursor_overwrite_request());
    }
  }
  if (from._has_bits_[56 / 32] & (0xffu << (56 % 32))) {
    if (from.has_cursor_overwrite_reply()) {
      mutable_cursor_overwrite_reply()->::upscaledb::CursorOverwriteReply::MergeFrom(from.cursor_overwrite_reply());
    }
    if (from.has_cursor_move_request()) {
      mutable_cursor_move_request()->::upscaledb::CursorMoveRequest::MergeFrom(from.cursor_move_request());
    }
    if (from.has_cursor_move_reply()) {
      mutable_cursor_move_reply()->::upscaledb::CursorMoveReply::MergeFrom(from.cursor_move_reply());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void ProtoWrapper::CopyFrom(const ProtoWrapper& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProtoWrapper::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_connect_request()) {
    if (!this->connect_request().IsInitialized()) return false;
  }
  if (has_connect_reply()) {
    if (!this->connect_reply().IsInitialized()) return false;
  }
  if (has_disconnect_request()) {
    if (!this->disconnect_request().IsInitialized()) return false;
  }
  if (has_disconnect_reply()) {
    if (!this->disconnect_reply().IsInitialized()) return false;
  }
  if (has_env_rename_request()) {
    if (!this->env_rename_request().IsInitialized()) return false;
  }
  if (has_env_rename_reply()) {
    if (!this->env_rename_reply().IsInitialized()) return false;
  }
  if (has_env_get_parameters_request()) {
    if (!this->env_get_parameters_request().IsInitialized()) return false;
  }
  if (has_env_get_parameters_reply()) {
    if (!this->env_get_parameters_reply().IsInitialized()) return false;
  }
  if (has_env_get_database_names_request()) {
    if (!this->env_get_database_names_request().IsInitialized()) return false;
  }
  if (has_env_get_database_names_reply()) {
    if (!this->env_get_database_names_reply().IsInitialized()) return false;
  }
  if (has_env_flush_request()) {
    if (!this->env_flush_request().IsInitialized()) return false;
  }
  if (has_env_flush_reply()) {
    if (!this->env_flush_reply().IsInitialized()) return false;
  }
  if (has_env_create_db_request()) {
    if (!this->env_create_db_request().IsInitialized()) return false;
  }
  if (has_env_create_db_reply()) {
    if (!this->env_create_db_reply().IsInitialized()) return false;
  }
  if (has_env_open_db_request()) {
    if (!this->env_open_db_request().IsInitialized()) return false;
  }
  if (has_env_open_db_reply()) {
    if (!this->env_open_db_reply().IsInitialized()) return false;
  }
  if (has_env_erase_db_request()) {
    if (!this->env_erase_db_request().IsInitialized()) return false;
  }
  if (has_env_erase_db_reply()) {
    if (!this->env_erase_db_reply().IsInitialized()) return false;
  }
  if (has_db_close_request()) {
    if (!this->db_close_request().IsInitialized()) return false;
  }
  if (has_db_close_reply()) {
    if (!this->db_close_reply().IsInitialized()) return false;
  }
  if (has_db_get_parameters_request()) {
    if (!this->db_get_parameters_request().IsInitialized()) return false;
  }
  if (has_db_get_parameters_reply()) {
    if (!this->db_get_parameters_reply().IsInitialized()) return false;
  }
  if (has_txn_begin_request()) {
    if (!this->txn_begin_request().IsInitialized()) return false;
  }
  if (has_txn_begin_reply()) {
    if (!this->txn_begin_reply().IsInitialized()) return false;
  }
  if (has_txn_commit_request()) {
    if (!this->txn_commit_request().IsInitialized()) return false;
  }
  if (has_txn_commit_reply()) {
    if (!this->txn_commit_reply().IsInitialized()) return false;
  }
  if (has_txn_abort_request()) {
    if (!this->txn_abort_request().IsInitialized()) return false;
  }
  if (has_txn_abort_reply()) {
    if (!this->txn_abort_reply().IsInitialized()) return false;
  }
  if (has_db_check_integrity_request()) {
    if (!this->db_check_integrity_request().IsInitialized()) return false;
  }
  if (has_db_check_integrity_reply()) {
    if (!this->db_check_integrity_reply().IsInitialized()) return false;
  }
  if (has_db_count_request()) {
    if (!this->db_count_request().IsInitialized()) return false;
  }
  if (has_db_count_reply()) {
    if (!this->db_count_reply().IsInitialized()) return false;
  }
  if (has_db_insert_request()) {
    if (!this->db_insert_request().IsInitialized()) return false;
  }
  if (has_db_insert_reply()) {
    if (!this->db_insert_reply().IsInitialized()) return false;
  }
  if (has_db_erase_request()) {
    if (!this->db_erase_request().IsInitialized()) return false;
  }
  if (has_db_erase_reply()) {
    if (!this->db_erase_reply().IsInitialized()) return false;
  }
  if (has_db_find_request()) {
    if (!this->db_find_request().IsInitialized()) return false;
  }
  if (has_db_find_reply()) {
    if (!this->db_find_reply().IsInitialized()) return false;
  }
  if (has_cursor_create_request()) {
    if (!this->cursor_create_request().IsInitialized()) return false;
  }
  if (has_cursor_create_reply()) {
    if (!this->cursor_create_reply().IsInitialized()) return false;
  }
  if (has_cursor_clone_request()) {
    if (!this->cursor_clone_request().IsInitialized()) return false;
  }
  if (has_cursor_clone_reply()) {
    if (!this->cursor_clone_reply().IsInitialized()) return false;
  }
  if (has_cursor_close_request()) {
    if (!this->cursor_close_request().IsInitialized()) return false;
  }
  if (has_cursor_close_reply()) {
    if (!this->cursor_close_reply().IsInitialized()) return false;
  }
  if (has_cursor_insert_request()) {
    if (!this->cursor_insert_request().IsInitialized()) return false;
  }
  if (has_cursor_insert_reply()) {
    if (!this->cursor_insert_reply().IsInitialized()) return false;
  }
  if (has_cursor_erase_request()) {
    if (!this->cursor_erase_request().IsInitialized()) return false;
  }
  if (has_cursor_erase_reply()) {
    if (!this->cursor_erase_reply().IsInitialized()) return false;
  }
  if (has_cursor_get_record_count_request()) {
    if (!this->cursor_get_record_count_request().IsInitialized()) return false;
  }
  if (has_cursor_get_record_count_reply()) {
    if (!this->cursor_get_record_count_reply().IsInitialized()) return false;
  }
  if (has_cursor_get_duplicate_position_request()) {
    if (!this->cursor_get_duplicate_position_request().IsInitialized()) return false;
  }
  if (has_cursor_get_duplicate_position_reply()) {
    if (!this->cursor_get_duplicate_position_reply().IsInitialized()) return false;
  }
  if (has_cursor_get_record_size_request()) {
    if (!this->cursor_get_record_size_request().IsInitialized()) return false;
  }
  if (has_cursor_get_record_size_reply()) {
    if (!this->cursor_get_record_size_reply().IsInitialized()) return false;
  }
  if (has_cursor_overwrite_request()) {
    if (!this->cursor_overwrite_request().IsInitialized()) return false;
  }
  if (has_cursor_overwrite_reply()) {
    if (!this->cursor_overwrite_reply().IsInitialized()) return false;
  }
  if (has_cursor_move_request()) {
    if (!this->cursor_move_request().IsInitialized()) return false;
  }
  if (has_cursor_move_reply()) {
    if (!this->cursor_move_reply().IsInitialized()) return false;
  }
  return true;
}

void ProtoWrapper::Swap(ProtoWrapper* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(connect_request_, other->connect_request_);
    std::swap(connect_reply_, other->connect_reply_);
    std::swap(disconnect_request_, other->disconnect_request_);
    std::swap(disconnect_reply_, other->disconnect_reply_);
    std::swap(env_rename_request_, other->env_rename_request_);
    std::swap(env_rename_reply_, other->env_rename_reply_);
    std::swap(env_get_parameters_request_, other->env_get_parameters_request_);
    std::swap(env_get_parameters_reply_, other->env_get_parameters_reply_);
    std::swap(env_get_database_names_request_, other->env_get_database_names_request_);
    std::swap(env_get_database_names_reply_, other->env_get_database_names_reply_);
    std::swap(env_flush_request_, other->env_flush_request_);
    std::swap(env_flush_reply_, other->env_flush_reply_);
    std::swap(env_create_db_request_, other->env_create_db_request_);
    std::swap(env_create_db_reply_, other->env_create_db_reply_);
    std::swap(env_open_db_request_, other->env_open_db_request_);
    std::swap(env_open_db_reply_, other->env_open_db_reply_);
    std::swap(env_erase_db_request_, other->env_erase_db_request_);
    std::swap(env_erase_db_reply_, other->env_erase_db_reply_);
    std::swap(db_close_request_, other->db_close_request_);
    std::swap(db_close_reply_, other->db_close_reply_);
    std::swap(db_get_parameters_request_, other->db_get_parameters_request_);
    std::swap(db_get_parameters_reply_, other->db_get_parameters_reply_);
    std::swap(txn_begin_request_, other->txn_begin_request_);
    std::swap(txn_begin_reply_, other->txn_begin_reply_);
    std::swap(txn_commit_request_, other->txn_commit_request_);
    std::swap(txn_commit_reply_, other->txn_commit_reply_);
    std::swap(txn_abort_request_, other->txn_abort_request_);
    std::swap(txn_abort_reply_, other->txn_abort_reply_);
    std::swap(db_check_integrity_request_, other->db_check_integrity_request_);
    std::swap(db_check_integrity_reply_, other->db_check_integrity_reply_);
    std::swap(db_count_request_, other->db_count_request_);
    std::swap(db_count_reply_, other->db_count_reply_);
    std::swap(db_insert_request_, other->db_insert_request_);
    std::swap(db_insert_reply_, other->db_insert_reply_);
    std::swap(db_erase_request_, other->db_erase_request_);
    std::swap(db_erase_reply_, other->db_erase_reply_);
    std::swap(db_find_request_, other->db_find_request_);
    std::swap(db_find_reply_, other->db_find_reply_);
    std::swap(cursor_create_request_, other->cursor_create_request_);
    std::swap(cursor_create_reply_, other->cursor_create_reply_);
    std::swap(cursor_clone_request_, other->cursor_clone_request_);
    std::swap(cursor_clone_reply_, other->cursor_clone_reply_);
    std::swap(cursor_close_request_, other->cursor_close_request_);
    std::swap(cursor_close_reply_, other->cursor_close_reply_);
    std::swap(cursor_insert_request_, other->cursor_insert_request_);
    std::swap(cursor_insert_reply_, other->cursor_insert_reply_);
    std::swap(cursor_erase_request_, other->cursor_erase_request_);
    std::swap(cursor_erase_reply_, other->cursor_erase_reply_);
    std::swap(cursor_get_record_count_request_, other->cursor_get_record_count_request_);
    std::swap(cursor_get_record_count_reply_, other->cursor_get_record_count_reply_);
    std::swap(cursor_get_duplicate_position_request_, other->cursor_get_duplicate_position_request_);
    std::swap(cursor_get_duplicate_position_reply_, other->cursor_get_duplicate_position_reply_);
    std::swap(cursor_get_record_size_request_, other->cursor_get_record_size_request_);
    std::swap(cursor_get_record_size_reply_, other->cursor_get_record_size_reply_);
    std::swap(cursor_overwrite_request_, other->cursor_overwrite_request_);
    std::swap(cursor_overwrite_reply_, other->cursor_overwrite_reply_);
    std::swap(cursor_move_request_, other->cursor_move_request_);
    std::swap(cursor_move_reply_, other->cursor_move_reply_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_has_bits_[1], other->_has_bits_[1]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string ProtoWrapper::GetTypeName() const {
  return "upscaledb.ProtoWrapper";
}


// ===================================================================

#ifndef _MSC_VER
const int ConnectRequest::kPathFieldNumber;
#endif  // !_MSC_VER

ConnectRequest::ConnectRequest()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:upscaledb.ConnectRequest)
}

void ConnectRequest::InitAsDefaultInstance() {
}

ConnectRequest::ConnectRequest(const ConnectRequest& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:upscaledb.ConnectRequest)
}

void ConnectRequest::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  path_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ConnectRequest::~ConnectRequest() {
  // @@protoc_insertion_point(destructor:upscaledb.ConnectRequest)
  SharedDtor();
}

void ConnectRequest::SharedDtor() {
  if (path_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete path_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void ConnectRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ConnectRequest& ConnectRequest::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_messages_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_messages_2eproto();
#endif
  return *default_instance_;
}

ConnectRequest* ConnectRequest::default_instance_ = NULL;

ConnectRequest* ConnectRequest::New() const {
  return new ConnectRequest;
}

void ConnectRequest::Clear() {
  if (has_path()) {
    if (path_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
      path_->clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool ConnectRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:upscaledb.ConnectRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string path = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_path()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:upscaledb.ConnectRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:upscaledb.ConnectRequest)
  return false;
#undef DO_
}

void ConnectRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:upscaledb.ConnectRequest)
  // required string path = 1;
  if (has_path()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->path(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:upscaledb.ConnectRequest)
}

int ConnectRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string path = 1;
    if (has_path()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->path());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ConnectRequest::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const ConnectRequest*>(&from));
}

void ConnectRequest::MergeFrom(const ConnectRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_path()) {
      set_path(from.path());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void ConnectRequest::CopyFrom(const ConnectRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConnectRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void ConnectRequest::Swap(ConnectRequest* other) {
  if (other != this) {
    std::swap(path_, other->path_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string ConnectRequest::GetTypeName() const {
  return "upscaledb.ConnectRequest";
}


// ===================================================================

#ifndef _MSC_VER
const int ConnectReply::kStatusFieldNumber;
const int ConnectReply::kEnvFlagsFieldNumber;
const int ConnectReply::kEnvHandleFieldNumber;
#endif  // !_MSC_VER

ConnectReply::ConnectReply()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:upscaledb.ConnectReply)
}

void ConnectReply::InitAsDefaultInstance() {
}

ConnectReply::ConnectReply(const ConnectReply& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:upscaledb.ConnectReply)
}

void ConnectReply::SharedCtor() {
  _cached_size_ = 0;
  status_ = 0;
  env_flags_ = 0u;
  env_handle_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ConnectReply::~ConnectReply() {
  // @@protoc_insertion_point(destructor:upscaledb.ConnectReply)
  SharedDtor();
}

void ConnectReply::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void ConnectReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ConnectReply& ConnectReply::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_messages_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_messages_2eproto();
#endif
  return *default_instance_;
}

ConnectReply* ConnectReply::default_instance_ = NULL;

ConnectReply* ConnectReply::New() const {
  return new ConnectReply;
}

void ConnectReply::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<ConnectReply*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(status_, env_handle_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool ConnectReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:upscaledb.ConnectReply)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required sint32 status = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &status_)));
          set_has_status();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_env_flags;
        break;
      }

      // optional uint32 env_flags = 2;
      case 2: {
        if (tag == 16) {
         parse_env_flags:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &env_flags_)));
          set_has_env_flags();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_env_handle;
        break;
      }

      // optional uint64 env_handle = 3;
      case 3: {
        if (tag == 24) {
         parse_env_handle:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &env_handle_)));
          set_has_env_handle();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:upscaledb.ConnectReply)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:upscaledb.ConnectReply)
  return false;
#undef DO_
}

void ConnectReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:upscaledb.ConnectReply)
  // required sint32 status = 1;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(1, this->status(), output);
  }

  // optional uint32 env_flags = 2;
  if (has_env_flags()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->env_flags(), output);
  }

  // optional uint64 env_handle = 3;
  if (has_env_handle()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->env_handle(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:upscaledb.ConnectReply)
}

int ConnectReply::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required sint32 status = 1;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->status());
    }

    // optional uint32 env_flags = 2;
    if (has_env_flags()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->env_flags());
    }

    // optional uint64 env_handle = 3;
    if (has_env_handle()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->env_handle());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ConnectReply::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const ConnectReply*>(&from));
}

void ConnectReply::MergeFrom(const ConnectReply& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_status()) {
      set_status(from.status());
    }
    if (from.has_env_flags()) {
      set_env_flags(from.env_flags());
    }
    if (from.has_env_handle()) {
      set_env_handle(from.env_handle());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void ConnectReply::CopyFrom(const ConnectReply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConnectReply::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void ConnectReply::Swap(ConnectReply* other) {
  if (other != this) {
    std::swap(status_, other->status_);
    std::swap(env_flags_, other->env_flags_);
    std::swap(env_handle_, other->env_handle_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string ConnectReply::GetTypeName() const {
  return "upscaledb.ConnectReply";
}


// ===================================================================

#ifndef _MSC_VER
const int DisconnectRequest::kEnvHandleFieldNumber;
#endif  // !_MSC_VER

DisconnectRequest::DisconnectRequest()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:upscaledb.DisconnectRequest)
}

void DisconnectRequest::InitAsDefaultInstance() {
}

DisconnectRequest::DisconnectRequest(const DisconnectRequest& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:upscaledb.DisconnectRequest)
}

void DisconnectRequest::SharedCtor() {
  _cached_size_ = 0;
  env_handle_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DisconnectRequest::~DisconnectRequest() {
  // @@protoc_insertion_point(destructor:upscaledb.DisconnectRequest)
  SharedDtor();
}

void DisconnectRequest::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void DisconnectRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const DisconnectRequest& DisconnectRequest::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_messages_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_messages_2eproto();
#endif
  return *default_instance_;
}

DisconnectRequest* DisconnectRequest::default_instance_ = NULL;

DisconnectRequest* DisconnectRequest::New() const {
  return new DisconnectRequest;
}

void DisconnectRequest::Clear() {
  env_handle_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool DisconnectRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:upscaledb.DisconnectRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 env_handle = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &env_handle_)));
          set_has_env_handle();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:upscaledb.DisconnectRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:upscaledb.DisconnectRequest)
  return false;
#undef DO_
}

void DisconnectRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:upscaledb.DisconnectRequest)
  // required uint64 env_handle = 1;
  if (has_env_handle()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->env_handle(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:upscaledb.DisconnectRequest)
}

int DisconnectRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 env_handle = 1;
    if (has_env_handle()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->env_handle());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DisconnectRequest::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const DisconnectRequest*>(&from));
}

void DisconnectRequest::MergeFrom(const DisconnectRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_env_handle()) {
      set_env_handle(from.env_handle());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void DisconnectRequest::CopyFrom(const DisconnectRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DisconnectRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void DisconnectRequest::Swap(DisconnectRequest* other) {
  if (other != this) {
    std::swap(env_handle_, other->env_handle_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string DisconnectRequest::GetTypeName() const {
  return "upscaledb.DisconnectRequest";
}


// ===================================================================

#ifndef _MSC_VER
const int DisconnectReply::kStatusFieldNumber;
#endif  // !_MSC_VER

DisconnectReply::DisconnectReply()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:upscaledb.DisconnectReply)
}

void DisconnectReply::InitAsDefaultInstance() {
}

DisconnectReply::DisconnectReply(const DisconnectReply& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:upscaledb.DisconnectReply)
}

void DisconnectReply::SharedCtor() {
  _cached_size_ = 0;
  status_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DisconnectReply::~DisconnectReply() {
  // @@protoc_insertion_point(destructor:upscaledb.DisconnectReply)
  SharedDtor();
}

void DisconnectReply::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void DisconnectReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const DisconnectReply& DisconnectReply::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_messages_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_messages_2eproto();
#endif
  return *default_instance_;
}

DisconnectReply* DisconnectReply::default_instance_ = NULL;

DisconnectReply* DisconnectReply::New() const {
  return new DisconnectReply;
}

void DisconnectReply::Clear() {
  status_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool DisconnectReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:upscaledb.DisconnectReply)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required sint32 status = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &status_)));
          set_has_status();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:upscaledb.DisconnectReply)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:upscaledb.DisconnectReply)
  return false;
#undef DO_
}

void DisconnectReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:upscaledb.DisconnectReply)
  // required sint32 status = 1;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(1, this->status(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:upscaledb.DisconnectReply)
}

int DisconnectReply::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required sint32 status = 1;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->status());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DisconnectReply::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const DisconnectReply*>(&from));
}

void DisconnectReply::MergeFrom(const DisconnectReply& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_status()) {
      set_status(from.status());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void DisconnectReply::CopyFrom(const DisconnectReply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DisconnectReply::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void DisconnectReply::Swap(DisconnectReply* other) {
  if (other != this) {
    std::swap(status_, other->status_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string DisconnectReply::GetTypeName() const {
  return "upscaledb.DisconnectReply";
}


// ===================================================================

#ifndef _MSC_VER
const int EnvGetParametersRequest::kEnvHandleFieldNumber;
const int EnvGetParametersRequest::kNamesFieldNumber;
#endif  // !_MSC_VER

EnvGetParametersRequest::EnvGetParametersRequest()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:upscaledb.EnvGetParametersRequest)
}

void EnvGetParametersRequest::InitAsDefaultInstance() {
}

EnvGetParametersRequest::EnvGetParametersRequest(const EnvGetParametersRequest& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:upscaledb.EnvGetParametersRequest)
}

void EnvGetParametersRequest::SharedCtor() {
  _cached_size_ = 0;
  env_handle_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EnvGetParametersRequest::~EnvGetParametersRequest() {
  // @@protoc_insertion_point(destructor:upscaledb.EnvGetParametersRequest)
  SharedDtor();
}

void EnvGetParametersRequest::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void EnvGetParametersRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const EnvGetParametersRequest& EnvGetParametersRequest::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_messages_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_messages_2eproto();
#endif
  return *default_instance_;
}

EnvGetParametersRequest* EnvGetParametersRequest::default_instance_ = NULL;

EnvGetParametersRequest* EnvGetParametersRequest::New() const {
  return new EnvGetParametersRequest;
}

void EnvGetParametersRequest::Clear() {
  env_handle_ = GOOGLE_ULONGLONG(0);
  names_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool EnvGetParametersRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:upscaledb.EnvGetParametersRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 env_handle = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &env_handle_)));
          set_has_env_handle();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_names;
        break;
      }

      // repeated uint32 names = 2;
      case 2: {
        if (tag == 16) {
         parse_names:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 16, input, this->mutable_names())));
        } else if (tag == 18) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_names())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_names;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:upscaledb.EnvGetParametersRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:upscaledb.EnvGetParametersRequest)
  return false;
#undef DO_
}

void EnvGetParametersRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:upscaledb.EnvGetParametersRequest)
  // required uint64 env_handle = 1;
  if (has_env_handle()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->env_handle(), output);
  }

  // repeated uint32 names = 2;
  for (int i = 0; i < this->names_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      2, this->names(i), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:upscaledb.EnvGetParametersRequest)
}

int EnvGetParametersRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 env_handle = 1;
    if (has_env_handle()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->env_handle());
    }

  }
  // repeated uint32 names = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->names_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->names(i));
    }
    total_size += 1 * this->names_size() + data_size;
  }

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EnvGetParametersRequest::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const EnvGetParametersRequest*>(&from));
}

void EnvGetParametersRequest::MergeFrom(const EnvGetParametersRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  names_.MergeFrom(from.names_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_env_handle()) {
      set_env_handle(from.env_handle());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void EnvGetParametersRequest::CopyFrom(const EnvGetParametersRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EnvGetParametersRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void EnvGetParametersRequest::Swap(EnvGetParametersRequest* other) {
  if (other != this) {
    std::swap(env_handle_, other->env_handle_);
    names_.Swap(&other->names_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string EnvGetParametersRequest::GetTypeName() const {
  return "upscaledb.EnvGetParametersRequest";
}


// ===================================================================

#ifndef _MSC_VER
const int EnvGetParametersReply::kStatusFieldNumber;
const int EnvGetParametersReply::kCacheSizeFieldNumber;
const int EnvGetParametersReply::kPageSizeFieldNumber;
const int EnvGetParametersReply::kMaxEnvDatabasesFieldNumber;
const int EnvGetParametersReply::kFlagsFieldNumber;
const int EnvGetParametersReply::kFilemodeFieldNumber;
const int EnvGetParametersReply::kFilenameFieldNumber;
#endif  // !_MSC_VER

EnvGetParametersReply::EnvGetParametersReply()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:upscaledb.EnvGetParametersReply)
}

void EnvGetParametersReply::InitAsDefaultInstance() {
}

EnvGetParametersReply::EnvGetParametersReply(const EnvGetParametersReply& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:upscaledb.EnvGetParametersReply)
}

void EnvGetParametersReply::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  status_ = 0;
  cache_size_ = 0u;
  page_size_ = 0u;
  max_env_databases_ = 0u;
  flags_ = 0u;
  filemode_ = 0u;
  filename_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EnvGetParametersReply::~EnvGetParametersReply() {
  // @@protoc_insertion_point(destructor:upscaledb.EnvGetParametersReply)
  SharedDtor();
}

void EnvGetParametersReply::SharedDtor() {
  if (filename_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete filename_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void EnvGetParametersReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const EnvGetParametersReply& EnvGetParametersReply::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_messages_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_messages_2eproto();
#endif
  return *default_instance_;
}

EnvGetParametersReply* EnvGetParametersReply::default_instance_ = NULL;

EnvGetParametersReply* EnvGetParametersReply::New() const {
  return new EnvGetParametersReply;
}

void EnvGetParametersReply::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<EnvGetParametersReply*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 127) {
    ZR_(status_, filemode_);
    if (has_filename()) {
      if (filename_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        filename_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool EnvGetParametersReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:upscaledb.EnvGetParametersReply)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required sint32 status = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &status_)));
          set_has_status();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_cache_size;
        break;
      }

      // optional uint32 cache_size = 2;
      case 2: {
        if (tag == 16) {
         parse_cache_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cache_size_)));
          set_has_cache_size();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_page_size;
        break;
      }

      // optional uint32 page_size = 3;
      case 3: {
        if (tag == 24) {
         parse_page_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &page_size_)));
          set_has_page_size();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_max_env_databases;
        break;
      }

      // optional uint32 max_env_databases = 4;
      case 4: {
        if (tag == 32) {
         parse_max_env_databases:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &max_env_databases_)));
          set_has_max_env_databases();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_flags;
        break;
      }

      // optional uint32 flags = 5;
      case 5: {
        if (tag == 40) {
         parse_flags:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &flags_)));
          set_has_flags();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_filemode;
        break;
      }

      // optional uint32 filemode = 6;
      case 6: {
        if (tag == 48) {
         parse_filemode:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &filemode_)));
          set_has_filemode();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_filename;
        break;
      }

      // optional string filename = 7;
      case 7: {
        if (tag == 58) {
         parse_filename:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_filename()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:upscaledb.EnvGetParametersReply)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:upscaledb.EnvGetParametersReply)
  return false;
#undef DO_
}

void EnvGetParametersReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:upscaledb.EnvGetParametersReply)
  // required sint32 status = 1;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(1, this->status(), output);
  }

  // optional uint32 cache_size = 2;
  if (has_cache_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->cache_size(), output);
  }

  // optional uint32 page_size = 3;
  if (has_page_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->page_size(), output);
  }

  // optional uint32 max_env_databases = 4;
  if (has_max_env_databases()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->max_env_databases(), output);
  }

  // optional uint32 flags = 5;
  if (has_flags()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->flags(), output);
  }

  // optional uint32 filemode = 6;
  if (has_filemode()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->filemode(), output);
  }

  // optional string filename = 7;
  if (has_filename()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->filename(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:upscaledb.EnvGetParametersReply)
}

int EnvGetParametersReply::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required sint32 status = 1;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->status());
    }

    // optional uint32 cache_size = 2;
    if (has_cache_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cache_size());
    }

    // optional uint32 page_size = 3;
    if (has_page_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->page_size());
    }

    // optional uint32 max_env_databases = 4;
    if (has_max_env_databases()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->max_env_databases());
    }

    // optional uint32 flags = 5;
    if (has_flags()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->flags());
    }

    // optional uint32 filemode = 6;
    if (has_filemode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->filemode());
    }

    // optional string filename = 7;
    if (has_filename()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->filename());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EnvGetParametersReply::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const EnvGetParametersReply*>(&from));
}

void EnvGetParametersReply::MergeFrom(const EnvGetParametersReply& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_status()) {
      set_status(from.status());
    }
    if (from.has_cache_size()) {
      set_cache_size(from.cache_size());
    }
    if (from.has_page_size()) {
      set_page_size(from.page_size());
    }
    if (from.has_max_env_databases()) {
      set_max_env_databases(from.max_env_databases());
    }
    if (from.has_flags()) {
      set_flags(from.flags());
    }
    if (from.has_filemode()) {
      set_filemode(from.filemode());
    }
    if (from.has_filename()) {
      set_filename(from.filename());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void EnvGetParametersReply::CopyFrom(const EnvGetParametersReply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EnvGetParametersReply::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void EnvGetParametersReply::Swap(EnvGetParametersReply* other) {
  if (other != this) {
    std::swap(status_, other->status_);
    std::swap(cache_size_, other->cache_size_);
    std::swap(page_size_, other->page_size_);
    std::swap(max_env_databases_, other->max_env_databases_);
    std::swap(flags_, other->flags_);
    std::swap(filemode_, other->filemode_);
    std::swap(filename_, other->filename_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string EnvGetParametersReply::GetTypeName() const {
  return "upscaledb.EnvGetParametersReply";
}


// ===================================================================

#ifndef _MSC_VER
const int EnvGetDatabaseNamesRequest::kEnvHandleFieldNumber;
#endif  // !_MSC_VER

EnvGetDatabaseNamesRequest::EnvGetDatabaseNamesRequest()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:upscaledb.EnvGetDatabaseNamesRequest)
}

void EnvGetDatabaseNamesRequest::InitAsDefaultInstance() {
}

EnvGetDatabaseNamesRequest::EnvGetDatabaseNamesRequest(const EnvGetDatabaseNamesRequest& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:upscaledb.EnvGetDatabaseNamesRequest)
}

void EnvGetDatabaseNamesRequest::SharedCtor() {
  _cached_size_ = 0;
  env_handle_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EnvGetDatabaseNamesRequest::~EnvGetDatabaseNamesRequest() {
  // @@protoc_insertion_point(destructor:upscaledb.EnvGetDatabaseNamesRequest)
  SharedDtor();
}

void EnvGetDatabaseNamesRequest::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void EnvGetDatabaseNamesRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const EnvGetDatabaseNamesRequest& EnvGetDatabaseNamesRequest::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_messages_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_messages_2eproto();
#endif
  return *default_instance_;
}

EnvGetDatabaseNamesRequest* EnvGetDatabaseNamesRequest::default_instance_ = NULL;

EnvGetDatabaseNamesRequest* EnvGetDatabaseNamesRequest::New() const {
  return new EnvGetDatabaseNamesRequest;
}

void EnvGetDatabaseNamesRequest::Clear() {
  env_handle_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool EnvGetDatabaseNamesRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:upscaledb.EnvGetDatabaseNamesRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 env_handle = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &env_handle_)));
          set_has_env_handle();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:upscaledb.EnvGetDatabaseNamesRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:upscaledb.EnvGetDatabaseNamesRequest)
  return false;
#undef DO_
}

void EnvGetDatabaseNamesRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:upscaledb.EnvGetDatabaseNamesRequest)
  // required uint64 env_handle = 1;
  if (has_env_handle()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->env_handle(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:upscaledb.EnvGetDatabaseNamesRequest)
}

int EnvGetDatabaseNamesRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 env_handle = 1;
    if (has_env_handle()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->env_handle());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EnvGetDatabaseNamesRequest::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const EnvGetDatabaseNamesRequest*>(&from));
}

void EnvGetDatabaseNamesRequest::MergeFrom(const EnvGetDatabaseNamesRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_env_handle()) {
      set_env_handle(from.env_handle());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void EnvGetDatabaseNamesRequest::CopyFrom(const EnvGetDatabaseNamesRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EnvGetDatabaseNamesRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void EnvGetDatabaseNamesRequest::Swap(EnvGetDatabaseNamesRequest* other) {
  if (other != this) {
    std::swap(env_handle_, other->env_handle_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string EnvGetDatabaseNamesRequest::GetTypeName() const {
  return "upscaledb.EnvGetDatabaseNamesRequest";
}


// ===================================================================

#ifndef _MSC_VER
const int EnvGetDatabaseNamesReply::kStatusFieldNumber;
const int EnvGetDatabaseNamesReply::kNamesFieldNumber;
#endif  // !_MSC_VER

EnvGetDatabaseNamesReply::EnvGetDatabaseNamesReply()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:upscaledb.EnvGetDatabaseNamesReply)
}

void EnvGetDatabaseNamesReply::InitAsDefaultInstance() {
}

EnvGetDatabaseNamesReply::EnvGetDatabaseNamesReply(const EnvGetDatabaseNamesReply& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:upscaledb.EnvGetDatabaseNamesReply)
}

void EnvGetDatabaseNamesReply::SharedCtor() {
  _cached_size_ = 0;
  status_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EnvGetDatabaseNamesReply::~EnvGetDatabaseNamesReply() {
  // @@protoc_insertion_point(destructor:upscaledb.EnvGetDatabaseNamesReply)
  SharedDtor();
}

void EnvGetDatabaseNamesReply::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void EnvGetDatabaseNamesReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const EnvGetDatabaseNamesReply& EnvGetDatabaseNamesReply::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_messages_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_messages_2eproto();
#endif
  return *default_instance_;
}

EnvGetDatabaseNamesReply* EnvGetDatabaseNamesReply::default_instance_ = NULL;

EnvGetDatabaseNamesReply* EnvGetDatabaseNamesReply::New() const {
  return new EnvGetDatabaseNamesReply;
}

void EnvGetDatabaseNamesReply::Clear() {
  status_ = 0;
  names_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool EnvGetDatabaseNamesReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:upscaledb.EnvGetDatabaseNamesReply)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required sint32 status = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &status_)));
          set_has_status();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_names;
        break;
      }

      // repeated uint32 names = 2;
      case 2: {
        if (tag == 16) {
         parse_names:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 16, input, this->mutable_names())));
        } else if (tag == 18) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_names())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_names;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:upscaledb.EnvGetDatabaseNamesReply)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:upscaledb.EnvGetDatabaseNamesReply)
  return false;
#undef DO_
}

void EnvGetDatabaseNamesReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:upscaledb.EnvGetDatabaseNamesReply)
  // required sint32 status = 1;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(1, this->status(), output);
  }

  // repeated uint32 names = 2;
  for (int i = 0; i < this->names_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      2, this->names(i), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:upscaledb.EnvGetDatabaseNamesReply)
}

int EnvGetDatabaseNamesReply::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required sint32 status = 1;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->status());
    }

  }
  // repeated uint32 names = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->names_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->names(i));
    }
    total_size += 1 * this->names_size() + data_size;
  }

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EnvGetDatabaseNamesReply::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const EnvGetDatabaseNamesReply*>(&from));
}

void EnvGetDatabaseNamesReply::MergeFrom(const EnvGetDatabaseNamesReply& from) {
  GOOGLE_CHECK_NE(&from, this);
  names_.MergeFrom(from.names_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_status()) {
      set_status(from.status());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void EnvGetDatabaseNamesReply::CopyFrom(const EnvGetDatabaseNamesReply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EnvGetDatabaseNamesReply::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void EnvGetDatabaseNamesReply::Swap(EnvGetDatabaseNamesReply* other) {
  if (other != this) {
    std::swap(status_, other->status_);
    names_.Swap(&other->names_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string EnvGetDatabaseNamesReply::GetTypeName() const {
  return "upscaledb.EnvGetDatabaseNamesReply";
}


// ===================================================================

#ifndef _MSC_VER
const int EnvRenameRequest::kEnvHandleFieldNumber;
const int EnvRenameRequest::kOldnameFieldNumber;
const int EnvRenameRequest::kNewnameFieldNumber;
const int EnvRenameRequest::kFlagsFieldNumber;
#endif  // !_MSC_VER

EnvRenameRequest::EnvRenameRequest()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:upscaledb.EnvRenameRequest)
}

void EnvRenameRequest::InitAsDefaultInstance() {
}

EnvRenameRequest::EnvRenameRequest(const EnvRenameRequest& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:upscaledb.EnvRenameRequest)
}

void EnvRenameRequest::SharedCtor() {
  _cached_size_ = 0;
  env_handle_ = GOOGLE_ULONGLONG(0);
  oldname_ = 0u;
  newname_ = 0u;
  flags_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EnvRenameRequest::~EnvRenameRequest() {
  // @@protoc_insertion_point(destructor:upscaledb.EnvRenameRequest)
  SharedDtor();
}

void EnvRenameRequest::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void EnvRenameRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const EnvRenameRequest& EnvRenameRequest::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_messages_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_messages_2eproto();
#endif
  return *default_instance_;
}

EnvRenameRequest* EnvRenameRequest::default_instance_ = NULL;

EnvRenameRequest* EnvRenameRequest::New() const {
  return new EnvRenameRequest;
}

void EnvRenameRequest::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<EnvRenameRequest*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(env_handle_, flags_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool EnvRenameRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:upscaledb.EnvRenameRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 env_handle = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &env_handle_)));
          set_has_env_handle();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_oldname;
        break;
      }

      // required uint32 oldname = 2;
      case 2: {
        if (tag == 16) {
         parse_oldname:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &oldname_)));
          set_has_oldname();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_newname;
        break;
      }

      // required uint32 newname = 3;
      case 3: {
        if (tag == 24) {
         parse_newname:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &newname_)));
          set_has_newname();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_flags;
        break;
      }

      // required uint32 flags = 4;
      case 4: {
        if (tag == 32) {
         parse_flags:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &flags_)));
          set_has_flags();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:upscaledb.EnvRenameRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:upscaledb.EnvRenameRequest)
  return false;
#undef DO_
}

void EnvRenameRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:upscaledb.EnvRenameRequest)
  // required uint64 env_handle = 1;
  if (has_env_handle()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->env_handle(), output);
  }

  // required uint32 oldname = 2;
  if (has_oldname()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->oldname(), output);
  }

  // required uint32 newname = 3;
  if (has_newname()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->newname(), output);
  }

  // required uint32 flags = 4;
  if (has_flags()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->flags(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:upscaledb.EnvRenameRequest)
}

int EnvRenameRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 env_handle = 1;
    if (has_env_handle()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->env_handle());
    }

    // required uint32 oldname = 2;
    if (has_oldname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->oldname());
    }

    // required uint32 newname = 3;
    if (has_newname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->newname());
    }

    // required uint32 flags = 4;
    if (has_flags()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->flags());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EnvRenameRequest::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const EnvRenameRequest*>(&from));
}

void EnvRenameRequest::MergeFrom(const EnvRenameRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_env_handle()) {
      set_env_handle(from.env_handle());
    }
    if (from.has_oldname()) {
      set_oldname(from.oldname());
    }
    if (from.has_newname()) {
      set_newname(from.newname());
    }
    if (from.has_flags()) {
      set_flags(from.flags());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void EnvRenameRequest::CopyFrom(const EnvRenameRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EnvRenameRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void EnvRenameRequest::Swap(EnvRenameRequest* other) {
  if (other != this) {
    std::swap(env_handle_, other->env_handle_);
    std::swap(oldname_, other->oldname_);
    std::swap(newname_, other->newname_);
    std::swap(flags_, other->flags_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string EnvRenameRequest::GetTypeName() const {
  return "upscaledb.EnvRenameRequest";
}


// ===================================================================

#ifndef _MSC_VER
const int EnvRenameReply::kStatusFieldNumber;
#endif  // !_MSC_VER

EnvRenameReply::EnvRenameReply()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:upscaledb.EnvRenameReply)
}

void EnvRenameReply::InitAsDefaultInstance() {
}

EnvRenameReply::EnvRenameReply(const EnvRenameReply& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:upscaledb.EnvRenameReply)
}

void EnvRenameReply::SharedCtor() {
  _cached_size_ = 0;
  status_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EnvRenameReply::~EnvRenameReply() {
  // @@protoc_insertion_point(destructor:upscaledb.EnvRenameReply)
  SharedDtor();
}

void EnvRenameReply::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void EnvRenameReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const EnvRenameReply& EnvRenameReply::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_messages_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_messages_2eproto();
#endif
  return *default_instance_;
}

EnvRenameReply* EnvRenameReply::default_instance_ = NULL;

EnvRenameReply* EnvRenameReply::New() const {
  return new EnvRenameReply;
}

void EnvRenameReply::Clear() {
  status_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool EnvRenameReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:upscaledb.EnvRenameReply)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required sint32 status = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &status_)));
          set_has_status();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:upscaledb.EnvRenameReply)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:upscaledb.EnvRenameReply)
  return false;
#undef DO_
}

void EnvRenameReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:upscaledb.EnvRenameReply)
  // required sint32 status = 1;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(1, this->status(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:upscaledb.EnvRenameReply)
}

int EnvRenameReply::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required sint32 status = 1;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->status());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EnvRenameReply::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const EnvRenameReply*>(&from));
}

void EnvRenameReply::MergeFrom(const EnvRenameReply& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_status()) {
      set_status(from.status());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void EnvRenameReply::CopyFrom(const EnvRenameReply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EnvRenameReply::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void EnvRenameReply::Swap(EnvRenameReply* other) {
  if (other != this) {
    std::swap(status_, other->status_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string EnvRenameReply::GetTypeName() const {
  return "upscaledb.EnvRenameReply";
}


// ===================================================================

#ifndef _MSC_VER
const int EnvFlushRequest::kEnvHandleFieldNumber;
const int EnvFlushRequest::kFlagsFieldNumber;
#endif  // !_MSC_VER

EnvFlushRequest::EnvFlushRequest()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:upscaledb.EnvFlushRequest)
}

void EnvFlushRequest::InitAsDefaultInstance() {
}

EnvFlushRequest::EnvFlushRequest(const EnvFlushRequest& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:upscaledb.EnvFlushRequest)
}

void EnvFlushRequest::SharedCtor() {
  _cached_size_ = 0;
  env_handle_ = GOOGLE_ULONGLONG(0);
  flags_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EnvFlushRequest::~EnvFlushRequest() {
  // @@protoc_insertion_point(destructor:upscaledb.EnvFlushRequest)
  SharedDtor();
}

void EnvFlushRequest::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void EnvFlushRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const EnvFlushRequest& EnvFlushRequest::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_messages_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_messages_2eproto();
#endif
  return *default_instance_;
}

EnvFlushRequest* EnvFlushRequest::default_instance_ = NULL;

EnvFlushRequest* EnvFlushRequest::New() const {
  return new EnvFlushRequest;
}

void EnvFlushRequest::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<EnvFlushRequest*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(env_handle_, flags_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool EnvFlushRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:upscaledb.EnvFlushRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 env_handle = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &env_handle_)));
          set_has_env_handle();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_flags;
        break;
      }

      // required uint32 flags = 2;
      case 2: {
        if (tag == 16) {
         parse_flags:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &flags_)));
          set_has_flags();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:upscaledb.EnvFlushRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:upscaledb.EnvFlushRequest)
  return false;
#undef DO_
}

void EnvFlushRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:upscaledb.EnvFlushRequest)
  // required uint64 env_handle = 1;
  if (has_env_handle()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->env_handle(), output);
  }

  // required uint32 flags = 2;
  if (has_flags()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->flags(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:upscaledb.EnvFlushRequest)
}

int EnvFlushRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 env_handle = 1;
    if (has_env_handle()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->env_handle());
    }

    // required uint32 flags = 2;
    if (has_flags()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->flags());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EnvFlushRequest::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const EnvFlushRequest*>(&from));
}

void EnvFlushRequest::MergeFrom(const EnvFlushRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_env_handle()) {
      set_env_handle(from.env_handle());
    }
    if (from.has_flags()) {
      set_flags(from.flags());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void EnvFlushRequest::CopyFrom(const EnvFlushRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EnvFlushRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void EnvFlushRequest::Swap(EnvFlushRequest* other) {
  if (other != this) {
    std::swap(env_handle_, other->env_handle_);
    std::swap(flags_, other->flags_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string EnvFlushRequest::GetTypeName() const {
  return "upscaledb.EnvFlushRequest";
}


// ===================================================================

#ifndef _MSC_VER
const int EnvFlushReply::kStatusFieldNumber;
#endif  // !_MSC_VER

EnvFlushReply::EnvFlushReply()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:upscaledb.EnvFlushReply)
}

void EnvFlushReply::InitAsDefaultInstance() {
}

EnvFlushReply::EnvFlushReply(const EnvFlushReply& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:upscaledb.EnvFlushReply)
}

void EnvFlushReply::SharedCtor() {
  _cached_size_ = 0;
  status_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EnvFlushReply::~EnvFlushReply() {
  // @@protoc_insertion_point(destructor:upscaledb.EnvFlushReply)
  SharedDtor();
}

void EnvFlushReply::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void EnvFlushReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const EnvFlushReply& EnvFlushReply::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_messages_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_messages_2eproto();
#endif
  return *default_instance_;
}

EnvFlushReply* EnvFlushReply::default_instance_ = NULL;

EnvFlushReply* EnvFlushReply::New() const {
  return new EnvFlushReply;
}

void EnvFlushReply::Clear() {
  status_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool EnvFlushReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:upscaledb.EnvFlushReply)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required sint32 status = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &status_)));
          set_has_status();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:upscaledb.EnvFlushReply)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:upscaledb.EnvFlushReply)
  return false;
#undef DO_
}

void EnvFlushReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:upscaledb.EnvFlushReply)
  // required sint32 status = 1;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(1, this->status(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:upscaledb.EnvFlushReply)
}

int EnvFlushReply::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required sint32 status = 1;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->status());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EnvFlushReply::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const EnvFlushReply*>(&from));
}

void EnvFlushReply::MergeFrom(const EnvFlushReply& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_status()) {
      set_status(from.status());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void EnvFlushReply::CopyFrom(const EnvFlushReply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EnvFlushReply::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void EnvFlushReply::Swap(EnvFlushReply* other) {
  if (other != this) {
    std::swap(status_, other->status_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string EnvFlushReply::GetTypeName() const {
  return "upscaledb.EnvFlushReply";
}


// ===================================================================

#ifndef _MSC_VER
const int EnvCreateDbRequest::kEnvHandleFieldNumber;
const int EnvCreateDbRequest::kDbnameFieldNumber;
const int EnvCreateDbRequest::kFlagsFieldNumber;
const int EnvCreateDbRequest::kParamNamesFieldNumber;
const int EnvCreateDbRequest::kParamValuesFieldNumber;
#endif  // !_MSC_VER

EnvCreateDbRequest::EnvCreateDbRequest()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:upscaledb.EnvCreateDbRequest)
}

void EnvCreateDbRequest::InitAsDefaultInstance() {
}

EnvCreateDbRequest::EnvCreateDbRequest(const EnvCreateDbRequest& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:upscaledb.EnvCreateDbRequest)
}

void EnvCreateDbRequest::SharedCtor() {
  _cached_size_ = 0;
  env_handle_ = GOOGLE_ULONGLONG(0);
  dbname_ = 0u;
  flags_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EnvCreateDbRequest::~EnvCreateDbRequest() {
  // @@protoc_insertion_point(destructor:upscaledb.EnvCreateDbRequest)
  SharedDtor();
}

void EnvCreateDbRequest::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void EnvCreateDbRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const EnvCreateDbRequest& EnvCreateDbRequest::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_messages_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_messages_2eproto();
#endif
  return *default_instance_;
}

EnvCreateDbRequest* EnvCreateDbRequest::default_instance_ = NULL;

EnvCreateDbRequest* EnvCreateDbRequest::New() const {
  return new EnvCreateDbRequest;
}

void EnvCreateDbRequest::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<EnvCreateDbRequest*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(env_handle_, flags_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  param_names_.Clear();
  param_values_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool EnvCreateDbRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:upscaledb.EnvCreateDbRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 env_handle = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &env_handle_)));
          set_has_env_handle();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_dbname;
        break;
      }

      // required uint32 dbname = 2;
      case 2: {
        if (tag == 16) {
         parse_dbname:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dbname_)));
          set_has_dbname();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_flags;
        break;
      }

      // required uint32 flags = 3;
      case 3: {
        if (tag == 24) {
         parse_flags:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &flags_)));
          set_has_flags();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_param_names;
        break;
      }

      // repeated uint32 param_names = 4;
      case 4: {
        if (tag == 32) {
         parse_param_names:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 32, input, this->mutable_param_names())));
        } else if (tag == 34) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_param_names())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_param_names;
        if (input->ExpectTag(40)) goto parse_param_values;
        break;
      }

      // repeated uint64 param_values = 5;
      case 5: {
        if (tag == 40) {
         parse_param_values:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 40, input, this->mutable_param_values())));
        } else if (tag == 42) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_param_values())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_param_values;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:upscaledb.EnvCreateDbRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:upscaledb.EnvCreateDbRequest)
  return false;
#undef DO_
}

void EnvCreateDbRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:upscaledb.EnvCreateDbRequest)
  // required uint64 env_handle = 1;
  if (has_env_handle()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->env_handle(), output);
  }

  // required uint32 dbname = 2;
  if (has_dbname()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->dbname(), output);
  }

  // required uint32 flags = 3;
  if (has_flags()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->flags(), output);
  }

  // repeated uint32 param_names = 4;
  for (int i = 0; i < this->param_names_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      4, this->param_names(i), output);
  }

  // repeated uint64 param_values = 5;
  for (int i = 0; i < this->param_values_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(
      5, this->param_values(i), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:upscaledb.EnvCreateDbRequest)
}

int EnvCreateDbRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 env_handle = 1;
    if (has_env_handle()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->env_handle());
    }

    // required uint32 dbname = 2;
    if (has_dbname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->dbname());
    }

    // required uint32 flags = 3;
    if (has_flags()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->flags());
    }

  }
  // repeated uint32 param_names = 4;
  {
    int data_size = 0;
    for (int i = 0; i < this->param_names_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->param_names(i));
    }
    total_size += 1 * this->param_names_size() + data_size;
  }

  // repeated uint64 param_values = 5;
  {
    int data_size = 0;
    for (int i = 0; i < this->param_values_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt64Size(this->param_values(i));
    }
    total_size += 1 * this->param_values_size() + data_size;
  }

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EnvCreateDbRequest::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const EnvCreateDbRequest*>(&from));
}

void EnvCreateDbRequest::MergeFrom(const EnvCreateDbRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  param_names_.MergeFrom(from.param_names_);
  param_values_.MergeFrom(from.param_values_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_env_handle()) {
      set_env_handle(from.env_handle());
    }
    if (from.has_dbname()) {
      set_dbname(from.dbname());
    }
    if (from.has_flags()) {
      set_flags(from.flags());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void EnvCreateDbRequest::CopyFrom(const EnvCreateDbRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EnvCreateDbRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void EnvCreateDbRequest::Swap(EnvCreateDbRequest* other) {
  if (other != this) {
    std::swap(env_handle_, other->env_handle_);
    std::swap(dbname_, other->dbname_);
    std::swap(flags_, other->flags_);
    param_names_.Swap(&other->param_names_);
    param_values_.Swap(&other->param_values_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string EnvCreateDbRequest::GetTypeName() const {
  return "upscaledb.EnvCreateDbRequest";
}


// ===================================================================

#ifndef _MSC_VER
const int EnvCreateDbReply::kStatusFieldNumber;
const int EnvCreateDbReply::kDbHandleFieldNumber;
const int EnvCreateDbReply::kDbFlagsFieldNumber;
#endif  // !_MSC_VER

EnvCreateDbReply::EnvCreateDbReply()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:upscaledb.EnvCreateDbReply)
}

void EnvCreateDbReply::InitAsDefaultInstance() {
}

EnvCreateDbReply::EnvCreateDbReply(const EnvCreateDbReply& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:upscaledb.EnvCreateDbReply)
}

void EnvCreateDbReply::SharedCtor() {
  _cached_size_ = 0;
  status_ = 0;
  db_handle_ = GOOGLE_ULONGLONG(0);
  db_flags_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EnvCreateDbReply::~EnvCreateDbReply() {
  // @@protoc_insertion_point(destructor:upscaledb.EnvCreateDbReply)
  SharedDtor();
}

void EnvCreateDbReply::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void EnvCreateDbReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const EnvCreateDbReply& EnvCreateDbReply::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_messages_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_messages_2eproto();
#endif
  return *default_instance_;
}

EnvCreateDbReply* EnvCreateDbReply::default_instance_ = NULL;

EnvCreateDbReply* EnvCreateDbReply::New() const {
  return new EnvCreateDbReply;
}

void EnvCreateDbReply::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<EnvCreateDbReply*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(db_handle_, db_flags_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool EnvCreateDbReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:upscaledb.EnvCreateDbReply)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required sint32 status = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &status_)));
          set_has_status();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_db_handle;
        break;
      }

      // optional uint64 db_handle = 2;
      case 2: {
        if (tag == 16) {
         parse_db_handle:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &db_handle_)));
          set_has_db_handle();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_db_flags;
        break;
      }

      // optional uint32 db_flags = 3;
      case 3: {
        if (tag == 24) {
         parse_db_flags:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &db_flags_)));
          set_has_db_flags();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:upscaledb.EnvCreateDbReply)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:upscaledb.EnvCreateDbReply)
  return false;
#undef DO_
}

void EnvCreateDbReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:upscaledb.EnvCreateDbReply)
  // required sint32 status = 1;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(1, this->status(), output);
  }

  // optional uint64 db_handle = 2;
  if (has_db_handle()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->db_handle(), output);
  }

  // optional uint32 db_flags = 3;
  if (has_db_flags()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->db_flags(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:upscaledb.EnvCreateDbReply)
}

int EnvCreateDbReply::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required sint32 status = 1;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->status());
    }

    // optional uint64 db_handle = 2;
    if (has_db_handle()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->db_handle());
    }

    // optional uint32 db_flags = 3;
    if (has_db_flags()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->db_flags());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EnvCreateDbReply::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const EnvCreateDbReply*>(&from));
}

void EnvCreateDbReply::MergeFrom(const EnvCreateDbReply& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_status()) {
      set_status(from.status());
    }
    if (from.has_db_handle()) {
      set_db_handle(from.db_handle());
    }
    if (from.has_db_flags()) {
      set_db_flags(from.db_flags());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void EnvCreateDbReply::CopyFrom(const EnvCreateDbReply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EnvCreateDbReply::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void EnvCreateDbReply::Swap(EnvCreateDbReply* other) {
  if (other != this) {
    std::swap(status_, other->status_);
    std::swap(db_handle_, other->db_handle_);
    std::swap(db_flags_, other->db_flags_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string EnvCreateDbReply::GetTypeName() const {
  return "upscaledb.EnvCreateDbReply";
}


// ===================================================================

#ifndef _MSC_VER
const int EnvOpenDbRequest::kEnvHandleFieldNumber;
const int EnvOpenDbRequest::kDbnameFieldNumber;
const int EnvOpenDbRequest::kFlagsFieldNumber;
const int EnvOpenDbRequest::kParamNamesFieldNumber;
const int EnvOpenDbRequest::kParamValuesFieldNumber;
#endif  // !_MSC_VER

EnvOpenDbRequest::EnvOpenDbRequest()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:upscaledb.EnvOpenDbRequest)
}

void EnvOpenDbRequest::InitAsDefaultInstance() {
}

EnvOpenDbRequest::EnvOpenDbRequest(const EnvOpenDbRequest& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:upscaledb.EnvOpenDbRequest)
}

void EnvOpenDbRequest::SharedCtor() {
  _cached_size_ = 0;
  env_handle_ = GOOGLE_ULONGLONG(0);
  dbname_ = 0u;
  flags_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EnvOpenDbRequest::~EnvOpenDbRequest() {
  // @@protoc_insertion_point(destructor:upscaledb.EnvOpenDbRequest)
  SharedDtor();
}

void EnvOpenDbRequest::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void EnvOpenDbRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const EnvOpenDbRequest& EnvOpenDbRequest::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_messages_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_messages_2eproto();
#endif
  return *default_instance_;
}

EnvOpenDbRequest* EnvOpenDbRequest::default_instance_ = NULL;

EnvOpenDbRequest* EnvOpenDbRequest::New() const {
  return new EnvOpenDbRequest;
}

void EnvOpenDbRequest::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<EnvOpenDbRequest*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(env_handle_, flags_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  param_names_.Clear();
  param_values_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool EnvOpenDbRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:upscaledb.EnvOpenDbRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 env_handle = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &env_handle_)));
          set_has_env_handle();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_dbname;
        break;
      }

      // required uint32 dbname = 2;
      case 2: {
        if (tag == 16) {
         parse_dbname:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dbname_)));
          set_has_dbname();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_flags;
        break;
      }

      // required uint32 flags = 3;
      case 3: {
        if (tag == 24) {
         parse_flags:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &flags_)));
          set_has_flags();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_param_names;
        break;
      }

      // repeated uint32 param_names = 4;
      case 4: {
        if (tag == 32) {
         parse_param_names:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 32, input, this->mutable_param_names())));
        } else if (tag == 34) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_param_names())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_param_names;
        if (input->ExpectTag(40)) goto parse_param_values;
        break;
      }

      // repeated uint64 param_values = 5;
      case 5: {
        if (tag == 40) {
         parse_param_values:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 40, input, this->mutable_param_values())));
        } else if (tag == 42) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_param_values())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_param_values;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:upscaledb.EnvOpenDbRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:upscaledb.EnvOpenDbRequest)
  return false;
#undef DO_
}

void EnvOpenDbRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:upscaledb.EnvOpenDbRequest)
  // required uint64 env_handle = 1;
  if (has_env_handle()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->env_handle(), output);
  }

  // required uint32 dbname = 2;
  if (has_dbname()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->dbname(), output);
  }

  // required uint32 flags = 3;
  if (has_flags()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->flags(), output);
  }

  // repeated uint32 param_names = 4;
  for (int i = 0; i < this->param_names_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      4, this->param_names(i), output);
  }

  // repeated uint64 param_values = 5;
  for (int i = 0; i < this->param_values_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(
      5, this->param_values(i), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:upscaledb.EnvOpenDbRequest)
}

int EnvOpenDbRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 env_handle = 1;
    if (has_env_handle()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->env_handle());
    }

    // required uint32 dbname = 2;
    if (has_dbname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->dbname());
    }

    // required uint32 flags = 3;
    if (has_flags()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->flags());
    }

  }
  // repeated uint32 param_names = 4;
  {
    int data_size = 0;
    for (int i = 0; i < this->param_names_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->param_names(i));
    }
    total_size += 1 * this->param_names_size() + data_size;
  }

  // repeated uint64 param_values = 5;
  {
    int data_size = 0;
    for (int i = 0; i < this->param_values_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt64Size(this->param_values(i));
    }
    total_size += 1 * this->param_values_size() + data_size;
  }

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EnvOpenDbRequest::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const EnvOpenDbRequest*>(&from));
}

void EnvOpenDbRequest::MergeFrom(const EnvOpenDbRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  param_names_.MergeFrom(from.param_names_);
  param_values_.MergeFrom(from.param_values_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_env_handle()) {
      set_env_handle(from.env_handle());
    }
    if (from.has_dbname()) {
      set_dbname(from.dbname());
    }
    if (from.has_flags()) {
      set_flags(from.flags());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void EnvOpenDbRequest::CopyFrom(const EnvOpenDbRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EnvOpenDbRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void EnvOpenDbRequest::Swap(EnvOpenDbRequest* other) {
  if (other != this) {
    std::swap(env_handle_, other->env_handle_);
    std::swap(dbname_, other->dbname_);
    std::swap(flags_, other->flags_);
    param_names_.Swap(&other->param_names_);
    param_values_.Swap(&other->param_values_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string EnvOpenDbRequest::GetTypeName() const {
  return "upscaledb.EnvOpenDbRequest";
}


// ===================================================================

#ifndef _MSC_VER
const int EnvOpenDbReply::kStatusFieldNumber;
const int EnvOpenDbReply::kDbHandleFieldNumber;
const int EnvOpenDbReply::kDbFlagsFieldNumber;
#endif  // !_MSC_VER

EnvOpenDbReply::EnvOpenDbReply()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:upscaledb.EnvOpenDbReply)
}

void EnvOpenDbReply::InitAsDefaultInstance() {
}

EnvOpenDbReply::EnvOpenDbReply(const EnvOpenDbReply& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:upscaledb.EnvOpenDbReply)
}

void EnvOpenDbReply::SharedCtor() {
  _cached_size_ = 0;
  status_ = 0;
  db_handle_ = GOOGLE_ULONGLONG(0);
  db_flags_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EnvOpenDbReply::~EnvOpenDbReply() {
  // @@protoc_insertion_point(destructor:upscaledb.EnvOpenDbReply)
  SharedDtor();
}

void EnvOpenDbReply::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void EnvOpenDbReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const EnvOpenDbReply& EnvOpenDbReply::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_messages_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_messages_2eproto();
#endif
  return *default_instance_;
}

EnvOpenDbReply* EnvOpenDbReply::default_instance_ = NULL;

EnvOpenDbReply* EnvOpenDbReply::New() const {
  return new EnvOpenDbReply;
}

void EnvOpenDbReply::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<EnvOpenDbReply*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(db_handle_, db_flags_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool EnvOpenDbReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:upscaledb.EnvOpenDbReply)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required sint32 status = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &status_)));
          set_has_status();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_db_handle;
        break;
      }

      // optional uint64 db_handle = 2;
      case 2: {
        if (tag == 16) {
         parse_db_handle:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &db_handle_)));
          set_has_db_handle();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_db_flags;
        break;
      }

      // optional uint32 db_flags = 3;
      case 3: {
        if (tag == 24) {
         parse_db_flags:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &db_flags_)));
          set_has_db_flags();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:upscaledb.EnvOpenDbReply)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:upscaledb.EnvOpenDbReply)
  return false;
#undef DO_
}

void EnvOpenDbReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:upscaledb.EnvOpenDbReply)
  // required sint32 status = 1;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(1, this->status(), output);
  }

  // optional uint64 db_handle = 2;
  if (has_db_handle()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->db_handle(), output);
  }

  // optional uint32 db_flags = 3;
  if (has_db_flags()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->db_flags(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:upscaledb.EnvOpenDbReply)
}

int EnvOpenDbReply::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required sint32 status = 1;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->status());
    }

    // optional uint64 db_handle = 2;
    if (has_db_handle()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->db_handle());
    }

    // optional uint32 db_flags = 3;
    if (has_db_flags()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->db_flags());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EnvOpenDbReply::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const EnvOpenDbReply*>(&from));
}

void EnvOpenDbReply::MergeFrom(const EnvOpenDbReply& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_status()) {
      set_status(from.status());
    }
    if (from.has_db_handle()) {
      set_db_handle(from.db_handle());
    }
    if (from.has_db_flags()) {
      set_db_flags(from.db_flags());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void EnvOpenDbReply::CopyFrom(const EnvOpenDbReply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EnvOpenDbReply::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void EnvOpenDbReply::Swap(EnvOpenDbReply* other) {
  if (other != this) {
    std::swap(status_, other->status_);
    std::swap(db_handle_, other->db_handle_);
    std::swap(db_flags_, other->db_flags_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string EnvOpenDbReply::GetTypeName() const {
  return "upscaledb.EnvOpenDbReply";
}


// ===================================================================

#ifndef _MSC_VER
const int EnvEraseDbRequest::kEnvHandleFieldNumber;
const int EnvEraseDbRequest::kNameFieldNumber;
const int EnvEraseDbRequest::kFlagsFieldNumber;
#endif  // !_MSC_VER

EnvEraseDbRequest::EnvEraseDbRequest()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:upscaledb.EnvEraseDbRequest)
}

void EnvEraseDbRequest::InitAsDefaultInstance() {
}

EnvEraseDbRequest::EnvEraseDbRequest(const EnvEraseDbRequest& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:upscaledb.EnvEraseDbRequest)
}

void EnvEraseDbRequest::SharedCtor() {
  _cached_size_ = 0;
  env_handle_ = GOOGLE_ULONGLONG(0);
  name_ = 0u;
  flags_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EnvEraseDbRequest::~EnvEraseDbRequest() {
  // @@protoc_insertion_point(destructor:upscaledb.EnvEraseDbRequest)
  SharedDtor();
}

void EnvEraseDbRequest::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void EnvEraseDbRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const EnvEraseDbRequest& EnvEraseDbRequest::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_messages_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_messages_2eproto();
#endif
  return *default_instance_;
}

EnvEraseDbRequest* EnvEraseDbRequest::default_instance_ = NULL;

EnvEraseDbRequest* EnvEraseDbRequest::New() const {
  return new EnvEraseDbRequest;
}

void EnvEraseDbRequest::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<EnvEraseDbRequest*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(env_handle_, flags_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool EnvEraseDbRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:upscaledb.EnvEraseDbRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 env_handle = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &env_handle_)));
          set_has_env_handle();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_name;
        break;
      }

      // required uint32 name = 2;
      case 2: {
        if (tag == 16) {
         parse_name:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &name_)));
          set_has_name();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_flags;
        break;
      }

      // required uint32 flags = 3;
      case 3: {
        if (tag == 24) {
         parse_flags:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &flags_)));
          set_has_flags();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:upscaledb.EnvEraseDbRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:upscaledb.EnvEraseDbRequest)
  return false;
#undef DO_
}

void EnvEraseDbRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:upscaledb.EnvEraseDbRequest)
  // required uint64 env_handle = 1;
  if (has_env_handle()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->env_handle(), output);
  }

  // required uint32 name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->name(), output);
  }

  // required uint32 flags = 3;
  if (has_flags()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->flags(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:upscaledb.EnvEraseDbRequest)
}

int EnvEraseDbRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 env_handle = 1;
    if (has_env_handle()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->env_handle());
    }

    // required uint32 name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->name());
    }

    // required uint32 flags = 3;
    if (has_flags()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->flags());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EnvEraseDbRequest::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const EnvEraseDbRequest*>(&from));
}

void EnvEraseDbRequest::MergeFrom(const EnvEraseDbRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_env_handle()) {
      set_env_handle(from.env_handle());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_flags()) {
      set_flags(from.flags());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void EnvEraseDbRequest::CopyFrom(const EnvEraseDbRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EnvEraseDbRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void EnvEraseDbRequest::Swap(EnvEraseDbRequest* other) {
  if (other != this) {
    std::swap(env_handle_, other->env_handle_);
    std::swap(name_, other->name_);
    std::swap(flags_, other->flags_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string EnvEraseDbRequest::GetTypeName() const {
  return "upscaledb.EnvEraseDbRequest";
}


// ===================================================================

#ifndef _MSC_VER
const int EnvEraseDbReply::kStatusFieldNumber;
#endif  // !_MSC_VER

EnvEraseDbReply::EnvEraseDbReply()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:upscaledb.EnvEraseDbReply)
}

void EnvEraseDbReply::InitAsDefaultInstance() {
}

EnvEraseDbReply::EnvEraseDbReply(const EnvEraseDbReply& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:upscaledb.EnvEraseDbReply)
}

void EnvEraseDbReply::SharedCtor() {
  _cached_size_ = 0;
  status_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EnvEraseDbReply::~EnvEraseDbReply() {
  // @@protoc_insertion_point(destructor:upscaledb.EnvEraseDbReply)
  SharedDtor();
}

void EnvEraseDbReply::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void EnvEraseDbReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const EnvEraseDbReply& EnvEraseDbReply::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_messages_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_messages_2eproto();
#endif
  return *default_instance_;
}

EnvEraseDbReply* EnvEraseDbReply::default_instance_ = NULL;

EnvEraseDbReply* EnvEraseDbReply::New() const {
  return new EnvEraseDbReply;
}

void EnvEraseDbReply::Clear() {
  status_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool EnvEraseDbReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:upscaledb.EnvEraseDbReply)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required sint32 status = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &status_)));
          set_has_status();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:upscaledb.EnvEraseDbReply)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:upscaledb.EnvEraseDbReply)
  return false;
#undef DO_
}

void EnvEraseDbReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:upscaledb.EnvEraseDbReply)
  // required sint32 status = 1;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(1, this->status(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:upscaledb.EnvEraseDbReply)
}

int EnvEraseDbReply::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required sint32 status = 1;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->status());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EnvEraseDbReply::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const EnvEraseDbReply*>(&from));
}

void EnvEraseDbReply::MergeFrom(const EnvEraseDbReply& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_status()) {
      set_status(from.status());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void EnvEraseDbReply::CopyFrom(const EnvEraseDbReply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EnvEraseDbReply::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void EnvEraseDbReply::Swap(EnvEraseDbReply* other) {
  if (other != this) {
    std::swap(status_, other->status_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string EnvEraseDbReply::GetTypeName() const {
  return "upscaledb.EnvEraseDbReply";
}


// ===================================================================

#ifndef _MSC_VER
const int DbCloseRequest::kDbHandleFieldNumber;
const int DbCloseRequest::kFlagsFieldNumber;
#endif  // !_MSC_VER

DbCloseRequest::DbCloseRequest()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:upscaledb.DbCloseRequest)
}

void DbCloseRequest::InitAsDefaultInstance() {
}

DbCloseRequest::DbCloseRequest(const DbCloseRequest& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:upscaledb.DbCloseRequest)
}

void DbCloseRequest::SharedCtor() {
  _cached_size_ = 0;
  db_handle_ = GOOGLE_ULONGLONG(0);
  flags_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DbCloseRequest::~DbCloseRequest() {
  // @@protoc_insertion_point(destructor:upscaledb.DbCloseRequest)
  SharedDtor();
}

void DbCloseRequest::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void DbCloseRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const DbCloseRequest& DbCloseRequest::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_messages_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_messages_2eproto();
#endif
  return *default_instance_;
}

DbCloseRequest* DbCloseRequest::default_instance_ = NULL;

DbCloseRequest* DbCloseRequest::New() const {
  return new DbCloseRequest;
}

void DbCloseRequest::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<DbCloseRequest*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(db_handle_, flags_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool DbCloseRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:upscaledb.DbCloseRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 db_handle = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &db_handle_)));
          set_has_db_handle();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_flags;
        break;
      }

      // required uint32 flags = 2;
      case 2: {
        if (tag == 16) {
         parse_flags:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &flags_)));
          set_has_flags();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:upscaledb.DbCloseRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:upscaledb.DbCloseRequest)
  return false;
#undef DO_
}

void DbCloseRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:upscaledb.DbCloseRequest)
  // required uint64 db_handle = 1;
  if (has_db_handle()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->db_handle(), output);
  }

  // required uint32 flags = 2;
  if (has_flags()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->flags(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:upscaledb.DbCloseRequest)
}

int DbCloseRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 db_handle = 1;
    if (has_db_handle()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->db_handle());
    }

    // required uint32 flags = 2;
    if (has_flags()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->flags());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DbCloseRequest::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const DbCloseRequest*>(&from));
}

void DbCloseRequest::MergeFrom(const DbCloseRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_db_handle()) {
      set_db_handle(from.db_handle());
    }
    if (from.has_flags()) {
      set_flags(from.flags());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void DbCloseRequest::CopyFrom(const DbCloseRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DbCloseRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void DbCloseRequest::Swap(DbCloseRequest* other) {
  if (other != this) {
    std::swap(db_handle_, other->db_handle_);
    std::swap(flags_, other->flags_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string DbCloseRequest::GetTypeName() const {
  return "upscaledb.DbCloseRequest";
}


// ===================================================================

#ifndef _MSC_VER
const int DbCloseReply::kStatusFieldNumber;
#endif  // !_MSC_VER

DbCloseReply::DbCloseReply()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:upscaledb.DbCloseReply)
}

void DbCloseReply::InitAsDefaultInstance() {
}

DbCloseReply::DbCloseReply(const DbCloseReply& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:upscaledb.DbCloseReply)
}

void DbCloseReply::SharedCtor() {
  _cached_size_ = 0;
  status_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DbCloseReply::~DbCloseReply() {
  // @@protoc_insertion_point(destructor:upscaledb.DbCloseReply)
  SharedDtor();
}

void DbCloseReply::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void DbCloseReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const DbCloseReply& DbCloseReply::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_messages_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_messages_2eproto();
#endif
  return *default_instance_;
}

DbCloseReply* DbCloseReply::default_instance_ = NULL;

DbCloseReply* DbCloseReply::New() const {
  return new DbCloseReply;
}

void DbCloseReply::Clear() {
  status_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool DbCloseReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:upscaledb.DbCloseReply)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required sint32 status = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &status_)));
          set_has_status();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:upscaledb.DbCloseReply)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:upscaledb.DbCloseReply)
  return false;
#undef DO_
}

void DbCloseReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:upscaledb.DbCloseReply)
  // required sint32 status = 1;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(1, this->status(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:upscaledb.DbCloseReply)
}

int DbCloseReply::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required sint32 status = 1;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->status());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DbCloseReply::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const DbCloseReply*>(&from));
}

void DbCloseReply::MergeFrom(const DbCloseReply& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_status()) {
      set_status(from.status());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void DbCloseReply::CopyFrom(const DbCloseReply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DbCloseReply::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void DbCloseReply::Swap(DbCloseReply* other) {
  if (other != this) {
    std::swap(status_, other->status_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string DbCloseReply::GetTypeName() const {
  return "upscaledb.DbCloseReply";
}


// ===================================================================

#ifndef _MSC_VER
const int DbGetParametersRequest::kDbHandleFieldNumber;
const int DbGetParametersRequest::kNamesFieldNumber;
#endif  // !_MSC_VER

DbGetParametersRequest::DbGetParametersRequest()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:upscaledb.DbGetParametersRequest)
}

void DbGetParametersRequest::InitAsDefaultInstance() {
}

DbGetParametersRequest::DbGetParametersRequest(const DbGetParametersRequest& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:upscaledb.DbGetParametersRequest)
}

void DbGetParametersRequest::SharedCtor() {
  _cached_size_ = 0;
  db_handle_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DbGetParametersRequest::~DbGetParametersRequest() {
  // @@protoc_insertion_point(destructor:upscaledb.DbGetParametersRequest)
  SharedDtor();
}

void DbGetParametersRequest::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void DbGetParametersRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const DbGetParametersRequest& DbGetParametersRequest::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_messages_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_messages_2eproto();
#endif
  return *default_instance_;
}

DbGetParametersRequest* DbGetParametersRequest::default_instance_ = NULL;

DbGetParametersRequest* DbGetParametersRequest::New() const {
  return new DbGetParametersRequest;
}

void DbGetParametersRequest::Clear() {
  db_handle_ = GOOGLE_ULONGLONG(0);
  names_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool DbGetParametersRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:upscaledb.DbGetParametersRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 db_handle = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &db_handle_)));
          set_has_db_handle();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_names;
        break;
      }

      // repeated uint32 names = 2;
      case 2: {
        if (tag == 16) {
         parse_names:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 16, input, this->mutable_names())));
        } else if (tag == 18) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_names())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_names;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:upscaledb.DbGetParametersRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:upscaledb.DbGetParametersRequest)
  return false;
#undef DO_
}

void DbGetParametersRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:upscaledb.DbGetParametersRequest)
  // required uint64 db_handle = 1;
  if (has_db_handle()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->db_handle(), output);
  }

  // repeated uint32 names = 2;
  for (int i = 0; i < this->names_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      2, this->names(i), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:upscaledb.DbGetParametersRequest)
}

int DbGetParametersRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 db_handle = 1;
    if (has_db_handle()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->db_handle());
    }

  }
  // repeated uint32 names = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->names_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->names(i));
    }
    total_size += 1 * this->names_size() + data_size;
  }

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DbGetParametersRequest::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const DbGetParametersRequest*>(&from));
}

void DbGetParametersRequest::MergeFrom(const DbGetParametersRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  names_.MergeFrom(from.names_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_db_handle()) {
      set_db_handle(from.db_handle());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void DbGetParametersRequest::CopyFrom(const DbGetParametersRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DbGetParametersRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void DbGetParametersRequest::Swap(DbGetParametersRequest* other) {
  if (other != this) {
    std::swap(db_handle_, other->db_handle_);
    names_.Swap(&other->names_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string DbGetParametersRequest::GetTypeName() const {
  return "upscaledb.DbGetParametersRequest";
}


// ===================================================================

#ifndef _MSC_VER
const int DbGetParametersReply::kStatusFieldNumber;
const int DbGetParametersReply::kMaxEnvDatabasesFieldNumber;
const int DbGetParametersReply::kFlagsFieldNumber;
const int DbGetParametersReply::kKeySizeFieldNumber;
const int DbGetParametersReply::kDbnameFieldNumber;
const int DbGetParametersReply::kKeysPerPageFieldNumber;
const int DbGetParametersReply::kKeyTypeFieldNumber;
const int DbGetParametersReply::kRecordSizeFieldNumber;
#endif  // !_MSC_VER

DbGetParametersReply::DbGetParametersReply()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:upscaledb.DbGetParametersReply)
}

void DbGetParametersReply::InitAsDefaultInstance() {
}

DbGetParametersReply::DbGetParametersReply(const DbGetParametersReply& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:upscaledb.DbGetParametersReply)
}

void DbGetParametersReply::SharedCtor() {
  _cached_size_ = 0;
  status_ = 0;
  max_env_databases_ = 0u;
  flags_ = 0u;
  key_size_ = 0u;
  dbname_ = 0u;
  keys_per_page_ = 0u;
  key_type_ = 0u;
  record_size_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DbGetParametersReply::~DbGetParametersReply() {
  // @@protoc_insertion_point(destructor:upscaledb.DbGetParametersReply)
  SharedDtor();
}

void DbGetParametersReply::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void DbGetParametersReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const DbGetParametersReply& DbGetParametersReply::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_messages_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_messages_2eproto();
#endif
  return *default_instance_;
}

DbGetParametersReply* DbGetParametersReply::default_instance_ = NULL;

DbGetParametersReply* DbGetParametersReply::New() const {
  return new DbGetParametersReply;
}

void DbGetParametersReply::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<DbGetParametersReply*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(status_, record_size_);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool DbGetParametersReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:upscaledb.DbGetParametersReply)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required sint32 status = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &status_)));
          set_has_status();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_max_env_databases;
        break;
      }

      // optional uint32 max_env_databases = 2;
      case 2: {
        if (tag == 16) {
         parse_max_env_databases:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &max_env_databases_)));
          set_has_max_env_databases();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_flags;
        break;
      }

      // optional uint32 flags = 3;
      case 3: {
        if (tag == 24) {
         parse_flags:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &flags_)));
          set_has_flags();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_key_size;
        break;
      }

      // optional uint32 key_size = 4;
      case 4: {
        if (tag == 32) {
         parse_key_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &key_size_)));
          set_has_key_size();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_dbname;
        break;
      }

      // optional uint32 dbname = 5;
      case 5: {
        if (tag == 40) {
         parse_dbname:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dbname_)));
          set_has_dbname();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_keys_per_page;
        break;
      }

      // optional uint32 keys_per_page = 6;
      case 6: {
        if (tag == 48) {
         parse_keys_per_page:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &keys_per_page_)));
          set_has_keys_per_page();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_key_type;
        break;
      }

      // optional uint32 key_type = 7;
      case 7: {
        if (tag == 56) {
         parse_key_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &key_type_)));
          set_has_key_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_record_size;
        break;
      }

      // optional uint32 record_size = 8;
      case 8: {
        if (tag == 64) {
         parse_record_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &record_size_)));
          set_has_record_size();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:upscaledb.DbGetParametersReply)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:upscaledb.DbGetParametersReply)
  return false;
#undef DO_
}

void DbGetParametersReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:upscaledb.DbGetParametersReply)
  // required sint32 status = 1;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(1, this->status(), output);
  }

  // optional uint32 max_env_databases = 2;
  if (has_max_env_databases()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->max_env_databases(), output);
  }

  // optional uint32 flags = 3;
  if (has_flags()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->flags(), output);
  }

  // optional uint32 key_size = 4;
  if (has_key_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->key_size(), output);
  }

  // optional uint32 dbname = 5;
  if (has_dbname()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->dbname(), output);
  }

  // optional uint32 keys_per_page = 6;
  if (has_keys_per_page()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->keys_per_page(), output);
  }

  // optional uint32 key_type = 7;
  if (has_key_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->key_type(), output);
  }

  // optional uint32 record_size = 8;
  if (has_record_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->record_size(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:upscaledb.DbGetParametersReply)
}

int DbGetParametersReply::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required sint32 status = 1;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->status());
    }

    // optional uint32 max_env_databases = 2;
    if (has_max_env_databases()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->max_env_databases());
    }

    // optional uint32 flags = 3;
    if (has_flags()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->flags());
    }

    // optional uint32 key_size = 4;
    if (has_key_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->key_size());
    }

    // optional uint32 dbname = 5;
    if (has_dbname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->dbname());
    }

    // optional uint32 keys_per_page = 6;
    if (has_keys_per_page()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->keys_per_page());
    }

    // optional uint32 key_type = 7;
    if (has_key_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->key_type());
    }

    // optional uint32 record_size = 8;
    if (has_record_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->record_size());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DbGetParametersReply::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const DbGetParametersReply*>(&from));
}

void DbGetParametersReply::MergeFrom(const DbGetParametersReply& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_status()) {
      set_status(from.status());
    }
    if (from.has_max_env_databases()) {
      set_max_env_databases(from.max_env_databases());
    }
    if (from.has_flags()) {
      set_flags(from.flags());
    }
    if (from.has_key_size()) {
      set_key_size(from.key_size());
    }
    if (from.has_dbname()) {
      set_dbname(from.dbname());
    }
    if (from.has_keys_per_page()) {
      set_keys_per_page(from.keys_per_page());
    }
    if (from.has_key_type()) {
      set_key_type(from.key_type());
    }
    if (from.has_record_size()) {
      set_record_size(from.record_size());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void DbGetParametersReply::CopyFrom(const DbGetParametersReply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DbGetParametersReply::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void DbGetParametersReply::Swap(DbGetParametersReply* other) {
  if (other != this) {
    std::swap(status_, other->status_);
    std::swap(max_env_databases_, other->max_env_databases_);
    std::swap(flags_, other->flags_);
    std::swap(key_size_, other->key_size_);
    std::swap(dbname_, other->dbname_);
    std::swap(keys_per_page_, other->keys_per_page_);
    std::swap(key_type_, other->key_type_);
    std::swap(record_size_, other->record_size_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string DbGetParametersReply::GetTypeName() const {
  return "upscaledb.DbGetParametersReply";
}


// ===================================================================

#ifndef _MSC_VER
const int TxnBeginRequest::kEnvHandleFieldNumber;
const int TxnBeginRequest::kFlagsFieldNumber;
const int TxnBeginRequest::kNameFieldNumber;
#endif  // !_MSC_VER

TxnBeginRequest::TxnBeginRequest()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:upscaledb.TxnBeginRequest)
}

void TxnBeginRequest::InitAsDefaultInstance() {
}

TxnBeginRequest::TxnBeginRequest(const TxnBeginRequest& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:upscaledb.TxnBeginRequest)
}

void TxnBeginRequest::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  env_handle_ = GOOGLE_ULONGLONG(0);
  flags_ = 0u;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TxnBeginRequest::~TxnBeginRequest() {
  // @@protoc_insertion_point(destructor:upscaledb.TxnBeginRequest)
  SharedDtor();
}

void TxnBeginRequest::SharedDtor() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void TxnBeginRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const TxnBeginRequest& TxnBeginRequest::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_messages_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_messages_2eproto();
#endif
  return *default_instance_;
}

TxnBeginRequest* TxnBeginRequest::default_instance_ = NULL;

TxnBeginRequest* TxnBeginRequest::New() const {
  return new TxnBeginRequest;
}

void TxnBeginRequest::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    env_handle_ = GOOGLE_ULONGLONG(0);
    flags_ = 0u;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        name_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool TxnBeginRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:upscaledb.TxnBeginRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 env_handle = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &env_handle_)));
          set_has_env_handle();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_flags;
        break;
      }

      // required uint32 flags = 2;
      case 2: {
        if (tag == 16) {
         parse_flags:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &flags_)));
          set_has_flags();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_name;
        break;
      }

      // optional string name = 3;
      case 3: {
        if (tag == 26) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:upscaledb.TxnBeginRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:upscaledb.TxnBeginRequest)
  return false;
#undef DO_
}

void TxnBeginRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:upscaledb.TxnBeginRequest)
  // required uint64 env_handle = 1;
  if (has_env_handle()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->env_handle(), output);
  }

  // required uint32 flags = 2;
  if (has_flags()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->flags(), output);
  }

  // optional string name = 3;
  if (has_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->name(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:upscaledb.TxnBeginRequest)
}

int TxnBeginRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 env_handle = 1;
    if (has_env_handle()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->env_handle());
    }

    // required uint32 flags = 2;
    if (has_flags()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->flags());
    }

    // optional string name = 3;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TxnBeginRequest::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const TxnBeginRequest*>(&from));
}

void TxnBeginRequest::MergeFrom(const TxnBeginRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_env_handle()) {
      set_env_handle(from.env_handle());
    }
    if (from.has_flags()) {
      set_flags(from.flags());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void TxnBeginRequest::CopyFrom(const TxnBeginRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TxnBeginRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void TxnBeginRequest::Swap(TxnBeginRequest* other) {
  if (other != this) {
    std::swap(env_handle_, other->env_handle_);
    std::swap(flags_, other->flags_);
    std::swap(name_, other->name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string TxnBeginRequest::GetTypeName() const {
  return "upscaledb.TxnBeginRequest";
}


// ===================================================================

#ifndef _MSC_VER
const int TxnBeginReply::kStatusFieldNumber;
const int TxnBeginReply::kTxnHandleFieldNumber;
#endif  // !_MSC_VER

TxnBeginReply::TxnBeginReply()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:upscaledb.TxnBeginReply)
}

void TxnBeginReply::InitAsDefaultInstance() {
}

TxnBeginReply::TxnBeginReply(const TxnBeginReply& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:upscaledb.TxnBeginReply)
}

void TxnBeginReply::SharedCtor() {
  _cached_size_ = 0;
  status_ = 0;
  txn_handle_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TxnBeginReply::~TxnBeginReply() {
  // @@protoc_insertion_point(destructor:upscaledb.TxnBeginReply)
  SharedDtor();
}

void TxnBeginReply::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void TxnBeginReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const TxnBeginReply& TxnBeginReply::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_messages_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_messages_2eproto();
#endif
  return *default_instance_;
}

TxnBeginReply* TxnBeginReply::default_instance_ = NULL;

TxnBeginReply* TxnBeginReply::New() const {
  return new TxnBeginReply;
}

void TxnBeginReply::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TxnBeginReply*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(txn_handle_, status_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool TxnBeginReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:upscaledb.TxnBeginReply)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required sint32 status = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &status_)));
          set_has_status();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_txn_handle;
        break;
      }

      // required uint64 txn_handle = 2;
      case 2: {
        if (tag == 16) {
         parse_txn_handle:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &txn_handle_)));
          set_has_txn_handle();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:upscaledb.TxnBeginReply)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:upscaledb.TxnBeginReply)
  return false;
#undef DO_
}

void TxnBeginReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:upscaledb.TxnBeginReply)
  // required sint32 status = 1;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(1, this->status(), output);
  }

  // required uint64 txn_handle = 2;
  if (has_txn_handle()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->txn_handle(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:upscaledb.TxnBeginReply)
}

int TxnBeginReply::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required sint32 status = 1;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->status());
    }

    // required uint64 txn_handle = 2;
    if (has_txn_handle()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->txn_handle());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TxnBeginReply::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const TxnBeginReply*>(&from));
}

void TxnBeginReply::MergeFrom(const TxnBeginReply& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_status()) {
      set_status(from.status());
    }
    if (from.has_txn_handle()) {
      set_txn_handle(from.txn_handle());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void TxnBeginReply::CopyFrom(const TxnBeginReply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TxnBeginReply::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void TxnBeginReply::Swap(TxnBeginReply* other) {
  if (other != this) {
    std::swap(status_, other->status_);
    std::swap(txn_handle_, other->txn_handle_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string TxnBeginReply::GetTypeName() const {
  return "upscaledb.TxnBeginReply";
}


// ===================================================================

#ifndef _MSC_VER
const int TxnCommitRequest::kTxnHandleFieldNumber;
const int TxnCommitRequest::kFlagsFieldNumber;
#endif  // !_MSC_VER

TxnCommitRequest::TxnCommitRequest()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:upscaledb.TxnCommitRequest)
}

void TxnCommitRequest::InitAsDefaultInstance() {
}

TxnCommitRequest::TxnCommitRequest(const TxnCommitRequest& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:upscaledb.TxnCommitRequest)
}

void TxnCommitRequest::SharedCtor() {
  _cached_size_ = 0;
  txn_handle_ = GOOGLE_ULONGLONG(0);
  flags_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TxnCommitRequest::~TxnCommitRequest() {
  // @@protoc_insertion_point(destructor:upscaledb.TxnCommitRequest)
  SharedDtor();
}

void TxnCommitRequest::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void TxnCommitRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const TxnCommitRequest& TxnCommitRequest::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_messages_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_messages_2eproto();
#endif
  return *default_instance_;
}

TxnCommitRequest* TxnCommitRequest::default_instance_ = NULL;

TxnCommitRequest* TxnCommitRequest::New() const {
  return new TxnCommitRequest;
}

void TxnCommitRequest::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TxnCommitRequest*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(txn_handle_, flags_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool TxnCommitRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:upscaledb.TxnCommitRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 txn_handle = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &txn_handle_)));
          set_has_txn_handle();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_flags;
        break;
      }

      // required uint32 flags = 2;
      case 2: {
        if (tag == 16) {
         parse_flags:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &flags_)));
          set_has_flags();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:upscaledb.TxnCommitRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:upscaledb.TxnCommitRequest)
  return false;
#undef DO_
}

void TxnCommitRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:upscaledb.TxnCommitRequest)
  // required uint64 txn_handle = 1;
  if (has_txn_handle()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->txn_handle(), output);
  }

  // required uint32 flags = 2;
  if (has_flags()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->flags(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:upscaledb.TxnCommitRequest)
}

int TxnCommitRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 txn_handle = 1;
    if (has_txn_handle()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->txn_handle());
    }

    // required uint32 flags = 2;
    if (has_flags()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->flags());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TxnCommitRequest::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const TxnCommitRequest*>(&from));
}

void TxnCommitRequest::MergeFrom(const TxnCommitRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_txn_handle()) {
      set_txn_handle(from.txn_handle());
    }
    if (from.has_flags()) {
      set_flags(from.flags());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void TxnCommitRequest::CopyFrom(const TxnCommitRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TxnCommitRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void TxnCommitRequest::Swap(TxnCommitRequest* other) {
  if (other != this) {
    std::swap(txn_handle_, other->txn_handle_);
    std::swap(flags_, other->flags_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string TxnCommitRequest::GetTypeName() const {
  return "upscaledb.TxnCommitRequest";
}


// ===================================================================

#ifndef _MSC_VER
const int TxnCommitReply::kStatusFieldNumber;
#endif  // !_MSC_VER

TxnCommitReply::TxnCommitReply()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:upscaledb.TxnCommitReply)
}

void TxnCommitReply::InitAsDefaultInstance() {
}

TxnCommitReply::TxnCommitReply(const TxnCommitReply& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:upscaledb.TxnCommitReply)
}

void TxnCommitReply::SharedCtor() {
  _cached_size_ = 0;
  status_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TxnCommitReply::~TxnCommitReply() {
  // @@protoc_insertion_point(destructor:upscaledb.TxnCommitReply)
  SharedDtor();
}

void TxnCommitReply::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void TxnCommitReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const TxnCommitReply& TxnCommitReply::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_messages_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_messages_2eproto();
#endif
  return *default_instance_;
}

TxnCommitReply* TxnCommitReply::default_instance_ = NULL;

TxnCommitReply* TxnCommitReply::New() const {
  return new TxnCommitReply;
}

void TxnCommitReply::Clear() {
  status_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool TxnCommitReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:upscaledb.TxnCommitReply)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required sint32 status = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &status_)));
          set_has_status();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:upscaledb.TxnCommitReply)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:upscaledb.TxnCommitReply)
  return false;
#undef DO_
}

void TxnCommitReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:upscaledb.TxnCommitReply)
  // required sint32 status = 1;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(1, this->status(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:upscaledb.TxnCommitReply)
}

int TxnCommitReply::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required sint32 status = 1;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->status());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TxnCommitReply::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const TxnCommitReply*>(&from));
}

void TxnCommitReply::MergeFrom(const TxnCommitReply& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_status()) {
      set_status(from.status());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void TxnCommitReply::CopyFrom(const TxnCommitReply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TxnCommitReply::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void TxnCommitReply::Swap(TxnCommitReply* other) {
  if (other != this) {
    std::swap(status_, other->status_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string TxnCommitReply::GetTypeName() const {
  return "upscaledb.TxnCommitReply";
}


// ===================================================================

#ifndef _MSC_VER
const int TxnAbortRequest::kTxnHandleFieldNumber;
const int TxnAbortRequest::kFlagsFieldNumber;
#endif  // !_MSC_VER

TxnAbortRequest::TxnAbortRequest()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:upscaledb.TxnAbortRequest)
}

void TxnAbortRequest::InitAsDefaultInstance() {
}

TxnAbortRequest::TxnAbortRequest(const TxnAbortRequest& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:upscaledb.TxnAbortRequest)
}

void TxnAbortRequest::SharedCtor() {
  _cached_size_ = 0;
  txn_handle_ = GOOGLE_ULONGLONG(0);
  flags_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TxnAbortRequest::~TxnAbortRequest() {
  // @@protoc_insertion_point(destructor:upscaledb.TxnAbortRequest)
  SharedDtor();
}

void TxnAbortRequest::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void TxnAbortRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const TxnAbortRequest& TxnAbortRequest::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_messages_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_messages_2eproto();
#endif
  return *default_instance_;
}

TxnAbortRequest* TxnAbortRequest::default_instance_ = NULL;

TxnAbortRequest* TxnAbortRequest::New() const {
  return new TxnAbortRequest;
}

void TxnAbortRequest::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TxnAbortRequest*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(txn_handle_, flags_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool TxnAbortRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:upscaledb.TxnAbortRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 txn_handle = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &txn_handle_)));
          set_has_txn_handle();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_flags;
        break;
      }

      // required uint32 flags = 2;
      case 2: {
        if (tag == 16) {
         parse_flags:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &flags_)));
          set_has_flags();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:upscaledb.TxnAbortRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:upscaledb.TxnAbortRequest)
  return false;
#undef DO_
}

void TxnAbortRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:upscaledb.TxnAbortRequest)
  // required uint64 txn_handle = 1;
  if (has_txn_handle()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->txn_handle(), output);
  }

  // required uint32 flags = 2;
  if (has_flags()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->flags(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:upscaledb.TxnAbortRequest)
}

int TxnAbortRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 txn_handle = 1;
    if (has_txn_handle()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->txn_handle());
    }

    // required uint32 flags = 2;
    if (has_flags()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->flags());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TxnAbortRequest::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const TxnAbortRequest*>(&from));
}

void TxnAbortRequest::MergeFrom(const TxnAbortRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_txn_handle()) {
      set_txn_handle(from.txn_handle());
    }
    if (from.has_flags()) {
      set_flags(from.flags());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void TxnAbortRequest::CopyFrom(const TxnAbortRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TxnAbortRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void TxnAbortRequest::Swap(TxnAbortRequest* other) {
  if (other != this) {
    std::swap(txn_handle_, other->txn_handle_);
    std::swap(flags_, other->flags_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string TxnAbortRequest::GetTypeName() const {
  return "upscaledb.TxnAbortRequest";
}


// ===================================================================

#ifndef _MSC_VER
const int TxnAbortReply::kStatusFieldNumber;
#endif  // !_MSC_VER

TxnAbortReply::TxnAbortReply()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:upscaledb.TxnAbortReply)
}

void TxnAbortReply::InitAsDefaultInstance() {
}

TxnAbortReply::TxnAbortReply(const TxnAbortReply& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:upscaledb.TxnAbortReply)
}

void TxnAbortReply::SharedCtor() {
  _cached_size_ = 0;
  status_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TxnAbortReply::~TxnAbortReply() {
  // @@protoc_insertion_point(destructor:upscaledb.TxnAbortReply)
  SharedDtor();
}

void TxnAbortReply::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void TxnAbortReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const TxnAbortReply& TxnAbortReply::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_messages_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_messages_2eproto();
#endif
  return *default_instance_;
}

TxnAbortReply* TxnAbortReply::default_instance_ = NULL;

TxnAbortReply* TxnAbortReply::New() const {
  return new TxnAbortReply;
}

void TxnAbortReply::Clear() {
  status_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool TxnAbortReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:upscaledb.TxnAbortReply)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required sint32 status = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &status_)));
          set_has_status();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:upscaledb.TxnAbortReply)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:upscaledb.TxnAbortReply)
  return false;
#undef DO_
}

void TxnAbortReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:upscaledb.TxnAbortReply)
  // required sint32 status = 1;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(1, this->status(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:upscaledb.TxnAbortReply)
}

int TxnAbortReply::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required sint32 status = 1;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->status());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TxnAbortReply::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const TxnAbortReply*>(&from));
}

void TxnAbortReply::MergeFrom(const TxnAbortReply& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_status()) {
      set_status(from.status());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void TxnAbortReply::CopyFrom(const TxnAbortReply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TxnAbortReply::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void TxnAbortReply::Swap(TxnAbortReply* other) {
  if (other != this) {
    std::swap(status_, other->status_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string TxnAbortReply::GetTypeName() const {
  return "upscaledb.TxnAbortReply";
}


// ===================================================================

#ifndef _MSC_VER
const int DbCheckIntegrityRequest::kDbHandleFieldNumber;
const int DbCheckIntegrityRequest::kFlagsFieldNumber;
#endif  // !_MSC_VER

DbCheckIntegrityRequest::DbCheckIntegrityRequest()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:upscaledb.DbCheckIntegrityRequest)
}

void DbCheckIntegrityRequest::InitAsDefaultInstance() {
}

DbCheckIntegrityRequest::DbCheckIntegrityRequest(const DbCheckIntegrityRequest& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:upscaledb.DbCheckIntegrityRequest)
}

void DbCheckIntegrityRequest::SharedCtor() {
  _cached_size_ = 0;
  db_handle_ = GOOGLE_ULONGLONG(0);
  flags_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DbCheckIntegrityRequest::~DbCheckIntegrityRequest() {
  // @@protoc_insertion_point(destructor:upscaledb.DbCheckIntegrityRequest)
  SharedDtor();
}

void DbCheckIntegrityRequest::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void DbCheckIntegrityRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const DbCheckIntegrityRequest& DbCheckIntegrityRequest::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_messages_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_messages_2eproto();
#endif
  return *default_instance_;
}

DbCheckIntegrityRequest* DbCheckIntegrityRequest::default_instance_ = NULL;

DbCheckIntegrityRequest* DbCheckIntegrityRequest::New() const {
  return new DbCheckIntegrityRequest;
}

void DbCheckIntegrityRequest::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<DbCheckIntegrityRequest*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(db_handle_, flags_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool DbCheckIntegrityRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:upscaledb.DbCheckIntegrityRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 db_handle = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &db_handle_)));
          set_has_db_handle();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_flags;
        break;
      }

      // required uint32 flags = 2;
      case 2: {
        if (tag == 16) {
         parse_flags:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &flags_)));
          set_has_flags();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:upscaledb.DbCheckIntegrityRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:upscaledb.DbCheckIntegrityRequest)
  return false;
#undef DO_
}

void DbCheckIntegrityRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:upscaledb.DbCheckIntegrityRequest)
  // required uint64 db_handle = 1;
  if (has_db_handle()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->db_handle(), output);
  }

  // required uint32 flags = 2;
  if (has_flags()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->flags(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:upscaledb.DbCheckIntegrityRequest)
}

int DbCheckIntegrityRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 db_handle = 1;
    if (has_db_handle()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->db_handle());
    }

    // required uint32 flags = 2;
    if (has_flags()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->flags());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DbCheckIntegrityRequest::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const DbCheckIntegrityRequest*>(&from));
}

void DbCheckIntegrityRequest::MergeFrom(const DbCheckIntegrityRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_db_handle()) {
      set_db_handle(from.db_handle());
    }
    if (from.has_flags()) {
      set_flags(from.flags());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void DbCheckIntegrityRequest::CopyFrom(const DbCheckIntegrityRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DbCheckIntegrityRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void DbCheckIntegrityRequest::Swap(DbCheckIntegrityRequest* other) {
  if (other != this) {
    std::swap(db_handle_, other->db_handle_);
    std::swap(flags_, other->flags_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string DbCheckIntegrityRequest::GetTypeName() const {
  return "upscaledb.DbCheckIntegrityRequest";
}


// ===================================================================

#ifndef _MSC_VER
const int DbCheckIntegrityReply::kStatusFieldNumber;
#endif  // !_MSC_VER

DbCheckIntegrityReply::DbCheckIntegrityReply()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:upscaledb.DbCheckIntegrityReply)
}

void DbCheckIntegrityReply::InitAsDefaultInstance() {
}

DbCheckIntegrityReply::DbCheckIntegrityReply(const DbCheckIntegrityReply& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:upscaledb.DbCheckIntegrityReply)
}

void DbCheckIntegrityReply::SharedCtor() {
  _cached_size_ = 0;
  status_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DbCheckIntegrityReply::~DbCheckIntegrityReply() {
  // @@protoc_insertion_point(destructor:upscaledb.DbCheckIntegrityReply)
  SharedDtor();
}

void DbCheckIntegrityReply::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void DbCheckIntegrityReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const DbCheckIntegrityReply& DbCheckIntegrityReply::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_messages_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_messages_2eproto();
#endif
  return *default_instance_;
}

DbCheckIntegrityReply* DbCheckIntegrityReply::default_instance_ = NULL;

DbCheckIntegrityReply* DbCheckIntegrityReply::New() const {
  return new DbCheckIntegrityReply;
}

void DbCheckIntegrityReply::Clear() {
  status_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool DbCheckIntegrityReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:upscaledb.DbCheckIntegrityReply)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required sint32 status = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &status_)));
          set_has_status();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:upscaledb.DbCheckIntegrityReply)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:upscaledb.DbCheckIntegrityReply)
  return false;
#undef DO_
}

void DbCheckIntegrityReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:upscaledb.DbCheckIntegrityReply)
  // required sint32 status = 1;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(1, this->status(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:upscaledb.DbCheckIntegrityReply)
}

int DbCheckIntegrityReply::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required sint32 status = 1;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->status());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DbCheckIntegrityReply::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const DbCheckIntegrityReply*>(&from));
}

void DbCheckIntegrityReply::MergeFrom(const DbCheckIntegrityReply& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_status()) {
      set_status(from.status());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void DbCheckIntegrityReply::CopyFrom(const DbCheckIntegrityReply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DbCheckIntegrityReply::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void DbCheckIntegrityReply::Swap(DbCheckIntegrityReply* other) {
  if (other != this) {
    std::swap(status_, other->status_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string DbCheckIntegrityReply::GetTypeName() const {
  return "upscaledb.DbCheckIntegrityReply";
}


// ===================================================================

#ifndef _MSC_VER
const int DbCountRequest::kDbHandleFieldNumber;
const int DbCountRequest::kTxnHandleFieldNumber;
const int DbCountRequest::kDistinctFieldNumber;
#endif  // !_MSC_VER

DbCountRequest::DbCountRequest()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:upscaledb.DbCountRequest)
}

void DbCountRequest::InitAsDefaultInstance() {
}

DbCountRequest::DbCountRequest(const DbCountRequest& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:upscaledb.DbCountRequest)
}

void DbCountRequest::SharedCtor() {
  _cached_size_ = 0;
  db_handle_ = GOOGLE_ULONGLONG(0);
  txn_handle_ = GOOGLE_ULONGLONG(0);
  distinct_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DbCountRequest::~DbCountRequest() {
  // @@protoc_insertion_point(destructor:upscaledb.DbCountRequest)
  SharedDtor();
}

void DbCountRequest::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void DbCountRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const DbCountRequest& DbCountRequest::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_messages_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_messages_2eproto();
#endif
  return *default_instance_;
}

DbCountRequest* DbCountRequest::default_instance_ = NULL;

DbCountRequest* DbCountRequest::New() const {
  return new DbCountRequest;
}

void DbCountRequest::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<DbCountRequest*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(db_handle_, distinct_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool DbCountRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:upscaledb.DbCountRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 db_handle = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &db_handle_)));
          set_has_db_handle();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_txn_handle;
        break;
      }

      // required uint64 txn_handle = 2;
      case 2: {
        if (tag == 16) {
         parse_txn_handle:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &txn_handle_)));
          set_has_txn_handle();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_distinct;
        break;
      }

      // required bool distinct = 3;
      case 3: {
        if (tag == 24) {
         parse_distinct:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &distinct_)));
          set_has_distinct();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:upscaledb.DbCountRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:upscaledb.DbCountRequest)
  return false;
#undef DO_
}

void DbCountRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:upscaledb.DbCountRequest)
  // required uint64 db_handle = 1;
  if (has_db_handle()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->db_handle(), output);
  }

  // required uint64 txn_handle = 2;
  if (has_txn_handle()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->txn_handle(), output);
  }

  // required bool distinct = 3;
  if (has_distinct()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->distinct(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:upscaledb.DbCountRequest)
}

int DbCountRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 db_handle = 1;
    if (has_db_handle()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->db_handle());
    }

    // required uint64 txn_handle = 2;
    if (has_txn_handle()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->txn_handle());
    }

    // required bool distinct = 3;
    if (has_distinct()) {
      total_size += 1 + 1;
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DbCountRequest::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const DbCountRequest*>(&from));
}

void DbCountRequest::MergeFrom(const DbCountRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_db_handle()) {
      set_db_handle(from.db_handle());
    }
    if (from.has_txn_handle()) {
      set_txn_handle(from.txn_handle());
    }
    if (from.has_distinct()) {
      set_distinct(from.distinct());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void DbCountRequest::CopyFrom(const DbCountRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DbCountRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void DbCountRequest::Swap(DbCountRequest* other) {
  if (other != this) {
    std::swap(db_handle_, other->db_handle_);
    std::swap(txn_handle_, other->txn_handle_);
    std::swap(distinct_, other->distinct_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string DbCountRequest::GetTypeName() const {
  return "upscaledb.DbCountRequest";
}


// ===================================================================

#ifndef _MSC_VER
const int DbCountReply::kStatusFieldNumber;
const int DbCountReply::kKeycountFieldNumber;
#endif  // !_MSC_VER

DbCountReply::DbCountReply()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:upscaledb.DbCountReply)
}

void DbCountReply::InitAsDefaultInstance() {
}

DbCountReply::DbCountReply(const DbCountReply& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:upscaledb.DbCountReply)
}

void DbCountReply::SharedCtor() {
  _cached_size_ = 0;
  status_ = 0;
  keycount_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DbCountReply::~DbCountReply() {
  // @@protoc_insertion_point(destructor:upscaledb.DbCountReply)
  SharedDtor();
}

void DbCountReply::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void DbCountReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const DbCountReply& DbCountReply::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_messages_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_messages_2eproto();
#endif
  return *default_instance_;
}

DbCountReply* DbCountReply::default_instance_ = NULL;

DbCountReply* DbCountReply::New() const {
  return new DbCountReply;
}

void DbCountReply::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<DbCountReply*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(keycount_, status_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool DbCountReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:upscaledb.DbCountReply)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required sint32 status = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &status_)));
          set_has_status();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_keycount;
        break;
      }

      // required uint64 keycount = 2;
      case 2: {
        if (tag == 16) {
         parse_keycount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &keycount_)));
          set_has_keycount();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:upscaledb.DbCountReply)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:upscaledb.DbCountReply)
  return false;
#undef DO_
}

void DbCountReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:upscaledb.DbCountReply)
  // required sint32 status = 1;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(1, this->status(), output);
  }

  // required uint64 keycount = 2;
  if (has_keycount()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->keycount(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:upscaledb.DbCountReply)
}

int DbCountReply::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required sint32 status = 1;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->status());
    }

    // required uint64 keycount = 2;
    if (has_keycount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->keycount());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DbCountReply::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const DbCountReply*>(&from));
}

void DbCountReply::MergeFrom(const DbCountReply& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_status()) {
      set_status(from.status());
    }
    if (from.has_keycount()) {
      set_keycount(from.keycount());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void DbCountReply::CopyFrom(const DbCountReply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DbCountReply::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void DbCountReply::Swap(DbCountReply* other) {
  if (other != this) {
    std::swap(status_, other->status_);
    std::swap(keycount_, other->keycount_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string DbCountReply::GetTypeName() const {
  return "upscaledb.DbCountReply";
}


// ===================================================================

#ifndef _MSC_VER
const int Key::kDataFieldNumber;
const int Key::kFlagsFieldNumber;
const int Key::kIntflagsFieldNumber;
#endif  // !_MSC_VER

Key::Key()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:upscaledb.Key)
}

void Key::InitAsDefaultInstance() {
}

Key::Key(const Key& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:upscaledb.Key)
}

void Key::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  flags_ = 0u;
  intflags_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Key::~Key() {
  // @@protoc_insertion_point(destructor:upscaledb.Key)
  SharedDtor();
}

void Key::SharedDtor() {
  if (data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete data_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void Key::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const Key& Key::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_messages_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_messages_2eproto();
#endif
  return *default_instance_;
}

Key* Key::default_instance_ = NULL;

Key* Key::New() const {
  return new Key;
}

void Key::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<Key*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 7) {
    ZR_(flags_, intflags_);
    if (has_data()) {
      if (data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        data_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool Key::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:upscaledb.Key)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes data = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_flags;
        break;
      }

      // required uint32 flags = 2;
      case 2: {
        if (tag == 16) {
         parse_flags:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &flags_)));
          set_has_flags();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_intflags;
        break;
      }

      // required uint32 intflags = 3;
      case 3: {
        if (tag == 24) {
         parse_intflags:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &intflags_)));
          set_has_intflags();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:upscaledb.Key)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:upscaledb.Key)
  return false;
#undef DO_
}

void Key::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:upscaledb.Key)
  // optional bytes data = 1;
  if (has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->data(), output);
  }

  // required uint32 flags = 2;
  if (has_flags()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->flags(), output);
  }

  // required uint32 intflags = 3;
  if (has_intflags()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->intflags(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:upscaledb.Key)
}

int Key::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes data = 1;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->data());
    }

    // required uint32 flags = 2;
    if (has_flags()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->flags());
    }

    // required uint32 intflags = 3;
    if (has_intflags()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->intflags());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Key::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const Key*>(&from));
}

void Key::MergeFrom(const Key& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_data()) {
      set_data(from.data());
    }
    if (from.has_flags()) {
      set_flags(from.flags());
    }
    if (from.has_intflags()) {
      set_intflags(from.intflags());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void Key::CopyFrom(const Key& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Key::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000006) != 0x00000006) return false;

  return true;
}

void Key::Swap(Key* other) {
  if (other != this) {
    std::swap(data_, other->data_);
    std::swap(flags_, other->flags_);
    std::swap(intflags_, other->intflags_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string Key::GetTypeName() const {
  return "upscaledb.Key";
}


// ===================================================================

#ifndef _MSC_VER
const int Record::kDataFieldNumber;
const int Record::kFlagsFieldNumber;
const int Record::kPartialOffsetFieldNumber;
const int Record::kPartialSizeFieldNumber;
#endif  // !_MSC_VER

Record::Record()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:upscaledb.Record)
}

void Record::InitAsDefaultInstance() {
}

Record::Record(const Record& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:upscaledb.Record)
}

void Record::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  flags_ = 0u;
  partial_offset_ = 0u;
  partial_size_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Record::~Record() {
  // @@protoc_insertion_point(destructor:upscaledb.Record)
  SharedDtor();
}

void Record::SharedDtor() {
  if (data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete data_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void Record::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const Record& Record::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_messages_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_messages_2eproto();
#endif
  return *default_instance_;
}

Record* Record::default_instance_ = NULL;

Record* Record::New() const {
  return new Record;
}

void Record::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<Record*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 15) {
    ZR_(flags_, partial_size_);
    if (has_data()) {
      if (data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        data_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool Record::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:upscaledb.Record)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes data = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_flags;
        break;
      }

      // required uint32 flags = 2;
      case 2: {
        if (tag == 16) {
         parse_flags:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &flags_)));
          set_has_flags();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_partial_offset;
        break;
      }

      // required uint32 partial_offset = 3;
      case 3: {
        if (tag == 24) {
         parse_partial_offset:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &partial_offset_)));
          set_has_partial_offset();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_partial_size;
        break;
      }

      // required uint32 partial_size = 4;
      case 4: {
        if (tag == 32) {
         parse_partial_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &partial_size_)));
          set_has_partial_size();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:upscaledb.Record)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:upscaledb.Record)
  return false;
#undef DO_
}

void Record::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:upscaledb.Record)
  // optional bytes data = 1;
  if (has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->data(), output);
  }

  // required uint32 flags = 2;
  if (has_flags()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->flags(), output);
  }

  // required uint32 partial_offset = 3;
  if (has_partial_offset()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->partial_offset(), output);
  }

  // required uint32 partial_size = 4;
  if (has_partial_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->partial_size(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:upscaledb.Record)
}

int Record::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes data = 1;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->data());
    }

    // required uint32 flags = 2;
    if (has_flags()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->flags());
    }

    // required uint32 partial_offset = 3;
    if (has_partial_offset()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->partial_offset());
    }

    // required uint32 partial_size = 4;
    if (has_partial_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->partial_size());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Record::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const Record*>(&from));
}

void Record::MergeFrom(const Record& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_data()) {
      set_data(from.data());
    }
    if (from.has_flags()) {
      set_flags(from.flags());
    }
    if (from.has_partial_offset()) {
      set_partial_offset(from.partial_offset());
    }
    if (from.has_partial_size()) {
      set_partial_size(from.partial_size());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void Record::CopyFrom(const Record& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Record::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000e) != 0x0000000e) return false;

  return true;
}

void Record::Swap(Record* other) {
  if (other != this) {
    std::swap(data_, other->data_);
    std::swap(flags_, other->flags_);
    std::swap(partial_offset_, other->partial_offset_);
    std::swap(partial_size_, other->partial_size_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string Record::GetTypeName() const {
  return "upscaledb.Record";
}


// ===================================================================

#ifndef _MSC_VER
const int DbInsertRequest::kDbHandleFieldNumber;
const int DbInsertRequest::kTxnHandleFieldNumber;
const int DbInsertRequest::kKeyFieldNumber;
const int DbInsertRequest::kRecordFieldNumber;
const int DbInsertRequest::kFlagsFieldNumber;
#endif  // !_MSC_VER

DbInsertRequest::DbInsertRequest()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:upscaledb.DbInsertRequest)
}

void DbInsertRequest::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  key_ = const_cast< ::upscaledb::Key*>(
      ::upscaledb::Key::internal_default_instance());
#else
  key_ = const_cast< ::upscaledb::Key*>(&::upscaledb::Key::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  record_ = const_cast< ::upscaledb::Record*>(
      ::upscaledb::Record::internal_default_instance());
#else
  record_ = const_cast< ::upscaledb::Record*>(&::upscaledb::Record::default_instance());
#endif
}

DbInsertRequest::DbInsertRequest(const DbInsertRequest& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:upscaledb.DbInsertRequest)
}

void DbInsertRequest::SharedCtor() {
  _cached_size_ = 0;
  db_handle_ = GOOGLE_ULONGLONG(0);
  txn_handle_ = GOOGLE_ULONGLONG(0);
  key_ = NULL;
  record_ = NULL;
  flags_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DbInsertRequest::~DbInsertRequest() {
  // @@protoc_insertion_point(destructor:upscaledb.DbInsertRequest)
  SharedDtor();
}

void DbInsertRequest::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete key_;
    delete record_;
  }
}

void DbInsertRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const DbInsertRequest& DbInsertRequest::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_messages_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_messages_2eproto();
#endif
  return *default_instance_;
}

DbInsertRequest* DbInsertRequest::default_instance_ = NULL;

DbInsertRequest* DbInsertRequest::New() const {
  return new DbInsertRequest;
}

void DbInsertRequest::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<DbInsertRequest*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(db_handle_, txn_handle_);
    if (has_key()) {
      if (key_ != NULL) key_->::upscaledb::Key::Clear();
    }
    if (has_record()) {
      if (record_ != NULL) record_->::upscaledb::Record::Clear();
    }
    flags_ = 0u;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool DbInsertRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:upscaledb.DbInsertRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 db_handle = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &db_handle_)));
          set_has_db_handle();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_txn_handle;
        break;
      }

      // required uint64 txn_handle = 2;
      case 2: {
        if (tag == 16) {
         parse_txn_handle:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &txn_handle_)));
          set_has_txn_handle();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_key;
        break;
      }

      // optional .upscaledb.Key key = 3;
      case 3: {
        if (tag == 26) {
         parse_key:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_key()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_record;
        break;
      }

      // optional .upscaledb.Record record = 4;
      case 4: {
        if (tag == 34) {
         parse_record:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_record()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_flags;
        break;
      }

      // required uint32 flags = 5;
      case 5: {
        if (tag == 40) {
         parse_flags:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &flags_)));
          set_has_flags();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:upscaledb.DbInsertRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:upscaledb.DbInsertRequest)
  return false;
#undef DO_
}

void DbInsertRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:upscaledb.DbInsertRequest)
  // required uint64 db_handle = 1;
  if (has_db_handle()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->db_handle(), output);
  }

  // required uint64 txn_handle = 2;
  if (has_txn_handle()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->txn_handle(), output);
  }

  // optional .upscaledb.Key key = 3;
  if (has_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      3, this->key(), output);
  }

  // optional .upscaledb.Record record = 4;
  if (has_record()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      4, this->record(), output);
  }

  // required uint32 flags = 5;
  if (has_flags()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->flags(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:upscaledb.DbInsertRequest)
}

int DbInsertRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 db_handle = 1;
    if (has_db_handle()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->db_handle());
    }

    // required uint64 txn_handle = 2;
    if (has_txn_handle()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->txn_handle());
    }

    // optional .upscaledb.Key key = 3;
    if (has_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->key());
    }

    // optional .upscaledb.Record record = 4;
    if (has_record()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->record());
    }

    // required uint32 flags = 5;
    if (has_flags()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->flags());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DbInsertRequest::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const DbInsertRequest*>(&from));
}

void DbInsertRequest::MergeFrom(const DbInsertRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_db_handle()) {
      set_db_handle(from.db_handle());
    }
    if (from.has_txn_handle()) {
      set_txn_handle(from.txn_handle());
    }
    if (from.has_key()) {
      mutable_key()->::upscaledb::Key::MergeFrom(from.key());
    }
    if (from.has_record()) {
      mutable_record()->::upscaledb::Record::MergeFrom(from.record());
    }
    if (from.has_flags()) {
      set_flags(from.flags());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void DbInsertRequest::CopyFrom(const DbInsertRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DbInsertRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000013) != 0x00000013) return false;

  if (has_key()) {
    if (!this->key().IsInitialized()) return false;
  }
  if (has_record()) {
    if (!this->record().IsInitialized()) return false;
  }
  return true;
}

void DbInsertRequest::Swap(DbInsertRequest* other) {
  if (other != this) {
    std::swap(db_handle_, other->db_handle_);
    std::swap(txn_handle_, other->txn_handle_);
    std::swap(key_, other->key_);
    std::swap(record_, other->record_);
    std::swap(flags_, other->flags_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string DbInsertRequest::GetTypeName() const {
  return "upscaledb.DbInsertRequest";
}


// ===================================================================

#ifndef _MSC_VER
const int DbInsertReply::kStatusFieldNumber;
const int DbInsertReply::kKeyFieldNumber;
#endif  // !_MSC_VER

DbInsertReply::DbInsertReply()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:upscaledb.DbInsertReply)
}

void DbInsertReply::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  key_ = const_cast< ::upscaledb::Key*>(
      ::upscaledb::Key::internal_default_instance());
#else
  key_ = const_cast< ::upscaledb::Key*>(&::upscaledb::Key::default_instance());
#endif
}

DbInsertReply::DbInsertReply(const DbInsertReply& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:upscaledb.DbInsertReply)
}

void DbInsertReply::SharedCtor() {
  _cached_size_ = 0;
  status_ = 0;
  key_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DbInsertReply::~DbInsertReply() {
  // @@protoc_insertion_point(destructor:upscaledb.DbInsertReply)
  SharedDtor();
}

void DbInsertReply::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete key_;
  }
}

void DbInsertReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const DbInsertReply& DbInsertReply::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_messages_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_messages_2eproto();
#endif
  return *default_instance_;
}

DbInsertReply* DbInsertReply::default_instance_ = NULL;

DbInsertReply* DbInsertReply::New() const {
  return new DbInsertReply;
}

void DbInsertReply::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    status_ = 0;
    if (has_key()) {
      if (key_ != NULL) key_->::upscaledb::Key::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool DbInsertReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:upscaledb.DbInsertReply)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required sint32 status = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &status_)));
          set_has_status();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_key;
        break;
      }

      // optional .upscaledb.Key key = 2;
      case 2: {
        if (tag == 18) {
         parse_key:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_key()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:upscaledb.DbInsertReply)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:upscaledb.DbInsertReply)
  return false;
#undef DO_
}

void DbInsertReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:upscaledb.DbInsertReply)
  // required sint32 status = 1;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(1, this->status(), output);
  }

  // optional .upscaledb.Key key = 2;
  if (has_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, this->key(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:upscaledb.DbInsertReply)
}

int DbInsertReply::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required sint32 status = 1;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->status());
    }

    // optional .upscaledb.Key key = 2;
    if (has_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->key());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DbInsertReply::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const DbInsertReply*>(&from));
}

void DbInsertReply::MergeFrom(const DbInsertReply& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_status()) {
      set_status(from.status());
    }
    if (from.has_key()) {
      mutable_key()->::upscaledb::Key::MergeFrom(from.key());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void DbInsertReply::CopyFrom(const DbInsertReply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DbInsertReply::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_key()) {
    if (!this->key().IsInitialized()) return false;
  }
  return true;
}

void DbInsertReply::Swap(DbInsertReply* other) {
  if (other != this) {
    std::swap(status_, other->status_);
    std::swap(key_, other->key_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string DbInsertReply::GetTypeName() const {
  return "upscaledb.DbInsertReply";
}


// ===================================================================

#ifndef _MSC_VER
const int DbEraseRequest::kDbHandleFieldNumber;
const int DbEraseRequest::kTxnHandleFieldNumber;
const int DbEraseRequest::kKeyFieldNumber;
const int DbEraseRequest::kFlagsFieldNumber;
#endif  // !_MSC_VER

DbEraseRequest::DbEraseRequest()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:upscaledb.DbEraseRequest)
}

void DbEraseRequest::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  key_ = const_cast< ::upscaledb::Key*>(
      ::upscaledb::Key::internal_default_instance());
#else
  key_ = const_cast< ::upscaledb::Key*>(&::upscaledb::Key::default_instance());
#endif
}

DbEraseRequest::DbEraseRequest(const DbEraseRequest& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:upscaledb.DbEraseRequest)
}

void DbEraseRequest::SharedCtor() {
  _cached_size_ = 0;
  db_handle_ = GOOGLE_ULONGLONG(0);
  txn_handle_ = GOOGLE_ULONGLONG(0);
  key_ = NULL;
  flags_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DbEraseRequest::~DbEraseRequest() {
  // @@protoc_insertion_point(destructor:upscaledb.DbEraseRequest)
  SharedDtor();
}

void DbEraseRequest::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete key_;
  }
}

void DbEraseRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const DbEraseRequest& DbEraseRequest::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_messages_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_messages_2eproto();
#endif
  return *default_instance_;
}

DbEraseRequest* DbEraseRequest::default_instance_ = NULL;

DbEraseRequest* DbEraseRequest::New() const {
  return new DbEraseRequest;
}

void DbEraseRequest::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<DbEraseRequest*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 15) {
    ZR_(db_handle_, txn_handle_);
    if (has_key()) {
      if (key_ != NULL) key_->::upscaledb::Key::Clear();
    }
    flags_ = 0u;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool DbEraseRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:upscaledb.DbEraseRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 db_handle = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &db_handle_)));
          set_has_db_handle();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_txn_handle;
        break;
      }

      // required uint64 txn_handle = 2;
      case 2: {
        if (tag == 16) {
         parse_txn_handle:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &txn_handle_)));
          set_has_txn_handle();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_key;
        break;
      }

      // required .upscaledb.Key key = 3;
      case 3: {
        if (tag == 26) {
         parse_key:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_key()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_flags;
        break;
      }

      // required uint32 flags = 4;
      case 4: {
        if (tag == 32) {
         parse_flags:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &flags_)));
          set_has_flags();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:upscaledb.DbEraseRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:upscaledb.DbEraseRequest)
  return false;
#undef DO_
}

void DbEraseRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:upscaledb.DbEraseRequest)
  // required uint64 db_handle = 1;
  if (has_db_handle()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->db_handle(), output);
  }

  // required uint64 txn_handle = 2;
  if (has_txn_handle()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->txn_handle(), output);
  }

  // required .upscaledb.Key key = 3;
  if (has_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      3, this->key(), output);
  }

  // required uint32 flags = 4;
  if (has_flags()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->flags(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:upscaledb.DbEraseRequest)
}

int DbEraseRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 db_handle = 1;
    if (has_db_handle()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->db_handle());
    }

    // required uint64 txn_handle = 2;
    if (has_txn_handle()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->txn_handle());
    }

    // required .upscaledb.Key key = 3;
    if (has_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->key());
    }

    // required uint32 flags = 4;
    if (has_flags()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->flags());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DbEraseRequest::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const DbEraseRequest*>(&from));
}

void DbEraseRequest::MergeFrom(const DbEraseRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_db_handle()) {
      set_db_handle(from.db_handle());
    }
    if (from.has_txn_handle()) {
      set_txn_handle(from.txn_handle());
    }
    if (from.has_key()) {
      mutable_key()->::upscaledb::Key::MergeFrom(from.key());
    }
    if (from.has_flags()) {
      set_flags(from.flags());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void DbEraseRequest::CopyFrom(const DbEraseRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DbEraseRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  if (has_key()) {
    if (!this->key().IsInitialized()) return false;
  }
  return true;
}

void DbEraseRequest::Swap(DbEraseRequest* other) {
  if (other != this) {
    std::swap(db_handle_, other->db_handle_);
    std::swap(txn_handle_, other->txn_handle_);
    std::swap(key_, other->key_);
    std::swap(flags_, other->flags_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string DbEraseRequest::GetTypeName() const {
  return "upscaledb.DbEraseRequest";
}


// ===================================================================

#ifndef _MSC_VER
const int DbEraseReply::kStatusFieldNumber;
#endif  // !_MSC_VER

DbEraseReply::DbEraseReply()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:upscaledb.DbEraseReply)
}

void DbEraseReply::InitAsDefaultInstance() {
}

DbEraseReply::DbEraseReply(const DbEraseReply& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:upscaledb.DbEraseReply)
}

void DbEraseReply::SharedCtor() {
  _cached_size_ = 0;
  status_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DbEraseReply::~DbEraseReply() {
  // @@protoc_insertion_point(destructor:upscaledb.DbEraseReply)
  SharedDtor();
}

void DbEraseReply::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void DbEraseReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const DbEraseReply& DbEraseReply::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_messages_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_messages_2eproto();
#endif
  return *default_instance_;
}

DbEraseReply* DbEraseReply::default_instance_ = NULL;

DbEraseReply* DbEraseReply::New() const {
  return new DbEraseReply;
}

void DbEraseReply::Clear() {
  status_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool DbEraseReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:upscaledb.DbEraseReply)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required sint32 status = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &status_)));
          set_has_status();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:upscaledb.DbEraseReply)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:upscaledb.DbEraseReply)
  return false;
#undef DO_
}

void DbEraseReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:upscaledb.DbEraseReply)
  // required sint32 status = 1;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(1, this->status(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:upscaledb.DbEraseReply)
}

int DbEraseReply::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required sint32 status = 1;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->status());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DbEraseReply::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const DbEraseReply*>(&from));
}

void DbEraseReply::MergeFrom(const DbEraseReply& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_status()) {
      set_status(from.status());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void DbEraseReply::CopyFrom(const DbEraseReply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DbEraseReply::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void DbEraseReply::Swap(DbEraseReply* other) {
  if (other != this) {
    std::swap(status_, other->status_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string DbEraseReply::GetTypeName() const {
  return "upscaledb.DbEraseReply";
}


// ===================================================================

#ifndef _MSC_VER
const int DbFindRequest::kDbHandleFieldNumber;
const int DbFindRequest::kTxnHandleFieldNumber;
const int DbFindRequest::kCursorHandleFieldNumber;
const int DbFindRequest::kKeyFieldNumber;
const int DbFindRequest::kRecordFieldNumber;
const int DbFindRequest::kFlagsFieldNumber;
#endif  // !_MSC_VER

DbFindRequest::DbFindRequest()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:upscaledb.DbFindRequest)
}

void DbFindRequest::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  key_ = const_cast< ::upscaledb::Key*>(
      ::upscaledb::Key::internal_default_instance());
#else
  key_ = const_cast< ::upscaledb::Key*>(&::upscaledb::Key::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  record_ = const_cast< ::upscaledb::Record*>(
      ::upscaledb::Record::internal_default_instance());
#else
  record_ = const_cast< ::upscaledb::Record*>(&::upscaledb::Record::default_instance());
#endif
}

DbFindRequest::DbFindRequest(const DbFindRequest& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:upscaledb.DbFindRequest)
}

void DbFindRequest::SharedCtor() {
  _cached_size_ = 0;
  db_handle_ = GOOGLE_ULONGLONG(0);
  txn_handle_ = GOOGLE_ULONGLONG(0);
  cursor_handle_ = GOOGLE_ULONGLONG(0);
  key_ = NULL;
  record_ = NULL;
  flags_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DbFindRequest::~DbFindRequest() {
  // @@protoc_insertion_point(destructor:upscaledb.DbFindRequest)
  SharedDtor();
}

void DbFindRequest::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete key_;
    delete record_;
  }
}

void DbFindRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const DbFindRequest& DbFindRequest::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_messages_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_messages_2eproto();
#endif
  return *default_instance_;
}

DbFindRequest* DbFindRequest::default_instance_ = NULL;

DbFindRequest* DbFindRequest::New() const {
  return new DbFindRequest;
}

void DbFindRequest::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<DbFindRequest*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 63) {
    ZR_(db_handle_, cursor_handle_);
    if (has_key()) {
      if (key_ != NULL) key_->::upscaledb::Key::Clear();
    }
    if (has_record()) {
      if (record_ != NULL) record_->::upscaledb::Record::Clear();
    }
    flags_ = 0u;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool DbFindRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:upscaledb.DbFindRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 db_handle = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &db_handle_)));
          set_has_db_handle();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_txn_handle;
        break;
      }

      // required uint64 txn_handle = 2;
      case 2: {
        if (tag == 16) {
         parse_txn_handle:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &txn_handle_)));
          set_has_txn_handle();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_cursor_handle;
        break;
      }

      // required uint64 cursor_handle = 3;
      case 3: {
        if (tag == 24) {
         parse_cursor_handle:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &cursor_handle_)));
          set_has_cursor_handle();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_key;
        break;
      }

      // required .upscaledb.Key key = 4;
      case 4: {
        if (tag == 34) {
         parse_key:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_key()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_record;
        break;
      }

      // optional .upscaledb.Record record = 5;
      case 5: {
        if (tag == 42) {
         parse_record:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_record()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_flags;
        break;
      }

      // required uint32 flags = 6;
      case 6: {
        if (tag == 48) {
         parse_flags:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &flags_)));
          set_has_flags();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:upscaledb.DbFindRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:upscaledb.DbFindRequest)
  return false;
#undef DO_
}

void DbFindRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:upscaledb.DbFindRequest)
  // required uint64 db_handle = 1;
  if (has_db_handle()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->db_handle(), output);
  }

  // required uint64 txn_handle = 2;
  if (has_txn_handle()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->txn_handle(), output);
  }

  // required uint64 cursor_handle = 3;
  if (has_cursor_handle()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->cursor_handle(), output);
  }

  // required .upscaledb.Key key = 4;
  if (has_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      4, this->key(), output);
  }

  // optional .upscaledb.Record record = 5;
  if (has_record()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      5, this->record(), output);
  }

  // required uint32 flags = 6;
  if (has_flags()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->flags(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:upscaledb.DbFindRequest)
}

int DbFindRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 db_handle = 1;
    if (has_db_handle()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->db_handle());
    }

    // required uint64 txn_handle = 2;
    if (has_txn_handle()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->txn_handle());
    }

    // required uint64 cursor_handle = 3;
    if (has_cursor_handle()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->cursor_handle());
    }

    // required .upscaledb.Key key = 4;
    if (has_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->key());
    }

    // optional .upscaledb.Record record = 5;
    if (has_record()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->record());
    }

    // required uint32 flags = 6;
    if (has_flags()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->flags());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DbFindRequest::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const DbFindRequest*>(&from));
}

void DbFindRequest::MergeFrom(const DbFindRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_db_handle()) {
      set_db_handle(from.db_handle());
    }
    if (from.has_txn_handle()) {
      set_txn_handle(from.txn_handle());
    }
    if (from.has_cursor_handle()) {
      set_cursor_handle(from.cursor_handle());
    }
    if (from.has_key()) {
      mutable_key()->::upscaledb::Key::MergeFrom(from.key());
    }
    if (from.has_record()) {
      mutable_record()->::upscaledb::Record::MergeFrom(from.record());
    }
    if (from.has_flags()) {
      set_flags(from.flags());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void DbFindRequest::CopyFrom(const DbFindRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DbFindRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000002f) != 0x0000002f) return false;

  if (has_key()) {
    if (!this->key().IsInitialized()) return false;
  }
  if (has_record()) {
    if (!this->record().IsInitialized()) return false;
  }
  return true;
}

void DbFindRequest::Swap(DbFindRequest* other) {
  if (other != this) {
    std::swap(db_handle_, other->db_handle_);
    std::swap(txn_handle_, other->txn_handle_);
    std::swap(cursor_handle_, other->cursor_handle_);
    std::swap(key_, other->key_);
    std::swap(record_, other->record_);
    std::swap(flags_, other->flags_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string DbFindRequest::GetTypeName() const {
  return "upscaledb.DbFindRequest";
}


// ===================================================================

#ifndef _MSC_VER
const int DbFindReply::kStatusFieldNumber;
const int DbFindReply::kRecordFieldNumber;
const int DbFindReply::kKeyFieldNumber;
#endif  // !_MSC_VER

DbFindReply::DbFindReply()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:upscaledb.DbFindReply)
}

void DbFindReply::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  record_ = const_cast< ::upscaledb::Record*>(
      ::upscaledb::Record::internal_default_instance());
#else
  record_ = const_cast< ::upscaledb::Record*>(&::upscaledb::Record::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  key_ = const_cast< ::upscaledb::Key*>(
      ::upscaledb::Key::internal_default_instance());
#else
  key_ = const_cast< ::upscaledb::Key*>(&::upscaledb::Key::default_instance());
#endif
}

DbFindReply::DbFindReply(const DbFindReply& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:upscaledb.DbFindReply)
}

void DbFindReply::SharedCtor() {
  _cached_size_ = 0;
  status_ = 0;
  record_ = NULL;
  key_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DbFindReply::~DbFindReply() {
  // @@protoc_insertion_point(destructor:upscaledb.DbFindReply)
  SharedDtor();
}

void DbFindReply::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete record_;
    delete key_;
  }
}

void DbFindReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const DbFindReply& DbFindReply::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_messages_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_messages_2eproto();
#endif
  return *default_instance_;
}

DbFindReply* DbFindReply::default_instance_ = NULL;

DbFindReply* DbFindReply::New() const {
  return new DbFindReply;
}

void DbFindReply::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    status_ = 0;
    if (has_record()) {
      if (record_ != NULL) record_->::upscaledb::Record::Clear();
    }
    if (has_key()) {
      if (key_ != NULL) key_->::upscaledb::Key::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool DbFindReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:upscaledb.DbFindReply)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required sint32 status = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &status_)));
          set_has_status();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_record;
        break;
      }

      // required .upscaledb.Record record = 2;
      case 2: {
        if (tag == 18) {
         parse_record:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_record()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_key;
        break;
      }

      // optional .upscaledb.Key key = 3;
      case 3: {
        if (tag == 26) {
         parse_key:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_key()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:upscaledb.DbFindReply)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:upscaledb.DbFindReply)
  return false;
#undef DO_
}

void DbFindReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:upscaledb.DbFindReply)
  // required sint32 status = 1;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(1, this->status(), output);
  }

  // required .upscaledb.Record record = 2;
  if (has_record()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, this->record(), output);
  }

  // optional .upscaledb.Key key = 3;
  if (has_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      3, this->key(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:upscaledb.DbFindReply)
}

int DbFindReply::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required sint32 status = 1;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->status());
    }

    // required .upscaledb.Record record = 2;
    if (has_record()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->record());
    }

    // optional .upscaledb.Key key = 3;
    if (has_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->key());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DbFindReply::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const DbFindReply*>(&from));
}

void DbFindReply::MergeFrom(const DbFindReply& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_status()) {
      set_status(from.status());
    }
    if (from.has_record()) {
      mutable_record()->::upscaledb::Record::MergeFrom(from.record());
    }
    if (from.has_key()) {
      mutable_key()->::upscaledb::Key::MergeFrom(from.key());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void DbFindReply::CopyFrom(const DbFindReply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DbFindReply::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_record()) {
    if (!this->record().IsInitialized()) return false;
  }
  if (has_key()) {
    if (!this->key().IsInitialized()) return false;
  }
  return true;
}

void DbFindReply::Swap(DbFindReply* other) {
  if (other != this) {
    std::swap(status_, other->status_);
    std::swap(record_, other->record_);
    std::swap(key_, other->key_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string DbFindReply::GetTypeName() const {
  return "upscaledb.DbFindReply";
}


// ===================================================================

#ifndef _MSC_VER
const int CursorCreateRequest::kDbHandleFieldNumber;
const int CursorCreateRequest::kTxnHandleFieldNumber;
const int CursorCreateRequest::kFlagsFieldNumber;
#endif  // !_MSC_VER

CursorCreateRequest::CursorCreateRequest()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:upscaledb.CursorCreateRequest)
}

void CursorCreateRequest::InitAsDefaultInstance() {
}

CursorCreateRequest::CursorCreateRequest(const CursorCreateRequest& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:upscaledb.CursorCreateRequest)
}

void CursorCreateRequest::SharedCtor() {
  _cached_size_ = 0;
  db_handle_ = GOOGLE_ULONGLONG(0);
  txn_handle_ = GOOGLE_ULONGLONG(0);
  flags_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CursorCreateRequest::~CursorCreateRequest() {
  // @@protoc_insertion_point(destructor:upscaledb.CursorCreateRequest)
  SharedDtor();
}

void CursorCreateRequest::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CursorCreateRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CursorCreateRequest& CursorCreateRequest::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_messages_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_messages_2eproto();
#endif
  return *default_instance_;
}

CursorCreateRequest* CursorCreateRequest::default_instance_ = NULL;

CursorCreateRequest* CursorCreateRequest::New() const {
  return new CursorCreateRequest;
}

void CursorCreateRequest::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CursorCreateRequest*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(db_handle_, flags_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool CursorCreateRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:upscaledb.CursorCreateRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 db_handle = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &db_handle_)));
          set_has_db_handle();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_txn_handle;
        break;
      }

      // required uint64 txn_handle = 2;
      case 2: {
        if (tag == 16) {
         parse_txn_handle:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &txn_handle_)));
          set_has_txn_handle();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_flags;
        break;
      }

      // required uint32 flags = 3;
      case 3: {
        if (tag == 24) {
         parse_flags:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &flags_)));
          set_has_flags();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:upscaledb.CursorCreateRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:upscaledb.CursorCreateRequest)
  return false;
#undef DO_
}

void CursorCreateRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:upscaledb.CursorCreateRequest)
  // required uint64 db_handle = 1;
  if (has_db_handle()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->db_handle(), output);
  }

  // required uint64 txn_handle = 2;
  if (has_txn_handle()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->txn_handle(), output);
  }

  // required uint32 flags = 3;
  if (has_flags()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->flags(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:upscaledb.CursorCreateRequest)
}

int CursorCreateRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 db_handle = 1;
    if (has_db_handle()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->db_handle());
    }

    // required uint64 txn_handle = 2;
    if (has_txn_handle()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->txn_handle());
    }

    // required uint32 flags = 3;
    if (has_flags()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->flags());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CursorCreateRequest::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CursorCreateRequest*>(&from));
}

void CursorCreateRequest::MergeFrom(const CursorCreateRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_db_handle()) {
      set_db_handle(from.db_handle());
    }
    if (from.has_txn_handle()) {
      set_txn_handle(from.txn_handle());
    }
    if (from.has_flags()) {
      set_flags(from.flags());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void CursorCreateRequest::CopyFrom(const CursorCreateRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CursorCreateRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void CursorCreateRequest::Swap(CursorCreateRequest* other) {
  if (other != this) {
    std::swap(db_handle_, other->db_handle_);
    std::swap(txn_handle_, other->txn_handle_);
    std::swap(flags_, other->flags_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CursorCreateRequest::GetTypeName() const {
  return "upscaledb.CursorCreateRequest";
}


// ===================================================================

#ifndef _MSC_VER
const int CursorCreateReply::kStatusFieldNumber;
const int CursorCreateReply::kCursorHandleFieldNumber;
#endif  // !_MSC_VER

CursorCreateReply::CursorCreateReply()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:upscaledb.CursorCreateReply)
}

void CursorCreateReply::InitAsDefaultInstance() {
}

CursorCreateReply::CursorCreateReply(const CursorCreateReply& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:upscaledb.CursorCreateReply)
}

void CursorCreateReply::SharedCtor() {
  _cached_size_ = 0;
  status_ = 0;
  cursor_handle_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CursorCreateReply::~CursorCreateReply() {
  // @@protoc_insertion_point(destructor:upscaledb.CursorCreateReply)
  SharedDtor();
}

void CursorCreateReply::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CursorCreateReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CursorCreateReply& CursorCreateReply::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_messages_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_messages_2eproto();
#endif
  return *default_instance_;
}

CursorCreateReply* CursorCreateReply::default_instance_ = NULL;

CursorCreateReply* CursorCreateReply::New() const {
  return new CursorCreateReply;
}

void CursorCreateReply::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CursorCreateReply*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(cursor_handle_, status_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool CursorCreateReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:upscaledb.CursorCreateReply)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required sint32 status = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &status_)));
          set_has_status();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_cursor_handle;
        break;
      }

      // required uint64 cursor_handle = 2;
      case 2: {
        if (tag == 16) {
         parse_cursor_handle:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &cursor_handle_)));
          set_has_cursor_handle();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:upscaledb.CursorCreateReply)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:upscaledb.CursorCreateReply)
  return false;
#undef DO_
}

void CursorCreateReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:upscaledb.CursorCreateReply)
  // required sint32 status = 1;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(1, this->status(), output);
  }

  // required uint64 cursor_handle = 2;
  if (has_cursor_handle()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->cursor_handle(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:upscaledb.CursorCreateReply)
}

int CursorCreateReply::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required sint32 status = 1;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->status());
    }

    // required uint64 cursor_handle = 2;
    if (has_cursor_handle()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->cursor_handle());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CursorCreateReply::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CursorCreateReply*>(&from));
}

void CursorCreateReply::MergeFrom(const CursorCreateReply& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_status()) {
      set_status(from.status());
    }
    if (from.has_cursor_handle()) {
      set_cursor_handle(from.cursor_handle());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void CursorCreateReply::CopyFrom(const CursorCreateReply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CursorCreateReply::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void CursorCreateReply::Swap(CursorCreateReply* other) {
  if (other != this) {
    std::swap(status_, other->status_);
    std::swap(cursor_handle_, other->cursor_handle_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CursorCreateReply::GetTypeName() const {
  return "upscaledb.CursorCreateReply";
}


// ===================================================================

#ifndef _MSC_VER
const int CursorCloneRequest::kCursorHandleFieldNumber;
#endif  // !_MSC_VER

CursorCloneRequest::CursorCloneRequest()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:upscaledb.CursorCloneRequest)
}

void CursorCloneRequest::InitAsDefaultInstance() {
}

CursorCloneRequest::CursorCloneRequest(const CursorCloneRequest& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:upscaledb.CursorCloneRequest)
}

void CursorCloneRequest::SharedCtor() {
  _cached_size_ = 0;
  cursor_handle_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CursorCloneRequest::~CursorCloneRequest() {
  // @@protoc_insertion_point(destructor:upscaledb.CursorCloneRequest)
  SharedDtor();
}

void CursorCloneRequest::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CursorCloneRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CursorCloneRequest& CursorCloneRequest::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_messages_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_messages_2eproto();
#endif
  return *default_instance_;
}

CursorCloneRequest* CursorCloneRequest::default_instance_ = NULL;

CursorCloneRequest* CursorCloneRequest::New() const {
  return new CursorCloneRequest;
}

void CursorCloneRequest::Clear() {
  cursor_handle_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool CursorCloneRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:upscaledb.CursorCloneRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 cursor_handle = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &cursor_handle_)));
          set_has_cursor_handle();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:upscaledb.CursorCloneRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:upscaledb.CursorCloneRequest)
  return false;
#undef DO_
}

void CursorCloneRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:upscaledb.CursorCloneRequest)
  // required uint64 cursor_handle = 1;
  if (has_cursor_handle()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->cursor_handle(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:upscaledb.CursorCloneRequest)
}

int CursorCloneRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 cursor_handle = 1;
    if (has_cursor_handle()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->cursor_handle());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CursorCloneRequest::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CursorCloneRequest*>(&from));
}

void CursorCloneRequest::MergeFrom(const CursorCloneRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cursor_handle()) {
      set_cursor_handle(from.cursor_handle());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void CursorCloneRequest::CopyFrom(const CursorCloneRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CursorCloneRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void CursorCloneRequest::Swap(CursorCloneRequest* other) {
  if (other != this) {
    std::swap(cursor_handle_, other->cursor_handle_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CursorCloneRequest::GetTypeName() const {
  return "upscaledb.CursorCloneRequest";
}


// ===================================================================

#ifndef _MSC_VER
const int CursorCloneReply::kStatusFieldNumber;
const int CursorCloneReply::kCursorHandleFieldNumber;
#endif  // !_MSC_VER

CursorCloneReply::CursorCloneReply()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:upscaledb.CursorCloneReply)
}

void CursorCloneReply::InitAsDefaultInstance() {
}

CursorCloneReply::CursorCloneReply(const CursorCloneReply& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:upscaledb.CursorCloneReply)
}

void CursorCloneReply::SharedCtor() {
  _cached_size_ = 0;
  status_ = 0;
  cursor_handle_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CursorCloneReply::~CursorCloneReply() {
  // @@protoc_insertion_point(destructor:upscaledb.CursorCloneReply)
  SharedDtor();
}

void CursorCloneReply::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CursorCloneReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CursorCloneReply& CursorCloneReply::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_messages_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_messages_2eproto();
#endif
  return *default_instance_;
}

CursorCloneReply* CursorCloneReply::default_instance_ = NULL;

CursorCloneReply* CursorCloneReply::New() const {
  return new CursorCloneReply;
}

void CursorCloneReply::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CursorCloneReply*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(cursor_handle_, status_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool CursorCloneReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:upscaledb.CursorCloneReply)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required sint32 status = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &status_)));
          set_has_status();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_cursor_handle;
        break;
      }

      // required uint64 cursor_handle = 2;
      case 2: {
        if (tag == 16) {
         parse_cursor_handle:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &cursor_handle_)));
          set_has_cursor_handle();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:upscaledb.CursorCloneReply)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:upscaledb.CursorCloneReply)
  return false;
#undef DO_
}

void CursorCloneReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:upscaledb.CursorCloneReply)
  // required sint32 status = 1;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(1, this->status(), output);
  }

  // required uint64 cursor_handle = 2;
  if (has_cursor_handle()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->cursor_handle(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:upscaledb.CursorCloneReply)
}

int CursorCloneReply::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required sint32 status = 1;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->status());
    }

    // required uint64 cursor_handle = 2;
    if (has_cursor_handle()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->cursor_handle());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CursorCloneReply::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CursorCloneReply*>(&from));
}

void CursorCloneReply::MergeFrom(const CursorCloneReply& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_status()) {
      set_status(from.status());
    }
    if (from.has_cursor_handle()) {
      set_cursor_handle(from.cursor_handle());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void CursorCloneReply::CopyFrom(const CursorCloneReply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CursorCloneReply::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void CursorCloneReply::Swap(CursorCloneReply* other) {
  if (other != this) {
    std::swap(status_, other->status_);
    std::swap(cursor_handle_, other->cursor_handle_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CursorCloneReply::GetTypeName() const {
  return "upscaledb.CursorCloneReply";
}


// ===================================================================

#ifndef _MSC_VER
const int CursorCloseRequest::kCursorHandleFieldNumber;
#endif  // !_MSC_VER

CursorCloseRequest::CursorCloseRequest()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:upscaledb.CursorCloseRequest)
}

void CursorCloseRequest::InitAsDefaultInstance() {
}

CursorCloseRequest::CursorCloseRequest(const CursorCloseRequest& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:upscaledb.CursorCloseRequest)
}

void CursorCloseRequest::SharedCtor() {
  _cached_size_ = 0;
  cursor_handle_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CursorCloseRequest::~CursorCloseRequest() {
  // @@protoc_insertion_point(destructor:upscaledb.CursorCloseRequest)
  SharedDtor();
}

void CursorCloseRequest::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CursorCloseRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CursorCloseRequest& CursorCloseRequest::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_messages_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_messages_2eproto();
#endif
  return *default_instance_;
}

CursorCloseRequest* CursorCloseRequest::default_instance_ = NULL;

CursorCloseRequest* CursorCloseRequest::New() const {
  return new CursorCloseRequest;
}

void CursorCloseRequest::Clear() {
  cursor_handle_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool CursorCloseRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:upscaledb.CursorCloseRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 cursor_handle = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &cursor_handle_)));
          set_has_cursor_handle();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:upscaledb.CursorCloseRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:upscaledb.CursorCloseRequest)
  return false;
#undef DO_
}

void CursorCloseRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:upscaledb.CursorCloseRequest)
  // required uint64 cursor_handle = 1;
  if (has_cursor_handle()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->cursor_handle(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:upscaledb.CursorCloseRequest)
}

int CursorCloseRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 cursor_handle = 1;
    if (has_cursor_handle()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->cursor_handle());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CursorCloseRequest::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CursorCloseRequest*>(&from));
}

void CursorCloseRequest::MergeFrom(const CursorCloseRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cursor_handle()) {
      set_cursor_handle(from.cursor_handle());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void CursorCloseRequest::CopyFrom(const CursorCloseRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CursorCloseRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void CursorCloseRequest::Swap(CursorCloseRequest* other) {
  if (other != this) {
    std::swap(cursor_handle_, other->cursor_handle_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CursorCloseRequest::GetTypeName() const {
  return "upscaledb.CursorCloseRequest";
}


// ===================================================================

#ifndef _MSC_VER
const int CursorCloseReply::kStatusFieldNumber;
#endif  // !_MSC_VER

CursorCloseReply::CursorCloseReply()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:upscaledb.CursorCloseReply)
}

void CursorCloseReply::InitAsDefaultInstance() {
}

CursorCloseReply::CursorCloseReply(const CursorCloseReply& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:upscaledb.CursorCloseReply)
}

void CursorCloseReply::SharedCtor() {
  _cached_size_ = 0;
  status_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CursorCloseReply::~CursorCloseReply() {
  // @@protoc_insertion_point(destructor:upscaledb.CursorCloseReply)
  SharedDtor();
}

void CursorCloseReply::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CursorCloseReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CursorCloseReply& CursorCloseReply::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_messages_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_messages_2eproto();
#endif
  return *default_instance_;
}

CursorCloseReply* CursorCloseReply::default_instance_ = NULL;

CursorCloseReply* CursorCloseReply::New() const {
  return new CursorCloseReply;
}

void CursorCloseReply::Clear() {
  status_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool CursorCloseReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:upscaledb.CursorCloseReply)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required sint32 status = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &status_)));
          set_has_status();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:upscaledb.CursorCloseReply)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:upscaledb.CursorCloseReply)
  return false;
#undef DO_
}

void CursorCloseReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:upscaledb.CursorCloseReply)
  // required sint32 status = 1;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(1, this->status(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:upscaledb.CursorCloseReply)
}

int CursorCloseReply::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required sint32 status = 1;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->status());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CursorCloseReply::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CursorCloseReply*>(&from));
}

void CursorCloseReply::MergeFrom(const CursorCloseReply& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_status()) {
      set_status(from.status());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void CursorCloseReply::CopyFrom(const CursorCloseReply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CursorCloseReply::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void CursorCloseReply::Swap(CursorCloseReply* other) {
  if (other != this) {
    std::swap(status_, other->status_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CursorCloseReply::GetTypeName() const {
  return "upscaledb.CursorCloseReply";
}


// ===================================================================

#ifndef _MSC_VER
const int CursorInsertRequest::kCursorHandleFieldNumber;
const int CursorInsertRequest::kKeyFieldNumber;
const int CursorInsertRequest::kRecordFieldNumber;
const int CursorInsertRequest::kFlagsFieldNumber;
const int CursorInsertRequest::kSendKeyFieldNumber;
#endif  // !_MSC_VER

CursorInsertRequest::CursorInsertRequest()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:upscaledb.CursorInsertRequest)
}

void CursorInsertRequest::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  key_ = const_cast< ::upscaledb::Key*>(
      ::upscaledb::Key::internal_default_instance());
#else
  key_ = const_cast< ::upscaledb::Key*>(&::upscaledb::Key::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  record_ = const_cast< ::upscaledb::Record*>(
      ::upscaledb::Record::internal_default_instance());
#else
  record_ = const_cast< ::upscaledb::Record*>(&::upscaledb::Record::default_instance());
#endif
}

CursorInsertRequest::CursorInsertRequest(const CursorInsertRequest& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:upscaledb.CursorInsertRequest)
}

void CursorInsertRequest::SharedCtor() {
  _cached_size_ = 0;
  cursor_handle_ = GOOGLE_ULONGLONG(0);
  key_ = NULL;
  record_ = NULL;
  flags_ = 0u;
  send_key_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CursorInsertRequest::~CursorInsertRequest() {
  // @@protoc_insertion_point(destructor:upscaledb.CursorInsertRequest)
  SharedDtor();
}

void CursorInsertRequest::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete key_;
    delete record_;
  }
}

void CursorInsertRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CursorInsertRequest& CursorInsertRequest::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_messages_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_messages_2eproto();
#endif
  return *default_instance_;
}

CursorInsertRequest* CursorInsertRequest::default_instance_ = NULL;

CursorInsertRequest* CursorInsertRequest::New() const {
  return new CursorInsertRequest;
}

void CursorInsertRequest::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CursorInsertRequest*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(flags_, send_key_);
    cursor_handle_ = GOOGLE_ULONGLONG(0);
    if (has_key()) {
      if (key_ != NULL) key_->::upscaledb::Key::Clear();
    }
    if (has_record()) {
      if (record_ != NULL) record_->::upscaledb::Record::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool CursorInsertRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:upscaledb.CursorInsertRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 cursor_handle = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &cursor_handle_)));
          set_has_cursor_handle();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_key;
        break;
      }

      // optional .upscaledb.Key key = 2;
      case 2: {
        if (tag == 18) {
         parse_key:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_key()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_record;
        break;
      }

      // optional .upscaledb.Record record = 3;
      case 3: {
        if (tag == 26) {
         parse_record:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_record()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_flags;
        break;
      }

      // required uint32 flags = 4;
      case 4: {
        if (tag == 32) {
         parse_flags:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &flags_)));
          set_has_flags();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_send_key;
        break;
      }

      // required bool send_key = 5;
      case 5: {
        if (tag == 40) {
         parse_send_key:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &send_key_)));
          set_has_send_key();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:upscaledb.CursorInsertRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:upscaledb.CursorInsertRequest)
  return false;
#undef DO_
}

void CursorInsertRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:upscaledb.CursorInsertRequest)
  // required uint64 cursor_handle = 1;
  if (has_cursor_handle()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->cursor_handle(), output);
  }

  // optional .upscaledb.Key key = 2;
  if (has_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, this->key(), output);
  }

  // optional .upscaledb.Record record = 3;
  if (has_record()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      3, this->record(), output);
  }

  // required uint32 flags = 4;
  if (has_flags()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->flags(), output);
  }

  // required bool send_key = 5;
  if (has_send_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->send_key(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:upscaledb.CursorInsertRequest)
}

int CursorInsertRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 cursor_handle = 1;
    if (has_cursor_handle()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->cursor_handle());
    }

    // optional .upscaledb.Key key = 2;
    if (has_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->key());
    }

    // optional .upscaledb.Record record = 3;
    if (has_record()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->record());
    }

    // required uint32 flags = 4;
    if (has_flags()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->flags());
    }

    // required bool send_key = 5;
    if (has_send_key()) {
      total_size += 1 + 1;
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CursorInsertRequest::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CursorInsertRequest*>(&from));
}

void CursorInsertRequest::MergeFrom(const CursorInsertRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cursor_handle()) {
      set_cursor_handle(from.cursor_handle());
    }
    if (from.has_key()) {
      mutable_key()->::upscaledb::Key::MergeFrom(from.key());
    }
    if (from.has_record()) {
      mutable_record()->::upscaledb::Record::MergeFrom(from.record());
    }
    if (from.has_flags()) {
      set_flags(from.flags());
    }
    if (from.has_send_key()) {
      set_send_key(from.send_key());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void CursorInsertRequest::CopyFrom(const CursorInsertRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CursorInsertRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000019) != 0x00000019) return false;

  if (has_key()) {
    if (!this->key().IsInitialized()) return false;
  }
  if (has_record()) {
    if (!this->record().IsInitialized()) return false;
  }
  return true;
}

void CursorInsertRequest::Swap(CursorInsertRequest* other) {
  if (other != this) {
    std::swap(cursor_handle_, other->cursor_handle_);
    std::swap(key_, other->key_);
    std::swap(record_, other->record_);
    std::swap(flags_, other->flags_);
    std::swap(send_key_, other->send_key_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CursorInsertRequest::GetTypeName() const {
  return "upscaledb.CursorInsertRequest";
}


// ===================================================================

#ifndef _MSC_VER
const int CursorInsertReply::kStatusFieldNumber;
const int CursorInsertReply::kKeyFieldNumber;
#endif  // !_MSC_VER

CursorInsertReply::CursorInsertReply()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:upscaledb.CursorInsertReply)
}

void CursorInsertReply::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  key_ = const_cast< ::upscaledb::Key*>(
      ::upscaledb::Key::internal_default_instance());
#else
  key_ = const_cast< ::upscaledb::Key*>(&::upscaledb::Key::default_instance());
#endif
}

CursorInsertReply::CursorInsertReply(const CursorInsertReply& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:upscaledb.CursorInsertReply)
}

void CursorInsertReply::SharedCtor() {
  _cached_size_ = 0;
  status_ = 0;
  key_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CursorInsertReply::~CursorInsertReply() {
  // @@protoc_insertion_point(destructor:upscaledb.CursorInsertReply)
  SharedDtor();
}

void CursorInsertReply::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete key_;
  }
}

void CursorInsertReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CursorInsertReply& CursorInsertReply::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_messages_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_messages_2eproto();
#endif
  return *default_instance_;
}

CursorInsertReply* CursorInsertReply::default_instance_ = NULL;

CursorInsertReply* CursorInsertReply::New() const {
  return new CursorInsertReply;
}

void CursorInsertReply::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    status_ = 0;
    if (has_key()) {
      if (key_ != NULL) key_->::upscaledb::Key::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool CursorInsertReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:upscaledb.CursorInsertReply)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required sint32 status = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &status_)));
          set_has_status();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_key;
        break;
      }

      // optional .upscaledb.Key key = 2;
      case 2: {
        if (tag == 18) {
         parse_key:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_key()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:upscaledb.CursorInsertReply)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:upscaledb.CursorInsertReply)
  return false;
#undef DO_
}

void CursorInsertReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:upscaledb.CursorInsertReply)
  // required sint32 status = 1;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(1, this->status(), output);
  }

  // optional .upscaledb.Key key = 2;
  if (has_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, this->key(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:upscaledb.CursorInsertReply)
}

int CursorInsertReply::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required sint32 status = 1;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->status());
    }

    // optional .upscaledb.Key key = 2;
    if (has_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->key());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CursorInsertReply::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CursorInsertReply*>(&from));
}

void CursorInsertReply::MergeFrom(const CursorInsertReply& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_status()) {
      set_status(from.status());
    }
    if (from.has_key()) {
      mutable_key()->::upscaledb::Key::MergeFrom(from.key());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void CursorInsertReply::CopyFrom(const CursorInsertReply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CursorInsertReply::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_key()) {
    if (!this->key().IsInitialized()) return false;
  }
  return true;
}

void CursorInsertReply::Swap(CursorInsertReply* other) {
  if (other != this) {
    std::swap(status_, other->status_);
    std::swap(key_, other->key_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CursorInsertReply::GetTypeName() const {
  return "upscaledb.CursorInsertReply";
}


// ===================================================================

#ifndef _MSC_VER
const int CursorEraseRequest::kCursorHandleFieldNumber;
const int CursorEraseRequest::kFlagsFieldNumber;
#endif  // !_MSC_VER

CursorEraseRequest::CursorEraseRequest()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:upscaledb.CursorEraseRequest)
}

void CursorEraseRequest::InitAsDefaultInstance() {
}

CursorEraseRequest::CursorEraseRequest(const CursorEraseRequest& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:upscaledb.CursorEraseRequest)
}

void CursorEraseRequest::SharedCtor() {
  _cached_size_ = 0;
  cursor_handle_ = GOOGLE_ULONGLONG(0);
  flags_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CursorEraseRequest::~CursorEraseRequest() {
  // @@protoc_insertion_point(destructor:upscaledb.CursorEraseRequest)
  SharedDtor();
}

void CursorEraseRequest::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CursorEraseRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CursorEraseRequest& CursorEraseRequest::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_messages_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_messages_2eproto();
#endif
  return *default_instance_;
}

CursorEraseRequest* CursorEraseRequest::default_instance_ = NULL;

CursorEraseRequest* CursorEraseRequest::New() const {
  return new CursorEraseRequest;
}

void CursorEraseRequest::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CursorEraseRequest*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(cursor_handle_, flags_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool CursorEraseRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:upscaledb.CursorEraseRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 cursor_handle = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &cursor_handle_)));
          set_has_cursor_handle();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_flags;
        break;
      }

      // required uint32 flags = 2;
      case 2: {
        if (tag == 16) {
         parse_flags:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &flags_)));
          set_has_flags();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:upscaledb.CursorEraseRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:upscaledb.CursorEraseRequest)
  return false;
#undef DO_
}

void CursorEraseRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:upscaledb.CursorEraseRequest)
  // required uint64 cursor_handle = 1;
  if (has_cursor_handle()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->cursor_handle(), output);
  }

  // required uint32 flags = 2;
  if (has_flags()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->flags(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:upscaledb.CursorEraseRequest)
}

int CursorEraseRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 cursor_handle = 1;
    if (has_cursor_handle()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->cursor_handle());
    }

    // required uint32 flags = 2;
    if (has_flags()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->flags());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CursorEraseRequest::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CursorEraseRequest*>(&from));
}

void CursorEraseRequest::MergeFrom(const CursorEraseRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cursor_handle()) {
      set_cursor_handle(from.cursor_handle());
    }
    if (from.has_flags()) {
      set_flags(from.flags());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void CursorEraseRequest::CopyFrom(const CursorEraseRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CursorEraseRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void CursorEraseRequest::Swap(CursorEraseRequest* other) {
  if (other != this) {
    std::swap(cursor_handle_, other->cursor_handle_);
    std::swap(flags_, other->flags_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CursorEraseRequest::GetTypeName() const {
  return "upscaledb.CursorEraseRequest";
}


// ===================================================================

#ifndef _MSC_VER
const int CursorEraseReply::kStatusFieldNumber;
#endif  // !_MSC_VER

CursorEraseReply::CursorEraseReply()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:upscaledb.CursorEraseReply)
}

void CursorEraseReply::InitAsDefaultInstance() {
}

CursorEraseReply::CursorEraseReply(const CursorEraseReply& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:upscaledb.CursorEraseReply)
}

void CursorEraseReply::SharedCtor() {
  _cached_size_ = 0;
  status_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CursorEraseReply::~CursorEraseReply() {
  // @@protoc_insertion_point(destructor:upscaledb.CursorEraseReply)
  SharedDtor();
}

void CursorEraseReply::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CursorEraseReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CursorEraseReply& CursorEraseReply::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_messages_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_messages_2eproto();
#endif
  return *default_instance_;
}

CursorEraseReply* CursorEraseReply::default_instance_ = NULL;

CursorEraseReply* CursorEraseReply::New() const {
  return new CursorEraseReply;
}

void CursorEraseReply::Clear() {
  status_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool CursorEraseReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:upscaledb.CursorEraseReply)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required sint32 status = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &status_)));
          set_has_status();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:upscaledb.CursorEraseReply)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:upscaledb.CursorEraseReply)
  return false;
#undef DO_
}

void CursorEraseReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:upscaledb.CursorEraseReply)
  // required sint32 status = 1;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(1, this->status(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:upscaledb.CursorEraseReply)
}

int CursorEraseReply::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required sint32 status = 1;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->status());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CursorEraseReply::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CursorEraseReply*>(&from));
}

void CursorEraseReply::MergeFrom(const CursorEraseReply& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_status()) {
      set_status(from.status());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void CursorEraseReply::CopyFrom(const CursorEraseReply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CursorEraseReply::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void CursorEraseReply::Swap(CursorEraseReply* other) {
  if (other != this) {
    std::swap(status_, other->status_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CursorEraseReply::GetTypeName() const {
  return "upscaledb.CursorEraseReply";
}


// ===================================================================

#ifndef _MSC_VER
const int CursorGetRecordCountRequest::kCursorHandleFieldNumber;
const int CursorGetRecordCountRequest::kFlagsFieldNumber;
#endif  // !_MSC_VER

CursorGetRecordCountRequest::CursorGetRecordCountRequest()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:upscaledb.CursorGetRecordCountRequest)
}

void CursorGetRecordCountRequest::InitAsDefaultInstance() {
}

CursorGetRecordCountRequest::CursorGetRecordCountRequest(const CursorGetRecordCountRequest& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:upscaledb.CursorGetRecordCountRequest)
}

void CursorGetRecordCountRequest::SharedCtor() {
  _cached_size_ = 0;
  cursor_handle_ = GOOGLE_ULONGLONG(0);
  flags_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CursorGetRecordCountRequest::~CursorGetRecordCountRequest() {
  // @@protoc_insertion_point(destructor:upscaledb.CursorGetRecordCountRequest)
  SharedDtor();
}

void CursorGetRecordCountRequest::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CursorGetRecordCountRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CursorGetRecordCountRequest& CursorGetRecordCountRequest::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_messages_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_messages_2eproto();
#endif
  return *default_instance_;
}

CursorGetRecordCountRequest* CursorGetRecordCountRequest::default_instance_ = NULL;

CursorGetRecordCountRequest* CursorGetRecordCountRequest::New() const {
  return new CursorGetRecordCountRequest;
}

void CursorGetRecordCountRequest::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CursorGetRecordCountRequest*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(cursor_handle_, flags_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool CursorGetRecordCountRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:upscaledb.CursorGetRecordCountRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 cursor_handle = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &cursor_handle_)));
          set_has_cursor_handle();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_flags;
        break;
      }

      // required uint32 flags = 2;
      case 2: {
        if (tag == 16) {
         parse_flags:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &flags_)));
          set_has_flags();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:upscaledb.CursorGetRecordCountRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:upscaledb.CursorGetRecordCountRequest)
  return false;
#undef DO_
}

void CursorGetRecordCountRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:upscaledb.CursorGetRecordCountRequest)
  // required uint64 cursor_handle = 1;
  if (has_cursor_handle()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->cursor_handle(), output);
  }

  // required uint32 flags = 2;
  if (has_flags()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->flags(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:upscaledb.CursorGetRecordCountRequest)
}

int CursorGetRecordCountRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 cursor_handle = 1;
    if (has_cursor_handle()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->cursor_handle());
    }

    // required uint32 flags = 2;
    if (has_flags()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->flags());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CursorGetRecordCountRequest::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CursorGetRecordCountRequest*>(&from));
}

void CursorGetRecordCountRequest::MergeFrom(const CursorGetRecordCountRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cursor_handle()) {
      set_cursor_handle(from.cursor_handle());
    }
    if (from.has_flags()) {
      set_flags(from.flags());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void CursorGetRecordCountRequest::CopyFrom(const CursorGetRecordCountRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CursorGetRecordCountRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void CursorGetRecordCountRequest::Swap(CursorGetRecordCountRequest* other) {
  if (other != this) {
    std::swap(cursor_handle_, other->cursor_handle_);
    std::swap(flags_, other->flags_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CursorGetRecordCountRequest::GetTypeName() const {
  return "upscaledb.CursorGetRecordCountRequest";
}


// ===================================================================

#ifndef _MSC_VER
const int CursorGetRecordCountReply::kStatusFieldNumber;
const int CursorGetRecordCountReply::kCountFieldNumber;
#endif  // !_MSC_VER

CursorGetRecordCountReply::CursorGetRecordCountReply()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:upscaledb.CursorGetRecordCountReply)
}

void CursorGetRecordCountReply::InitAsDefaultInstance() {
}

CursorGetRecordCountReply::CursorGetRecordCountReply(const CursorGetRecordCountReply& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:upscaledb.CursorGetRecordCountReply)
}

void CursorGetRecordCountReply::SharedCtor() {
  _cached_size_ = 0;
  status_ = 0;
  count_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CursorGetRecordCountReply::~CursorGetRecordCountReply() {
  // @@protoc_insertion_point(destructor:upscaledb.CursorGetRecordCountReply)
  SharedDtor();
}

void CursorGetRecordCountReply::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CursorGetRecordCountReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CursorGetRecordCountReply& CursorGetRecordCountReply::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_messages_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_messages_2eproto();
#endif
  return *default_instance_;
}

CursorGetRecordCountReply* CursorGetRecordCountReply::default_instance_ = NULL;

CursorGetRecordCountReply* CursorGetRecordCountReply::New() const {
  return new CursorGetRecordCountReply;
}

void CursorGetRecordCountReply::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CursorGetRecordCountReply*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(status_, count_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool CursorGetRecordCountReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:upscaledb.CursorGetRecordCountReply)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required sint32 status = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &status_)));
          set_has_status();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_count;
        break;
      }

      // required uint32 count = 2;
      case 2: {
        if (tag == 16) {
         parse_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &count_)));
          set_has_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:upscaledb.CursorGetRecordCountReply)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:upscaledb.CursorGetRecordCountReply)
  return false;
#undef DO_
}

void CursorGetRecordCountReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:upscaledb.CursorGetRecordCountReply)
  // required sint32 status = 1;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(1, this->status(), output);
  }

  // required uint32 count = 2;
  if (has_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->count(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:upscaledb.CursorGetRecordCountReply)
}

int CursorGetRecordCountReply::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required sint32 status = 1;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->status());
    }

    // required uint32 count = 2;
    if (has_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->count());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CursorGetRecordCountReply::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CursorGetRecordCountReply*>(&from));
}

void CursorGetRecordCountReply::MergeFrom(const CursorGetRecordCountReply& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_status()) {
      set_status(from.status());
    }
    if (from.has_count()) {
      set_count(from.count());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void CursorGetRecordCountReply::CopyFrom(const CursorGetRecordCountReply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CursorGetRecordCountReply::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void CursorGetRecordCountReply::Swap(CursorGetRecordCountReply* other) {
  if (other != this) {
    std::swap(status_, other->status_);
    std::swap(count_, other->count_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CursorGetRecordCountReply::GetTypeName() const {
  return "upscaledb.CursorGetRecordCountReply";
}


// ===================================================================

#ifndef _MSC_VER
const int CursorGetRecordSizeRequest::kCursorHandleFieldNumber;
#endif  // !_MSC_VER

CursorGetRecordSizeRequest::CursorGetRecordSizeRequest()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:upscaledb.CursorGetRecordSizeRequest)
}

void CursorGetRecordSizeRequest::InitAsDefaultInstance() {
}

CursorGetRecordSizeRequest::CursorGetRecordSizeRequest(const CursorGetRecordSizeRequest& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:upscaledb.CursorGetRecordSizeRequest)
}

void CursorGetRecordSizeRequest::SharedCtor() {
  _cached_size_ = 0;
  cursor_handle_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CursorGetRecordSizeRequest::~CursorGetRecordSizeRequest() {
  // @@protoc_insertion_point(destructor:upscaledb.CursorGetRecordSizeRequest)
  SharedDtor();
}

void CursorGetRecordSizeRequest::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CursorGetRecordSizeRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CursorGetRecordSizeRequest& CursorGetRecordSizeRequest::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_messages_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_messages_2eproto();
#endif
  return *default_instance_;
}

CursorGetRecordSizeRequest* CursorGetRecordSizeRequest::default_instance_ = NULL;

CursorGetRecordSizeRequest* CursorGetRecordSizeRequest::New() const {
  return new CursorGetRecordSizeRequest;
}

void CursorGetRecordSizeRequest::Clear() {
  cursor_handle_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool CursorGetRecordSizeRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:upscaledb.CursorGetRecordSizeRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 cursor_handle = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &cursor_handle_)));
          set_has_cursor_handle();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:upscaledb.CursorGetRecordSizeRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:upscaledb.CursorGetRecordSizeRequest)
  return false;
#undef DO_
}

void CursorGetRecordSizeRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:upscaledb.CursorGetRecordSizeRequest)
  // required uint64 cursor_handle = 1;
  if (has_cursor_handle()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->cursor_handle(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:upscaledb.CursorGetRecordSizeRequest)
}

int CursorGetRecordSizeRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 cursor_handle = 1;
    if (has_cursor_handle()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->cursor_handle());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CursorGetRecordSizeRequest::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CursorGetRecordSizeRequest*>(&from));
}

void CursorGetRecordSizeRequest::MergeFrom(const CursorGetRecordSizeRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cursor_handle()) {
      set_cursor_handle(from.cursor_handle());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void CursorGetRecordSizeRequest::CopyFrom(const CursorGetRecordSizeRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CursorGetRecordSizeRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void CursorGetRecordSizeRequest::Swap(CursorGetRecordSizeRequest* other) {
  if (other != this) {
    std::swap(cursor_handle_, other->cursor_handle_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CursorGetRecordSizeRequest::GetTypeName() const {
  return "upscaledb.CursorGetRecordSizeRequest";
}


// ===================================================================

#ifndef _MSC_VER
const int CursorGetRecordSizeReply::kStatusFieldNumber;
const int CursorGetRecordSizeReply::kSizeFieldNumber;
#endif  // !_MSC_VER

CursorGetRecordSizeReply::CursorGetRecordSizeReply()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:upscaledb.CursorGetRecordSizeReply)
}

void CursorGetRecordSizeReply::InitAsDefaultInstance() {
}

CursorGetRecordSizeReply::CursorGetRecordSizeReply(const CursorGetRecordSizeReply& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:upscaledb.CursorGetRecordSizeReply)
}

void CursorGetRecordSizeReply::SharedCtor() {
  _cached_size_ = 0;
  status_ = 0;
  size_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CursorGetRecordSizeReply::~CursorGetRecordSizeReply() {
  // @@protoc_insertion_point(destructor:upscaledb.CursorGetRecordSizeReply)
  SharedDtor();
}

void CursorGetRecordSizeReply::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CursorGetRecordSizeReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CursorGetRecordSizeReply& CursorGetRecordSizeReply::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_messages_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_messages_2eproto();
#endif
  return *default_instance_;
}

CursorGetRecordSizeReply* CursorGetRecordSizeReply::default_instance_ = NULL;

CursorGetRecordSizeReply* CursorGetRecordSizeReply::New() const {
  return new CursorGetRecordSizeReply;
}

void CursorGetRecordSizeReply::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CursorGetRecordSizeReply*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(size_, status_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool CursorGetRecordSizeReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:upscaledb.CursorGetRecordSizeReply)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required sint32 status = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &status_)));
          set_has_status();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_size;
        break;
      }

      // required uint64 size = 2;
      case 2: {
        if (tag == 16) {
         parse_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &size_)));
          set_has_size();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:upscaledb.CursorGetRecordSizeReply)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:upscaledb.CursorGetRecordSizeReply)
  return false;
#undef DO_
}

void CursorGetRecordSizeReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:upscaledb.CursorGetRecordSizeReply)
  // required sint32 status = 1;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(1, this->status(), output);
  }

  // required uint64 size = 2;
  if (has_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->size(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:upscaledb.CursorGetRecordSizeReply)
}

int CursorGetRecordSizeReply::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required sint32 status = 1;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->status());
    }

    // required uint64 size = 2;
    if (has_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->size());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CursorGetRecordSizeReply::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CursorGetRecordSizeReply*>(&from));
}

void CursorGetRecordSizeReply::MergeFrom(const CursorGetRecordSizeReply& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_status()) {
      set_status(from.status());
    }
    if (from.has_size()) {
      set_size(from.size());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void CursorGetRecordSizeReply::CopyFrom(const CursorGetRecordSizeReply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CursorGetRecordSizeReply::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void CursorGetRecordSizeReply::Swap(CursorGetRecordSizeReply* other) {
  if (other != this) {
    std::swap(status_, other->status_);
    std::swap(size_, other->size_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CursorGetRecordSizeReply::GetTypeName() const {
  return "upscaledb.CursorGetRecordSizeReply";
}


// ===================================================================

#ifndef _MSC_VER
const int CursorGetDuplicatePositionRequest::kCursorHandleFieldNumber;
#endif  // !_MSC_VER

CursorGetDuplicatePositionRequest::CursorGetDuplicatePositionRequest()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:upscaledb.CursorGetDuplicatePositionRequest)
}

void CursorGetDuplicatePositionRequest::InitAsDefaultInstance() {
}

CursorGetDuplicatePositionRequest::CursorGetDuplicatePositionRequest(const CursorGetDuplicatePositionRequest& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:upscaledb.CursorGetDuplicatePositionRequest)
}

void CursorGetDuplicatePositionRequest::SharedCtor() {
  _cached_size_ = 0;
  cursor_handle_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CursorGetDuplicatePositionRequest::~CursorGetDuplicatePositionRequest() {
  // @@protoc_insertion_point(destructor:upscaledb.CursorGetDuplicatePositionRequest)
  SharedDtor();
}

void CursorGetDuplicatePositionRequest::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CursorGetDuplicatePositionRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CursorGetDuplicatePositionRequest& CursorGetDuplicatePositionRequest::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_messages_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_messages_2eproto();
#endif
  return *default_instance_;
}

CursorGetDuplicatePositionRequest* CursorGetDuplicatePositionRequest::default_instance_ = NULL;

CursorGetDuplicatePositionRequest* CursorGetDuplicatePositionRequest::New() const {
  return new CursorGetDuplicatePositionRequest;
}

void CursorGetDuplicatePositionRequest::Clear() {
  cursor_handle_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool CursorGetDuplicatePositionRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:upscaledb.CursorGetDuplicatePositionRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 cursor_handle = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &cursor_handle_)));
          set_has_cursor_handle();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:upscaledb.CursorGetDuplicatePositionRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:upscaledb.CursorGetDuplicatePositionRequest)
  return false;
#undef DO_
}

void CursorGetDuplicatePositionRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:upscaledb.CursorGetDuplicatePositionRequest)
  // required uint64 cursor_handle = 1;
  if (has_cursor_handle()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->cursor_handle(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:upscaledb.CursorGetDuplicatePositionRequest)
}

int CursorGetDuplicatePositionRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 cursor_handle = 1;
    if (has_cursor_handle()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->cursor_handle());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CursorGetDuplicatePositionRequest::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CursorGetDuplicatePositionRequest*>(&from));
}

void CursorGetDuplicatePositionRequest::MergeFrom(const CursorGetDuplicatePositionRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cursor_handle()) {
      set_cursor_handle(from.cursor_handle());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void CursorGetDuplicatePositionRequest::CopyFrom(const CursorGetDuplicatePositionRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CursorGetDuplicatePositionRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void CursorGetDuplicatePositionRequest::Swap(CursorGetDuplicatePositionRequest* other) {
  if (other != this) {
    std::swap(cursor_handle_, other->cursor_handle_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CursorGetDuplicatePositionRequest::GetTypeName() const {
  return "upscaledb.CursorGetDuplicatePositionRequest";
}


// ===================================================================

#ifndef _MSC_VER
const int CursorGetDuplicatePositionReply::kStatusFieldNumber;
const int CursorGetDuplicatePositionReply::kPositionFieldNumber;
#endif  // !_MSC_VER

CursorGetDuplicatePositionReply::CursorGetDuplicatePositionReply()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:upscaledb.CursorGetDuplicatePositionReply)
}

void CursorGetDuplicatePositionReply::InitAsDefaultInstance() {
}

CursorGetDuplicatePositionReply::CursorGetDuplicatePositionReply(const CursorGetDuplicatePositionReply& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:upscaledb.CursorGetDuplicatePositionReply)
}

void CursorGetDuplicatePositionReply::SharedCtor() {
  _cached_size_ = 0;
  status_ = 0;
  position_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CursorGetDuplicatePositionReply::~CursorGetDuplicatePositionReply() {
  // @@protoc_insertion_point(destructor:upscaledb.CursorGetDuplicatePositionReply)
  SharedDtor();
}

void CursorGetDuplicatePositionReply::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CursorGetDuplicatePositionReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CursorGetDuplicatePositionReply& CursorGetDuplicatePositionReply::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_messages_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_messages_2eproto();
#endif
  return *default_instance_;
}

CursorGetDuplicatePositionReply* CursorGetDuplicatePositionReply::default_instance_ = NULL;

CursorGetDuplicatePositionReply* CursorGetDuplicatePositionReply::New() const {
  return new CursorGetDuplicatePositionReply;
}

void CursorGetDuplicatePositionReply::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CursorGetDuplicatePositionReply*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(status_, position_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool CursorGetDuplicatePositionReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:upscaledb.CursorGetDuplicatePositionReply)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required sint32 status = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &status_)));
          set_has_status();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_position;
        break;
      }

      // required uint32 position = 2;
      case 2: {
        if (tag == 16) {
         parse_position:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &position_)));
          set_has_position();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:upscaledb.CursorGetDuplicatePositionReply)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:upscaledb.CursorGetDuplicatePositionReply)
  return false;
#undef DO_
}

void CursorGetDuplicatePositionReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:upscaledb.CursorGetDuplicatePositionReply)
  // required sint32 status = 1;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(1, this->status(), output);
  }

  // required uint32 position = 2;
  if (has_position()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->position(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:upscaledb.CursorGetDuplicatePositionReply)
}

int CursorGetDuplicatePositionReply::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required sint32 status = 1;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->status());
    }

    // required uint32 position = 2;
    if (has_position()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->position());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CursorGetDuplicatePositionReply::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CursorGetDuplicatePositionReply*>(&from));
}

void CursorGetDuplicatePositionReply::MergeFrom(const CursorGetDuplicatePositionReply& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_status()) {
      set_status(from.status());
    }
    if (from.has_position()) {
      set_position(from.position());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void CursorGetDuplicatePositionReply::CopyFrom(const CursorGetDuplicatePositionReply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CursorGetDuplicatePositionReply::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void CursorGetDuplicatePositionReply::Swap(CursorGetDuplicatePositionReply* other) {
  if (other != this) {
    std::swap(status_, other->status_);
    std::swap(position_, other->position_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CursorGetDuplicatePositionReply::GetTypeName() const {
  return "upscaledb.CursorGetDuplicatePositionReply";
}


// ===================================================================

#ifndef _MSC_VER
const int CursorOverwriteRequest::kCursorHandleFieldNumber;
const int CursorOverwriteRequest::kRecordFieldNumber;
const int CursorOverwriteRequest::kFlagsFieldNumber;
#endif  // !_MSC_VER

CursorOverwriteRequest::CursorOverwriteRequest()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:upscaledb.CursorOverwriteRequest)
}

void CursorOverwriteRequest::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  record_ = const_cast< ::upscaledb::Record*>(
      ::upscaledb::Record::internal_default_instance());
#else
  record_ = const_cast< ::upscaledb::Record*>(&::upscaledb::Record::default_instance());
#endif
}

CursorOverwriteRequest::CursorOverwriteRequest(const CursorOverwriteRequest& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:upscaledb.CursorOverwriteRequest)
}

void CursorOverwriteRequest::SharedCtor() {
  _cached_size_ = 0;
  cursor_handle_ = GOOGLE_ULONGLONG(0);
  record_ = NULL;
  flags_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CursorOverwriteRequest::~CursorOverwriteRequest() {
  // @@protoc_insertion_point(destructor:upscaledb.CursorOverwriteRequest)
  SharedDtor();
}

void CursorOverwriteRequest::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete record_;
  }
}

void CursorOverwriteRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CursorOverwriteRequest& CursorOverwriteRequest::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_messages_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_messages_2eproto();
#endif
  return *default_instance_;
}

CursorOverwriteRequest* CursorOverwriteRequest::default_instance_ = NULL;

CursorOverwriteRequest* CursorOverwriteRequest::New() const {
  return new CursorOverwriteRequest;
}

void CursorOverwriteRequest::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    cursor_handle_ = GOOGLE_ULONGLONG(0);
    if (has_record()) {
      if (record_ != NULL) record_->::upscaledb::Record::Clear();
    }
    flags_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool CursorOverwriteRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:upscaledb.CursorOverwriteRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 cursor_handle = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &cursor_handle_)));
          set_has_cursor_handle();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_record;
        break;
      }

      // required .upscaledb.Record record = 2;
      case 2: {
        if (tag == 18) {
         parse_record:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_record()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_flags;
        break;
      }

      // required uint32 flags = 3;
      case 3: {
        if (tag == 24) {
         parse_flags:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &flags_)));
          set_has_flags();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:upscaledb.CursorOverwriteRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:upscaledb.CursorOverwriteRequest)
  return false;
#undef DO_
}

void CursorOverwriteRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:upscaledb.CursorOverwriteRequest)
  // required uint64 cursor_handle = 1;
  if (has_cursor_handle()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->cursor_handle(), output);
  }

  // required .upscaledb.Record record = 2;
  if (has_record()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, this->record(), output);
  }

  // required uint32 flags = 3;
  if (has_flags()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->flags(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:upscaledb.CursorOverwriteRequest)
}

int CursorOverwriteRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 cursor_handle = 1;
    if (has_cursor_handle()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->cursor_handle());
    }

    // required .upscaledb.Record record = 2;
    if (has_record()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->record());
    }

    // required uint32 flags = 3;
    if (has_flags()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->flags());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CursorOverwriteRequest::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CursorOverwriteRequest*>(&from));
}

void CursorOverwriteRequest::MergeFrom(const CursorOverwriteRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cursor_handle()) {
      set_cursor_handle(from.cursor_handle());
    }
    if (from.has_record()) {
      mutable_record()->::upscaledb::Record::MergeFrom(from.record());
    }
    if (from.has_flags()) {
      set_flags(from.flags());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void CursorOverwriteRequest::CopyFrom(const CursorOverwriteRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CursorOverwriteRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  if (has_record()) {
    if (!this->record().IsInitialized()) return false;
  }
  return true;
}

void CursorOverwriteRequest::Swap(CursorOverwriteRequest* other) {
  if (other != this) {
    std::swap(cursor_handle_, other->cursor_handle_);
    std::swap(record_, other->record_);
    std::swap(flags_, other->flags_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CursorOverwriteRequest::GetTypeName() const {
  return "upscaledb.CursorOverwriteRequest";
}


// ===================================================================

#ifndef _MSC_VER
const int CursorOverwriteReply::kStatusFieldNumber;
#endif  // !_MSC_VER

CursorOverwriteReply::CursorOverwriteReply()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:upscaledb.CursorOverwriteReply)
}

void CursorOverwriteReply::InitAsDefaultInstance() {
}

CursorOverwriteReply::CursorOverwriteReply(const CursorOverwriteReply& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:upscaledb.CursorOverwriteReply)
}

void CursorOverwriteReply::SharedCtor() {
  _cached_size_ = 0;
  status_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CursorOverwriteReply::~CursorOverwriteReply() {
  // @@protoc_insertion_point(destructor:upscaledb.CursorOverwriteReply)
  SharedDtor();
}

void CursorOverwriteReply::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CursorOverwriteReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CursorOverwriteReply& CursorOverwriteReply::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_messages_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_messages_2eproto();
#endif
  return *default_instance_;
}

CursorOverwriteReply* CursorOverwriteReply::default_instance_ = NULL;

CursorOverwriteReply* CursorOverwriteReply::New() const {
  return new CursorOverwriteReply;
}

void CursorOverwriteReply::Clear() {
  status_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool CursorOverwriteReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:upscaledb.CursorOverwriteReply)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required sint32 status = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &status_)));
          set_has_status();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:upscaledb.CursorOverwriteReply)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:upscaledb.CursorOverwriteReply)
  return false;
#undef DO_
}

void CursorOverwriteReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:upscaledb.CursorOverwriteReply)
  // required sint32 status = 1;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(1, this->status(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:upscaledb.CursorOverwriteReply)
}

int CursorOverwriteReply::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required sint32 status = 1;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->status());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CursorOverwriteReply::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CursorOverwriteReply*>(&from));
}

void CursorOverwriteReply::MergeFrom(const CursorOverwriteReply& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_status()) {
      set_status(from.status());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void CursorOverwriteReply::CopyFrom(const CursorOverwriteReply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CursorOverwriteReply::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void CursorOverwriteReply::Swap(CursorOverwriteReply* other) {
  if (other != this) {
    std::swap(status_, other->status_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CursorOverwriteReply::GetTypeName() const {
  return "upscaledb.CursorOverwriteReply";
}


// ===================================================================

#ifndef _MSC_VER
const int CursorMoveRequest::kCursorHandleFieldNumber;
const int CursorMoveRequest::kKeyFieldNumber;
const int CursorMoveRequest::kRecordFieldNumber;
const int CursorMoveRequest::kFlagsFieldNumber;
#endif  // !_MSC_VER

CursorMoveRequest::CursorMoveRequest()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:upscaledb.CursorMoveRequest)
}

void CursorMoveRequest::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  key_ = const_cast< ::upscaledb::Key*>(
      ::upscaledb::Key::internal_default_instance());
#else
  key_ = const_cast< ::upscaledb::Key*>(&::upscaledb::Key::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  record_ = const_cast< ::upscaledb::Record*>(
      ::upscaledb::Record::internal_default_instance());
#else
  record_ = const_cast< ::upscaledb::Record*>(&::upscaledb::Record::default_instance());
#endif
}

CursorMoveRequest::CursorMoveRequest(const CursorMoveRequest& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:upscaledb.CursorMoveRequest)
}

void CursorMoveRequest::SharedCtor() {
  _cached_size_ = 0;
  cursor_handle_ = GOOGLE_ULONGLONG(0);
  key_ = NULL;
  record_ = NULL;
  flags_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CursorMoveRequest::~CursorMoveRequest() {
  // @@protoc_insertion_point(destructor:upscaledb.CursorMoveRequest)
  SharedDtor();
}

void CursorMoveRequest::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete key_;
    delete record_;
  }
}

void CursorMoveRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CursorMoveRequest& CursorMoveRequest::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_messages_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_messages_2eproto();
#endif
  return *default_instance_;
}

CursorMoveRequest* CursorMoveRequest::default_instance_ = NULL;

CursorMoveRequest* CursorMoveRequest::New() const {
  return new CursorMoveRequest;
}

void CursorMoveRequest::Clear() {
  if (_has_bits_[0 / 32] & 15) {
    cursor_handle_ = GOOGLE_ULONGLONG(0);
    if (has_key()) {
      if (key_ != NULL) key_->::upscaledb::Key::Clear();
    }
    if (has_record()) {
      if (record_ != NULL) record_->::upscaledb::Record::Clear();
    }
    flags_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool CursorMoveRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:upscaledb.CursorMoveRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 cursor_handle = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &cursor_handle_)));
          set_has_cursor_handle();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_key;
        break;
      }

      // optional .upscaledb.Key key = 2;
      case 2: {
        if (tag == 18) {
         parse_key:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_key()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_record;
        break;
      }

      // optional .upscaledb.Record record = 3;
      case 3: {
        if (tag == 26) {
         parse_record:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_record()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_flags;
        break;
      }

      // required uint32 flags = 4;
      case 4: {
        if (tag == 32) {
         parse_flags:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &flags_)));
          set_has_flags();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:upscaledb.CursorMoveRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:upscaledb.CursorMoveRequest)
  return false;
#undef DO_
}

void CursorMoveRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:upscaledb.CursorMoveRequest)
  // required uint64 cursor_handle = 1;
  if (has_cursor_handle()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->cursor_handle(), output);
  }

  // optional .upscaledb.Key key = 2;
  if (has_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, this->key(), output);
  }

  // optional .upscaledb.Record record = 3;
  if (has_record()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      3, this->record(), output);
  }

  // required uint32 flags = 4;
  if (has_flags()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->flags(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:upscaledb.CursorMoveRequest)
}

int CursorMoveRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 cursor_handle = 1;
    if (has_cursor_handle()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->cursor_handle());
    }

    // optional .upscaledb.Key key = 2;
    if (has_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->key());
    }

    // optional .upscaledb.Record record = 3;
    if (has_record()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->record());
    }

    // required uint32 flags = 4;
    if (has_flags()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->flags());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CursorMoveRequest::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CursorMoveRequest*>(&from));
}

void CursorMoveRequest::MergeFrom(const CursorMoveRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cursor_handle()) {
      set_cursor_handle(from.cursor_handle());
    }
    if (from.has_key()) {
      mutable_key()->::upscaledb::Key::MergeFrom(from.key());
    }
    if (from.has_record()) {
      mutable_record()->::upscaledb::Record::MergeFrom(from.record());
    }
    if (from.has_flags()) {
      set_flags(from.flags());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void CursorMoveRequest::CopyFrom(const CursorMoveRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CursorMoveRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000009) != 0x00000009) return false;

  if (has_key()) {
    if (!this->key().IsInitialized()) return false;
  }
  if (has_record()) {
    if (!this->record().IsInitialized()) return false;
  }
  return true;
}

void CursorMoveRequest::Swap(CursorMoveRequest* other) {
  if (other != this) {
    std::swap(cursor_handle_, other->cursor_handle_);
    std::swap(key_, other->key_);
    std::swap(record_, other->record_);
    std::swap(flags_, other->flags_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CursorMoveRequest::GetTypeName() const {
  return "upscaledb.CursorMoveRequest";
}


// ===================================================================

#ifndef _MSC_VER
const int CursorMoveReply::kStatusFieldNumber;
const int CursorMoveReply::kKeyFieldNumber;
const int CursorMoveReply::kRecordFieldNumber;
#endif  // !_MSC_VER

CursorMoveReply::CursorMoveReply()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:upscaledb.CursorMoveReply)
}

void CursorMoveReply::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  key_ = const_cast< ::upscaledb::Key*>(
      ::upscaledb::Key::internal_default_instance());
#else
  key_ = const_cast< ::upscaledb::Key*>(&::upscaledb::Key::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  record_ = const_cast< ::upscaledb::Record*>(
      ::upscaledb::Record::internal_default_instance());
#else
  record_ = const_cast< ::upscaledb::Record*>(&::upscaledb::Record::default_instance());
#endif
}

CursorMoveReply::CursorMoveReply(const CursorMoveReply& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:upscaledb.CursorMoveReply)
}

void CursorMoveReply::SharedCtor() {
  _cached_size_ = 0;
  status_ = 0;
  key_ = NULL;
  record_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CursorMoveReply::~CursorMoveReply() {
  // @@protoc_insertion_point(destructor:upscaledb.CursorMoveReply)
  SharedDtor();
}

void CursorMoveReply::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete key_;
    delete record_;
  }
}

void CursorMoveReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CursorMoveReply& CursorMoveReply::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_messages_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_messages_2eproto();
#endif
  return *default_instance_;
}

CursorMoveReply* CursorMoveReply::default_instance_ = NULL;

CursorMoveReply* CursorMoveReply::New() const {
  return new CursorMoveReply;
}

void CursorMoveReply::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    status_ = 0;
    if (has_key()) {
      if (key_ != NULL) key_->::upscaledb::Key::Clear();
    }
    if (has_record()) {
      if (record_ != NULL) record_->::upscaledb::Record::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool CursorMoveReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:upscaledb.CursorMoveReply)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required sint32 status = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &status_)));
          set_has_status();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_key;
        break;
      }

      // optional .upscaledb.Key key = 2;
      case 2: {
        if (tag == 18) {
         parse_key:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_key()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_record;
        break;
      }

      // optional .upscaledb.Record record = 3;
      case 3: {
        if (tag == 26) {
         parse_record:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_record()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:upscaledb.CursorMoveReply)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:upscaledb.CursorMoveReply)
  return false;
#undef DO_
}

void CursorMoveReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:upscaledb.CursorMoveReply)
  // required sint32 status = 1;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(1, this->status(), output);
  }

  // optional .upscaledb.Key key = 2;
  if (has_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, this->key(), output);
  }

  // optional .upscaledb.Record record = 3;
  if (has_record()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      3, this->record(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:upscaledb.CursorMoveReply)
}

int CursorMoveReply::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required sint32 status = 1;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->status());
    }

    // optional .upscaledb.Key key = 2;
    if (has_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->key());
    }

    // optional .upscaledb.Record record = 3;
    if (has_record()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->record());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CursorMoveReply::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CursorMoveReply*>(&from));
}

void CursorMoveReply::MergeFrom(const CursorMoveReply& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_status()) {
      set_status(from.status());
    }
    if (from.has_key()) {
      mutable_key()->::upscaledb::Key::MergeFrom(from.key());
    }
    if (from.has_record()) {
      mutable_record()->::upscaledb::Record::MergeFrom(from.record());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void CursorMoveReply::CopyFrom(const CursorMoveReply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CursorMoveReply::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_key()) {
    if (!this->key().IsInitialized()) return false;
  }
  if (has_record()) {
    if (!this->record().IsInitialized()) return false;
  }
  return true;
}

void CursorMoveReply::Swap(CursorMoveReply* other) {
  if (other != this) {
    std::swap(status_, other->status_);
    std::swap(key_, other->key_);
    std::swap(record_, other->record_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CursorMoveReply::GetTypeName() const {
  return "upscaledb.CursorMoveReply";
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace upscaledb

// @@protoc_insertion_point(global_scope)

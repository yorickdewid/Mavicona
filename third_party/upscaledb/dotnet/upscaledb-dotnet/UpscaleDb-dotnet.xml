<?xml version="1.0"?>
<doc>
    <assembly>
        <name>UpscaleDb-dotnet</name>
    </assembly>
    <members>
        <member name="T:Upscaledb.Result">
            <summary>
            A UQI Result class
            </summary>
        </member>
        <member name="M:Upscaledb.Result.#ctor(System.IntPtr)">
            <summary>
            Constructor which creates a new Result
            </summary>
            <param name="handle">The internal upscaledb handle</param>
        </member>
        <member name="M:Upscaledb.Result.Close">
            <summary>
            Closes the Cursor
            </summary>
            <remarks>
            This method wraps the native uqi_result_close function.
            <br />
            Closes this Result and frees allocated memory.
            </remarks>
        </member>
        <member name="M:Upscaledb.Result.GetRowCount">
            <summary>
            Returns the number of rows.
            </summary>
        </member>
        <member name="M:Upscaledb.Result.GetKeyType">
            <summary>
            Returns the key type.
            </summary>
        </member>
        <member name="M:Upscaledb.Result.GetRecordType">
            <summary>
            Returns the record type.
            </summary>
        </member>
        <member name="M:Upscaledb.Result.GetKey(System.Int32)">
            <summary>
            Returns the key of a specific row.
            </summary>
        </member>
        <member name="M:Upscaledb.Result.GetRecord(System.Int32)">
            <summary>
            Returns the record of a specific row.
            </summary>
        </member>
        <member name="M:Upscaledb.Result.Dispose">
            <summary>
            Closes the Result.
            </summary>
            <see cref="M:Upscaledb.Result.Close"/>
        </member>
        <member name="T:Upscaledb.UpsConst">
            <summary>
            Upscaledb constants - error codes and flags
            </summary>
        </member>
        <member name="F:Upscaledb.UpsConst.UPS_SUCCESS">
            <summary>Operation completed successfully</summary>
        </member>
        <member name="F:Upscaledb.UpsConst.UPS_INV_RECORD_SIZE">
            <summary>Invalid record size</summary>
        </member>
        <member name="F:Upscaledb.UpsConst.UPS_INV_KEY_SIZE">
            <summary>Invalid key size</summary>
        </member>
        <member name="F:Upscaledb.UpsConst.UPS_INV_KEYSIZE">
            <summary>Invalid key size</summary>
        </member>
        <member name="F:Upscaledb.UpsConst.UPS_INV_PAGESIZE">
            <summary>Invalid page size (must be 1024 or a multiple of 2048)</summary>
        </member>
        <member name="F:Upscaledb.UpsConst.UPS_OUT_OF_MEMORY">
            <summary>Memory allocation failed - out of memory</summary>
        </member>
        <member name="F:Upscaledb.UpsConst.UPS_INV_PARAMETER">
            <summary>Invalid function parameter</summary>
        </member>
        <member name="F:Upscaledb.UpsConst.UPS_INV_FILE_HEADER">
            <summary>Invalid file header</summary>
        </member>
        <member name="F:Upscaledb.UpsConst.UPS_INV_FILE_VERSION">
            <summary>Invalid file version</summary>
        </member>
        <member name="F:Upscaledb.UpsConst.UPS_KEY_NOT_FOUND">
            <summary>Key was not found</summary>
        </member>
        <member name="F:Upscaledb.UpsConst.UPS_DUPLICATE_KEY">
            <summary>Tried to insert a key which already exists</summary>
        </member>
        <member name="F:Upscaledb.UpsConst.UPS_INTEGRITY_VIOLATED">
            <summary>Internal Database integrity violated</summary>
        </member>
        <member name="F:Upscaledb.UpsConst.UPS_INTERNAL_ERROR">
            <summary>Internal upscaledb error</summary>
        </member>
        <member name="F:Upscaledb.UpsConst.UPS_WRITE_PROTECTED">
            <summary>Tried to modify the Database, but the file was opened as read-only</summary>
        </member>
        <member name="F:Upscaledb.UpsConst.UPS_BLOB_NOT_FOUND">
            <summary>Database record not found</summary>
        </member>
        <member name="F:Upscaledb.UpsConst.UPS_PREFIX_REQUEST_FULLKEY">
            <summary>Prefix comparison function needs more data</summary>
        </member>
        <member name="F:Upscaledb.UpsConst.UPS_IO_ERROR">
            <summary>Generic file I/O error</summary>
        </member>
        <member name="F:Upscaledb.UpsConst.UPS_NOT_IMPLEMENTED">
            <summary>Function is not yet implemented</summary>
        </member>
        <member name="F:Upscaledb.UpsConst.UPS_FILE_NOT_FOUND">
            <summary>File not found</summary>
        </member>
        <member name="F:Upscaledb.UpsConst.UPS_WOULD_BLOCK">
            <summary>Operation would block</summary>
        </member>
        <member name="F:Upscaledb.UpsConst.UPS_NOT_READY">
            <summary>Object was not initialized correctly</summary>
        </member>
        <member name="F:Upscaledb.UpsConst.UPS_LIMITS_REACHED">
            <summary>Database limits reached</summary>
        </member>
        <member name="F:Upscaledb.UpsConst.UPS_ALREADY_INITIALIZED">
            <summary>Object was already initialized</summary>
        </member>
        <member name="F:Upscaledb.UpsConst.UPS_NEED_RECOVERY">
            <summary>Database needs recovery</summary>
        </member>
        <member name="F:Upscaledb.UpsConst.UPS_CURSOR_STILL_OPEN">
            <summary>Cursor must be closed prior to Transaction abort/commit</summary>
        </member>
        <member name="F:Upscaledb.UpsConst.UPS_TXN_CONFLICT">
            <summary>Operation conflicts with another Transaction</summary>
        </member>
        <member name="F:Upscaledb.UpsConst.UPS_TXN_STIL_OPEN">
            <summary>Database cannot be closed because it is modified in a Transaction</summary>
        </member>
        <member name="F:Upscaledb.UpsConst.UPS_CURSOR_IS_NIL">
            <summary>Cursor does not point to a valid item</summary>
        </member>
        <member name="F:Upscaledb.UpsConst.UPS_DATABASE_NOT_FOUND">
            <summary>Database not found</summary>
        </member>
        <member name="F:Upscaledb.UpsConst.UPS_DATABASE_ALREADY_EXISTS">
            <summary>Database name already exists</summary>
        </member>
        <member name="F:Upscaledb.UpsConst.UPS_DATABASE_ALREADY_OPEN">
            <summary>Database already open, or: Database handle is already initialized</summary>
        </member>
        <member name="F:Upscaledb.UpsConst.UPS_ENVIRONMENT_ALREADY_OPEN">
            <summary>Environment already open, or: Environment handle is already initialized</summary>
        </member>
        <member name="F:Upscaledb.UpsConst.UPS_LOG_INV_FILE_HEADER">
            <summary>Invalid log file header</summary>
        </member>
        <member name="F:Upscaledb.UpsConst.UPS_DEBUG_LEVEL_DEBUG">
            <summary>A debug message</summary>
        </member>
        <member name="F:Upscaledb.UpsConst.UPS_DEBUG_LEVEL_NORMAL">
            <summary>A normal error message</summary>
        </member>
        <member name="F:Upscaledb.UpsConst.UPS_DEBUG_LEVEL_FATAL">
            <summary>A fatal error message</summary>
        </member>
        <member name="F:Upscaledb.UpsConst.UPS_TXN_READ_ONLY">
            <summary>Flag for Transaction.Begin</summary>
        </member>
        <member name="F:Upscaledb.UpsConst.UPS_TXN_FORCE_WRITE">
            <summary>Flag for Transaction.Commit</summary>
        </member>
        <member name="F:Upscaledb.UpsConst.UPS_ENABLE_FSYNC">
            <summary>Flag for Database.Open, Database.Create</summary>
        </member>
        <member name="F:Upscaledb.UpsConst.UPS_READ_ONLY">
            <summary>Flag for Database.Open</summary>
        </member>
        <member name="F:Upscaledb.UpsConst.UPS_IN_MEMORY">
            <summary>Flag for Database.Create</summary>
        </member>
        <member name="F:Upscaledb.UpsConst.UPS_DISABLE_MMAP">
            <summary>Flag for Database.Open, Database.Create</summary>
        </member>
        <member name="F:Upscaledb.UpsConst.UPS_DISABLE_FREELIST_FLUSH">
            <summary>Flag for Database.Open, Database.Create</summary>
        </member>
        <member name="F:Upscaledb.UpsConst.UPS_RECORD_NUMBER32">
            <summary>Flag for Database.Create</summary>
        </member>
        <member name="F:Upscaledb.UpsConst.UPS_RECORD_NUMBER64">
            <summary>Flag for Database.Create</summary>
        </member>
        <member name="F:Upscaledb.UpsConst.UPS_RECORD_NUMBER">
            <summary>Flag for Database.Create (deprecated)</summary>
        </member>
        <member name="F:Upscaledb.UpsConst.UPS_ENABLE_DUPLICATE_KEYS">
            <summary>Flag for Database.Create</summary>
        </member>
        <member name="F:Upscaledb.UpsConst.UPS_ENABLE_RECOVERY">
            <summary>Flag for Database.Create</summary>
        </member>
        <member name="F:Upscaledb.UpsConst.UPS_AUTO_RECOVERY">
            <summary>Flag for Database.Open</summary>
        </member>
        <member name="F:Upscaledb.UpsConst.UPS_ENABLE_TRANSACTIONS">
            <summary>Flag for Database.Create, Database.Open</summary>
        </member>
        <member name="F:Upscaledb.UpsConst.UPS_CACHE_UNLIMITED">
            <summary>Flag for Database.Create, Database.Open</summary>
        </member>
        <member name="F:Upscaledb.UpsConst.UPS_FLUSH_WHEN_COMMITTED">
            <summary>Flag for Environment.Create, Environment.Open</summary>
        </member>
        <member name="F:Upscaledb.UpsConst.UPS_ENABLE_CRC32">
            <summary>Flag for Environment.Create, Environment.Open</summary>
        </member>
        <member name="F:Upscaledb.UpsConst.UPS_PARAM_CACHE_SIZE">
            <summary>Parameter name for Environment.Open,
            Environment.Create</summary>
        </member>
        <member name="F:Upscaledb.UpsConst.UPS_PARAM_CACHESIZE">
            <summary>Parameter name for Environment.Open,
            Environment.Create (deprecated)</summary>
        </member>
        <member name="F:Upscaledb.UpsConst.UPS_PARAM_PAGE_SIZE">
            <summary>Parameter name for Environment.Create</summary>
        </member>
        <member name="F:Upscaledb.UpsConst.UPS_PARAM_PAGESIZE">
            <summary>Parameter name for Environment.Create (deprecated)</summary>
        </member>
        <member name="F:Upscaledb.UpsConst.UPS_PARAM_KEY_SIZE">
            <summary>Parameter name for Database.Create</summary>
        </member>
        <member name="F:Upscaledb.UpsConst.UPS_PARAM_KEYSIZE">
            <summary>Parameter name for Database.Create (deprecated)</summary>
        </member>
        <member name="F:Upscaledb.UpsConst.UPS_PARAM_MAX_DATABASES">
            <summary>Parameter name for GetParameters</summary>
        </member>
        <member name="F:Upscaledb.UpsConst.UPS_PARAM_KEY_TYPE">
            <summary>Parameter name for Database.Create</summary>
        </member>
        <member name="F:Upscaledb.UpsConst.UPS_PARAM_NETWORK_TIMEOUT_SEC">
            <summary>Parameter name for Environment.Open, Environment.Create</summary>
        </member>
        <member name="F:Upscaledb.UpsConst.UPS_PARAM_RECORD_SIZE">
            <summary>Parameter name for Database.Create</summary>
        </member>
        <member name="F:Upscaledb.UpsConst.UPS_PARAM_FILE_SIZE_LIMIT">
            <summary>Parameter name for Environment.Create,
            Environment.Open</summary>
        </member>
        <member name="F:Upscaledb.UpsConst.UPS_PARAM_CUSTOM_COMPARE_NAME">
            <summary>Parameter name for Database.Create</summary>
        </member>
        <member name="F:Upscaledb.UpsConst.UPS_PARAM_FLAGS">
            <summary>Parameter for GetParameters</summary>
        </member>
        <member name="F:Upscaledb.UpsConst.UPS_PARAM_FILEMODE">
            <summary>Parameter for GetParameters</summary>
        </member>
        <member name="F:Upscaledb.UpsConst.UPS_PARAM_FILENAME">
            <summary>Parameter for GetParameters</summary>
        </member>
        <member name="F:Upscaledb.UpsConst.UPS_PARAM_DATABASE_NAME">
            <summary>Parameter for GetParameters</summary>
        </member>
        <member name="F:Upscaledb.UpsConst.UPS_PARAM_MAX_KEYS_PER_PAGE">
            <summary>Parameter for GetParameters</summary>
        </member>
        <member name="F:Upscaledb.UpsConst.UPS_KEY_SIZE_UNLIMITED">
            <summary>Value for UPS_PARAM_KEY_SIZE</summary>
        </member>
        <member name="F:Upscaledb.UpsConst.UPS_RECORD_SIZE_UNLIMITED">
            <summary>Value for UPS_PARAM_RECORD_SIZE</summary>
        </member>
        <member name="F:Upscaledb.UpsConst.UPS_PARAM_JOURNAL_COMPRESSION">
            <summary>Value for Environment.Create, /// Environment.Open</summary>
        </member>
        <member name="F:Upscaledb.UpsConst.UPS_PARAM_RECORD_COMPRESSION">
            <summary>Value for Database.Create, /// Database.Open</summary>
        </member>
        <member name="F:Upscaledb.UpsConst.UPS_PARAM_KEY_COMPRESSION">
            <summary>Value for Database.Create, /// Database.Open</summary>
        </member>
        <member name="F:Upscaledb.UpsConst.UPS_COMPRESSION_NONE">
            <summary>"null" compression</summary>
        </member>
        <member name="F:Upscaledb.UpsConst.UPS_COMPRESSION_ZLIB">
            <summary>zlib compression</summary>
        </member>
        <member name="F:Upscaledb.UpsConst.UPS_COMPRESSION_SNAPPY">
            <summary>snappy compression</summary>
        </member>
        <member name="F:Upscaledb.UpsConst.UPS_COMPRESSION_LZF">
            <summary>lzf compression</summary>
        </member>
        <member name="F:Upscaledb.UpsConst.UPS_COMPRESSION_LZOP">
            <summary>lzop compression</summary>
        </member>
        <member name="F:Upscaledb.UpsConst.UPS_OVERWRITE">
            <summary>Flag for Database.Insert, Cursor.Insert</summary>
        </member>
        <member name="F:Upscaledb.UpsConst.UPS_DUPLICATE">
            <summary>Flag for Database.Insert, Cursor.Insert</summary>
        </member>
        <member name="F:Upscaledb.UpsConst.UPS_DUPLICATE_INSERT_BEFORE">
            <summary>Flag for Cursor.Insert</summary>
        </member>
        <member name="F:Upscaledb.UpsConst.UPS_DUPLICATE_INSERT_AFTER">
            <summary>Flag for Cursor.Insert</summary>
        </member>
        <member name="F:Upscaledb.UpsConst.UPS_DUPLICATE_INSERT_FIRST">
            <summary>Flag for Cursor.Insert</summary>
        </member>
        <member name="F:Upscaledb.UpsConst.UPS_DUPLICATE_INSERT_LAST">
            <summary>Flag for Cursor.Insert</summary>
        </member>
        <member name="F:Upscaledb.UpsConst.UPS_DIRECT_ACCESS">
            <summary>Flag for Database.Find</summary>
        </member>
        <member name="F:Upscaledb.UpsConst.UPS_HINT_APPEND">
            <summary>Flag for Database.Insert</summary>
        </member>
        <member name="F:Upscaledb.UpsConst.UPS_HINT_PREPEND">
            <summary>Flag for Database.Insert</summary>
        </member>
        <member name="F:Upscaledb.UpsConst.UPS_AUTO_CLEANUP">
            <summary>Flag for Database.Close</summary>
        </member>
        <member name="F:Upscaledb.UpsConst.UPS_DONT_CLEAR_LOG">
            <summary>Private flag for testing</summary>
        </member>
        <member name="F:Upscaledb.UpsConst.UPS_TXN_AUTO_ABORT">
            <summary>Flag for Database.Close</summary>
        </member>
        <member name="F:Upscaledb.UpsConst.UPS_TXN_AUTO_COMMIT">
            <summary>Flag for Database.Close</summary>
        </member>
        <member name="F:Upscaledb.UpsConst.UPS_CURSOR_FIRST">
            <summary>Flag for Cursor.Move</summary>
        </member>
        <member name="F:Upscaledb.UpsConst.UPS_CURSOR_LAST">
            <summary>Flag for Cursor.Move</summary>
        </member>
        <member name="F:Upscaledb.UpsConst.UPS_CURSOR_NEXT">
            <summary>Flag for Cursor.Move</summary>
        </member>
        <member name="F:Upscaledb.UpsConst.UPS_CURSOR_PREVIOUS">
            <summary>Flag for Cursor.Move</summary>
        </member>
        <member name="F:Upscaledb.UpsConst.UPS_SKIP_DUPLICATES">
            <summary>Flag for Cursor.Move</summary>
        </member>
        <member name="F:Upscaledb.UpsConst.UPS_ONLY_DUPLICATES">
            <summary>Flag for Cursor.Move</summary>
        </member>
        <member name="F:Upscaledb.UpsConst.UPS_FIND_EQ_MATCH">
            <summary>Flag for Cursor.Find</summary>
        </member>
        <member name="F:Upscaledb.UpsConst.UPS_FIND_LT_MATCH">
            <summary>Flag for Cursor.Find</summary>
        </member>
        <member name="F:Upscaledb.UpsConst.UPS_FIND_GT_MATCH">
            <summary>Flag for Cursor.Find</summary>
        </member>
        <member name="F:Upscaledb.UpsConst.UPS_FIND_LEQ_MATCH">
            <summary>Flag for Cursor.Find</summary>
        </member>
        <member name="F:Upscaledb.UpsConst.UPS_FIND_GEQ_MATCH">
            <summary>Flag for Cursor.Find</summary>
        </member>
        <member name="F:Upscaledb.UpsConst.UPS_TYPE_BINARY">
            <summary>A binary blob without type; sorted by memcmp</summary>
        </member>
        <member name="F:Upscaledb.UpsConst.UPS_TYPE_CUSTOM">
            <summary>A binary blob without type; sorted by callback function</summary>
        </member>
        <member name="F:Upscaledb.UpsConst.UPS_TYPE_UINT8">
            <summary>An unsigned 8-bit integer</summary>
        </member>
        <member name="F:Upscaledb.UpsConst.UPS_TYPE_UINT16">
            <summary>An unsigned 16-bit integer</summary>
        </member>
        <member name="F:Upscaledb.UpsConst.UPS_TYPE_UINT32">
            <summary>An unsigned 32-bit integer</summary>
        </member>
        <member name="F:Upscaledb.UpsConst.UPS_TYPE_UINT64">
            <summary>An unsigned 64-bit integer</summary>
        </member>
        <member name="F:Upscaledb.UpsConst.UPS_TYPE_REAL32">
            <summary>An 32-bit float</summary>
        </member>
        <member name="F:Upscaledb.UpsConst.UPS_TYPE_REAL64">
            <summary>An 64-bit double</summary>
        </member>
        <member name="T:Upscaledb.Cursor">
            <summary>
            A Database Cursor class
            </summary>
        </member>
        <member name="M:Upscaledb.Cursor.#ctor(Upscaledb.Database,System.IntPtr)">
            <summary>
            Constructor which creates a new Cursor
            </summary>
            <param name="db">The Database of this Cursor</param>
            <param name="handle">The handle of this Cursor</param>
        </member>
        <member name="M:Upscaledb.Cursor.#ctor(Upscaledb.Database)">
            <summary>
            Constructor which creates a new Cursor
            </summary>
            <param name="db">The Database of this Cursor</param>
        </member>
        <member name="M:Upscaledb.Cursor.#ctor(Upscaledb.Database,Upscaledb.Transaction)">
            <summary>
            Constructor which creates a new Cursor in a Transaction
            </summary>
        </member>
        <member name="M:Upscaledb.Cursor.Create(Upscaledb.Database)">
             <summary>
             Creates a new Cursor
             </summary>
            
             <see cref="M:Upscaledb.Cursor.Create(Upscaledb.Database,Upscaledb.Transaction)"/>
        </member>
        <member name="M:Upscaledb.Cursor.Create(Upscaledb.Database,Upscaledb.Transaction)">
             <summary>
             Creates a new Cursor in a Transaction
             </summary>
             <remarks>
             This method wraps the native ups_cursor_create function.
             <br/>
             Creates a new Database Cursor. Cursors can be used to traverse
             the Database from start to end or vice versa. Cursors can also
             be used to insert, delete or search Database items.
            
             A newly created Cursor does not point to any item in the Database.
            
             The application should close all Database Cursors before closing
             the Database.
             </remarks>
             <param name="db">The Database object</param>
             <param name="txn">The optional Transaction</param>
             <exception cref="T:Upscaledb.DatabaseException">
               <list type="bullet">
               <item><see cref="F:Upscaledb.UpsConst.UPS_OUT_OF_MEMORY"/>
                 if the new structure could not be allocated</item>
               </list>
             </exception>
        </member>
        <member name="M:Upscaledb.Cursor.Clone">
             <summary>
             Clones a Database Cursor
             </summary>
             <remarks>
             This method wraps the native ups_cursor_clone function.
             <br/>
             Clones an existing Cursor. The new Cursor will point to exactly the
             same item as the old Cursor. If the old Cursor did not point
             to any item, so will the new Cursor.
            
             If the old Cursor is bound to a Transaction, then the new
             Cursor will also be bound to this Transaction.
             </remarks>
             <returns>The new Cursor object</returns>
             <exception cref="T:Upscaledb.DatabaseException">
               <list type="bullet">
               <item><see cref="F:Upscaledb.UpsConst.UPS_OUT_OF_MEMORY"/>
                 if the new structure could not be allocated</item>
               </list>
             </exception>
        </member>
        <member name="M:Upscaledb.Cursor.Move(System.Int32)">
             <summary>
             Moves the Cursor to the direction specified in the flags
             </summary>
             <remarks>
             This method wraps the native ups_cursor_move function.
            
             Moves the Cursor. Use the flags to specify the direction.
             After the move, use Cursor.GetKey and Cursor.GetRecord to
             retrieve key and record of the item.
            
             If the direction is not specified, the Cursor will not move.
             </remarks>
             <param name="flags">The direction for the move. If no direction
             is specified, the Cursor will remain on the current position.
             Possible flags are:
               <list type="bullet">
               <item><see cref="F:Upscaledb.UpsConst.UPS_CURSOR_FIRST"/> positions
                 the Cursor to the first item in the Database</item>
               <item><see cref="F:Upscaledb.UpsConst.UPS_CURSOR_LAST"/> positions
                 the Cursor to the last item in the Database</item>
               <item><see cref="F:Upscaledb.UpsConst.UPS_CURSOR_NEXT"/> positions
                 the Cursor to the next item in the Database; if the Cursor
                 does not point to any item, the function behaves as if
                 direction was <see cref="F:Upscaledb.UpsConst.UPS_CURSOR_FIRST"/>.</item>
               <item><see cref="F:Upscaledb.UpsConst.UPS_CURSOR_PREVIOUS"/> positions
                 the Cursor to the previous item in the Database; if the Cursor
                 does not point to any item, the function behaves as if
                 direction was <see cref="F:Upscaledb.UpsConst.UPS_CURSOR_LAST"/>.</item>
               <item><see cref="F:Upscaledb.UpsConst.UPS_SKIP_DUPLICATES"/> skips
                 duplicate keys of the current key. Not allowed in combination
                 with <see cref="F:Upscaledb.UpsConst.UPS_ONLY_DUPLICATES"/>.</item>
               <item><see cref="F:Upscaledb.UpsConst.UPS_ONLY_DUPLICATES"/> only
                 moves through duplicate keys of the current key. Not allowed
                 in combination with
                 <see cref="F:Upscaledb.UpsConst.UPS_SKIP_DUPLICATES"/>.</item>
               </list>
             </param>
             <exception cref="T:Upscaledb.DatabaseException">
               <list type="bullet">
               <item><see cref="F:Upscaledb.UpsConst.UPS_KEY_NOT_FOUND"/>
                 if the Cursor points to the first (or last) item, and a
                 move to the previous (or next) item was requested</item>
               </list>
             </exception>
        </member>
        <member name="M:Upscaledb.Cursor.MoveFirst">
            <summary>
            Moves the Cursor to the first Database element
            </summary>
            <see cref="M:Upscaledb.Cursor.Move(System.Int32)"/>
        </member>
        <member name="M:Upscaledb.Cursor.MoveLast">
            <summary>
            Moves the Cursor to the last Database element
            </summary>
            <see cref="M:Upscaledb.Cursor.Move(System.Int32)"/>
        </member>
        <member name="M:Upscaledb.Cursor.MoveNext">
            <summary>
            Moves the Cursor to the next Database element
            </summary>
            <see cref="M:Upscaledb.Cursor.Move(System.Int32)"/>
        </member>
        <member name="M:Upscaledb.Cursor.MoveNext(System.Int32)">
            <summary>
            Moves the Cursor to the next Database element
            </summary>
            <see cref="M:Upscaledb.Cursor.Move(System.Int32)"/>
            <param name="flags">Additional flags for the movement</param>
        </member>
        <member name="M:Upscaledb.Cursor.MovePrevious">
            <summary>
            Moves the Cursor to the previous Database element
            </summary>
        </member>
        <member name="M:Upscaledb.Cursor.MovePrevious(System.Int32)">
            <summary>
            Moves the Cursor to the previous Database element
            </summary>
            <see cref="M:Upscaledb.Cursor.Move(System.Int32)"/>
            <param name="flags">Additional flags for the movement</param>
        </member>
        <member name="M:Upscaledb.Cursor.TryMove(System.Byte[]@,System.Byte[]@,System.Int32)">
            <summary>
            Like <see cref="M:Upscaledb.Cursor.Move(System.Int32)"/>, but returns false only if cursor points to the first (or last) item, and a move to the previous (or next) item was requested
            (i.e., when ups_cursor_move returns <see cref="F:Upscaledb.UpsConst.UPS_KEY_NOT_FOUND"/>).
            </summary>
        </member>
        <member name="M:Upscaledb.Cursor.GetKey">
            <summary>
            Retrieves the Key of the current item
            </summary>
            <remarks>
            This method wraps the native ups_cursor_move function.
            <br/>
            Returns the key of the current Database item. Throws
            <see cref="F:Upscaledb.UpsConst.UPS_CURSOR_IS_NIL"/> if the Cursor does
            not point to any item.
            </remarks>
            <returns>The key of the current item</returns>
            <exception cref="T:Upscaledb.DatabaseException">
              <list type="bullet">
              <item><see cref="F:Upscaledb.UpsConst.UPS_CURSOR_IS_NIL"/>
                if the Cursor does not point to any item</item>
              </list>
            </exception>
        </member>
        <member name="M:Upscaledb.Cursor.GetRecord">
            <summary>
            Retrieves the Record of the current item
            </summary>
            <remarks>
            This method wraps the native ups_cursor_move function.
            <br/>
            Returns the record of the current Database item. Throws
            <see cref="F:Upscaledb.UpsConst.UPS_CURSOR_IS_NIL"/> if the Cursor does
            not point to any item.
            </remarks>
            <returns>The record of the current item</returns>
            <exception cref="T:Upscaledb.DatabaseException">
              <list type="bullet">
              <item><see cref="F:Upscaledb.UpsConst.UPS_CURSOR_IS_NIL"/>
                if the Cursor does not point to any item</item>
              </list>
            </exception>
        </member>
        <member name="M:Upscaledb.Cursor.Overwrite(System.Byte[])">
            <summary>
            Overwrites the record of the current item
            </summary>
            <remarks>
            This method wraps the native ups_cursor_overwrite function.
            <br/>
            This function overwrites the record of the current item.
            </remarks>
            <exception cref="T:Upscaledb.DatabaseException">
              <list type="bullet">
              <item><see cref="F:Upscaledb.UpsConst.UPS_CURSOR_IS_NIL"/>
                if the Cursor does not point to any item</item>
              </list>
            </exception>
        </member>
        <member name="M:Upscaledb.Cursor.Find(System.Byte[])">
            <summary>
            Searches a key and points the Cursor to this key;
            returns the record of the key
            </summary>
        </member>
        <member name="M:Upscaledb.Cursor.Find(System.Byte[]@,System.Int32)">
            <summary>
            Searches a key and points the Cursor to this key
            </summary>
            <remarks>
            This method wraps the native ups_cursor_find function.
            <br/>
            Searches for an item in the Database and points the Cursor to this
            item. If the item could not be found, the Cursor is not modified.
            <br/>
            If the key has multiple duplicates, the Cursor is positioned
            on the first duplicate.
            </remarks>
            <param name="key">The key to search for</param>
            <param name="flags">The flags, can be zero</param>
            <exception cref="T:Upscaledb.DatabaseException">
              <list type="bullet">
              <item><see cref="F:Upscaledb.UpsConst.UPS_KEY_NOT_FOUND"/>
                if the requested key was not found</item>
              </list>
            </exception>
        </member>
        <member name="M:Upscaledb.Cursor.TryFind(System.Byte[]@,System.Int32)">
            <summary>
            Searches for a key and points the Cursor to this key
            </summary>
            <remarks>
            This method wraps the native ups_cursor_find function.
            <br />
            Searches for an item in the Database and points the Cursor to this
            item. If the item could not be found, the Cursor is not modified and the return value is null.
            <br />
            If the key has multiple duplicates, the Cursor is positioned
            on the first duplicate.
            </remarks>
            <param name="key">The key to search for</param>
            <param name="flags">The flags, can be zero</param>
        </member>
        <member name="M:Upscaledb.Cursor.TryFind(System.Byte[],System.Int32)">
            <summary>
            Searches for a key and points the Cursor to this key
            </summary>
            <remarks>
            This method wraps the native ups_cursor_find function.
            <br />
            Searches for an item in the Database and points the Cursor to this
            item. If the item could not be found, the Cursor is not modified and the return value is null.
            <br />
            If the key has multiple duplicates, the Cursor is positioned
            on the first duplicate.
            </remarks>
            <param name="key">The key to search for</param>
            <param name="flags">The flags, can be zero</param>
        </member>
        <member name="M:Upscaledb.Cursor.TryFind(System.Byte[])">
            <summary>
            Searches for a key and points the Cursor to this key
            </summary>
            <remarks>
            This method wraps the native ups_cursor_find function.
            <br />
            Searches for an item in the Database and points the Cursor to this
            item. If the item could not be found, the Cursor is not modified and the return value is null.
            <br />
            If the key has multiple duplicates, the Cursor is positioned
            on the first duplicate.
            </remarks>
            <param name="key">The key to search for</param>
        </member>
        <member name="M:Upscaledb.Cursor.Insert(System.Byte[],System.Byte[])">
            <summary>
            Inserts a Database item and points the Cursor to the new item
            </summary>
            <remarks>
            This is an overloaded function for Insert(key, record, 0).
            </remarks>
            <param name="key">The key of the new item</param>
            <param name="record">The record of the new item</param>
        </member>
        <member name="M:Upscaledb.Cursor.Insert(System.Byte[],System.Byte[],System.Int32)">
            <summary>
            Inserts a Database item and points the Cursor to the new item
            </summary>
            <remarks>
            This method wraps the native ups_cursor_insert function.
            <br/>
            This function inserts a key/record pair as a new Database item.
            If the key already exists in the Database, error
            <see cref="F:Upscaledb.UpsConst.UPS_DUPLICATE_KEY"/> is thrown.
            <br/>
            If you wish to overwrite an existing entry specify the flag
            <see cref="F:Upscaledb.UpsConst.UPS_OVERWRITE"/>
            <br/>
            If you wish to insert a duplicate key specify the flag
            <see cref="F:Upscaledb.UpsConst.UPS_DUPLICATE"/>. (Note that
            the Database has to be created with the flag
            <see cref="F:Upscaledb.UpsConst.UPS_ENABLE_DUPLICATE_KEYS"/> in order
            to use duplicate keys.)
            By default, the duplicate key is inserted after all other duplicate
            keys (<see cref="F:Upscaledb.UpsConst.UPS_DUPLICATE_INSERT_LAST"/>). This
            behaviour can be overwritten by specifying
            <see cref="F:Upscaledb.UpsConst.UPS_DUPLICATE_INSERT_FIRST"/>,
            <see cref="F:Upscaledb.UpsConst.UPS_DUPLICATE_INSERT_BEFORE"/> or
            <see cref="F:Upscaledb.UpsConst.UPS_DUPLICATE_INSERT_AFTER"/>.
            <br/>
            Specify the flag <see cref="F:Upscaledb.UpsConst.UPS_HINT_APPEND"/> if you
            insert sequential data and the current key is higher than any
            other key in this Database. In this case upscaledb will optimize
            the insert algorithm. upscaledb will verify that this key is
            the highest; if not, it will perform a normal insert. This is
            the default for Record Number Databases.
            <br/>
            Specify the flag <see cref="F:Upscaledb.UpsConst.UPS_HINT_PREPEND"/> if you
            insert sequential data and the current key is lower than any
            other key in this Database. In this case upscaledb will optimize
            the insert algorithm. upscaledb will verify that this key is
            the lowest; if not, it will perform a normal insert.
            <br/>
            After inserting, the Cursor will point to the new item. If inserting
            the item failed, the Cursor is not modified.
            </remarks>
            <param name="key">The key of the new item</param>
            <param name="record">The record of the new item</param>
            <param name="flags">Optional flags for this operation, combined
            with bitwise OR. Possible flags are:
            <list type="bullet">
              <item><see cref="F:Upscaledb.UpsConst.UPS_OVERWRITE"/>
                If the key already exists, the record is overwritten.
                Otherwise, the key is inserted.</item>
              <item><see cref="F:Upscaledb.UpsConst.UPS_DUPLICATE"/>
                If the key already exists, a duplicate key is inserted.
                The key is inserted after the already existing duplicates.
                Same as <see cref="F:Upscaledb.UpsConst.UPS_DUPLICATE_INSERT_LAST"/>.
                </item>
              <item><see cref="F:Upscaledb.UpsConst.UPS_DUPLICATE_INSERT_BEFORE"/>
                If the key already exists, a duplicate key is inserted before
                the duplicate pointed to by this Cursor.</item>
              <item><see cref="F:Upscaledb.UpsConst.UPS_DUPLICATE_INSERT_AFTER"/>
                If the key already exists, a duplicate key is inserted after
                the duplicate pointed to by this Cursor.</item>
              <item><see cref="F:Upscaledb.UpsConst.UPS_DUPLICATE_INSERT_FIRST"/>
                If the key already exists, a duplicate key is inserted as
                the first duplicate of the current key.</item>
              <item><see cref="F:Upscaledb.UpsConst.UPS_DUPLICATE_INSERT_LAST"/>
                If the key already exists, a duplicate key is inserted as
                the last duplicate of the current key.</item>
            </list></param>
            <exception cref="T:Upscaledb.DatabaseException">
              <list type="bullet">
              <item><see cref="F:Upscaledb.UpsConst.UPS_INV_PARAMETER"/>
                if the flags UpsConst.UPS_DUPLICATE <b>AND</b>
                UpsConst.UPS_OVERWRITE were specified, or if
                UpsConst.UPS_DUPLICATE was specified but the Database
                was not created with UpsConst.UPS_ENABLE_DUPLICATE_KEYS</item>
              <item><see cref="F:Upscaledb.UpsConst.UPS_WRITE_PROTECTED"/>
                if you tried to insert a key in a read-only Database</item>
              <item><see cref="F:Upscaledb.UpsConst.UPS_INV_KEYSIZE"/>
                if key size is different than than the key size parameter
                specified for Database.Create.</item>
              </list>
            </exception>
        </member>
        <member name="M:Upscaledb.Cursor.Erase">
            <summary>
            Erases the current key
            </summary>
            <remarks>
            This method wraps the native ups_cursor_erase function.
            <br/>
            Erases a key from the Database. If the erase was successfull, the
            Cursor is invalidated, and does no longer point to any item.
            In case of an error, the Cursor is not modified.
            <br/>
            If the Database was opened with the flag
            <see cref="F:Upscaledb.UpsConst.UPS_ENABLE_DUPLICATE_KEYS"/>, this function erases
            only the duplicate item to which the Cursor refers.
            </remarks>
            <exception cref="T:Upscaledb.DatabaseException">
              <list type="bullet">
              <item><see cref="F:Upscaledb.UpsConst.UPS_CURSOR_IS_NIL"/>
                if the Cursor does not point to any item</item>
              <item><see cref="F:Upscaledb.UpsConst.UPS_WRITE_PROTECTED"/>
                if you tried to erase a key from a read-only Database</item>
              </list>
            </exception>
        </member>
        <member name="M:Upscaledb.Cursor.GetDuplicateCount">
            <summary>
            Returns the number of duplicate keys
            </summary>
            <remarks>
            This method wraps the native ups_cursor_get_duplicate_count function.
            <br/>
            Returns the number of duplicate keys of the item to which the
            Cursor currently refers.
            <br/>
            Returns 1 if the key has no duplicates.
            </remarks>
            <returns>The number of duplicate keys of the current item</returns>
            <exception cref="T:Upscaledb.DatabaseException">
              <list type="bullet">
              <item><see cref="F:Upscaledb.UpsConst.UPS_CURSOR_IS_NIL"/>
                if the Cursor does not point to any item</item>
              </list>
            </exception>
        </member>
        <member name="M:Upscaledb.Cursor.Close">
            <summary>
            Closes the Cursor
            </summary>
            <remarks>
            This method wraps the native ups_cursor_close function.
            <br />
            Closes this Cursor and frees allocated memory. All Cursors should
            be closed before closing the Database.
            </remarks>
        </member>
        <member name="M:Upscaledb.Cursor.GetHandle">
            <summary>
            Returns the internal cursor handle.
            </summary>
        </member>
        <member name="M:Upscaledb.Cursor.Dispose">
            <summary>
            Closes the Cursor
            </summary>
            <see cref="M:Upscaledb.Cursor.Close"/>
        </member>
        <member name="T:Upscaledb.Parameter">
            <summary>
            An extended Parameter, used i.e. in Database.Open, Database.Create
            </summary>
        </member>
        <member name="F:Upscaledb.Parameter.name">
            <summary>The name of this Parameter</summary>
        </member>
        <member name="F:Upscaledb.Parameter.value">
            <summary>The value of this Parameter</summary>
        </member>
        <member name="T:Upscaledb.Version">
            <summary>
            Structure for the upscaledb Version Information
            </summary>
            <see cref="M:Upscaledb.Database.GetVersion"/>
        </member>
        <member name="F:Upscaledb.Version.major">
            <summary>The major version number</summary>
        </member>
        <member name="F:Upscaledb.Version.minor">
            <summary>The minor version number</summary>
        </member>
        <member name="F:Upscaledb.Version.revision">
            <summary>The revision version number</summary>
        </member>
        <member name="T:Upscaledb.ErrorHandler">
            <summary>
            Delegate for handling error messages
            </summary>
            <remarks>
            This delegate method is called whenever a message is emitted.
            </remarks>
            <param name="level">The debug level (0 = Debug, 1 = Normal,
            3 = Fatal)</param>
            <param name="message">The message text</param>
        </member>
        <member name="T:Upscaledb.CompareFunc">
             <summary>
             Delegate for comparing two keys
             </summary>
             <remarks>
             This delegate compares two keys - the "left-hand side"
             (lhs) and the "right-hand side" (rhs).
             <br/>
             Also see <see cref="M:Upscaledb.Database.SetCompareFunc(Upscaledb.CompareFunc)"/>.
             
             To convert the parameters to byte[] arrays:
               byte[] alhs = new byte[lhsLength];
               byte[] arhs = new byte[rhsLength];
               Marshal.Copy(lhs, alhs, 0, lhsLength);
               Marshal.Copy(rhs, arhs, 0, rhsLength);
            
             </remarks>
             <returns>-1 if the first key (lhs) is smaller, +1 if the first
             key is larger, 0 if both keys are equal</returns>
        </member>
        <member name="T:Upscaledb.Database">
            <summary>
            A Database class
            </summary>
        </member>
        <member name="M:Upscaledb.Database.#ctor">
            <summary>
            Default Constructor
            </summary>
        </member>
        <member name="M:Upscaledb.Database.Finalize">
            <summary>
            Destructor - automatically closes the Database
            </summary>
        </member>
        <member name="M:Upscaledb.Database.GetVersion">
            <summary>
            Returns the upscaledb.dll version
            </summary>
            <returns>The upscaledb.dll version</returns>
        </member>
        <member name="M:Upscaledb.Database.SetErrorHandler(Upscaledb.ErrorHandler)">
            <summary>
            Sets the global error handler
            </summary>
            <remarks>
            This method wraps the native ups_set_error_handler function.<br />
            <br />
            This handler will receive all debug messages that are emitted
            by upscaledb. You can install the default handler by setting
            eh to null.
            </remarks>
            <param name="eh">The delegate which is called whenever an
            error message is emitted; set to null to set the default
            error handler</param>
        </member>
        <member name="M:Upscaledb.Database.RegisterCompare(System.String,Upscaledb.CompareFunc)">
            <summary>
            Registers a global compare function.
            </summary>
            <remarks>
            This method wraps the native ups_register_compare function.
            </remarks>
            <param name="name">Descriptive name of the compare function</param>
            <param name="foo">Delegate object</param>
        </member>
        <member name="M:Upscaledb.Database.SetCompareFunc(Upscaledb.CompareFunc)">
            <summary>
            Sets the comparison function
            </summary>
            <remarks>
            This method wraps the native ups_db_set_compare_func function.<br/>
            <br/>
            The <see cref="T:Upscaledb.CompareFunc"/> delegate compares two index keys.
            It returns -1 if the first key is smaller, +1 if the second key
            is smaller or 0 if both keys are equal.<br/>
            <br/>
            If <paramref name="foo"/> is null, upscaledb will use the default
            compare function (which is based on memcmp(3)).<br/>
            </remarks>
            <param name="foo">The compare delegate, or null</param>
        </member>
        <member name="M:Upscaledb.Database.GetLastError">
            <summary>
            Returns the last error code
            </summary>
            <remarks>
            This method wraps the native ups_db_get_error function.
            </remarks>
            <returns>The error code of the last operation</returns>
        </member>
        <member name="M:Upscaledb.Database.Find(System.Byte[])">
            <summary>
            Searches an item in the Database, returns the record
            </summary>
        </member>
        <member name="M:Upscaledb.Database.Find(Upscaledb.Transaction,System.Byte[])">
            <summary>
            Searches an item in the Database, returns the record
            </summary>
        </member>
        <member name="M:Upscaledb.Database.Find(Upscaledb.Transaction,System.Byte[]@,System.Int32)">
            <summary>
            Searches an item in the Database, returns the record
            </summary>
            <remarks>
            This method wraps the native ups_db_find function.<br/>
            <br/>
            This function searches the Database for a key. If the key
            is found, the method will return the record of this item.
            <br/>
            Database.Find can not search for duplicate keys. If the
            key has multiple duplicates, only the first duplicate is returned.
            </remarks>
            <param name="txn">The optional Transaction</param>
            <param name="key">The key of the item</param>
            <param name="flags">The flags of the operation</param>
            <returns>The record of the item</returns>
            <exception cref="T:Upscaledb.DatabaseException">
              <list type="bullet">
              <item><see cref="F:Upscaledb.UpsConst.UPS_KEY_NOT_FOUND"/>
                if the item was not found</item>
              </list>
            </exception>
        </member>
        <member name="M:Upscaledb.Database.Insert(Upscaledb.Transaction,System.Byte[],System.Byte[])">
            <summary>
            Inserts a Database item
            </summary>
            <remarks>
            This is an overloaded function for
              Database.Insert(txn, key, record, 0).
            </remarks>
        </member>
        <member name="M:Upscaledb.Database.Insert(System.Byte[],System.Byte[])">
            <summary>
            Inserts a Database item
            </summary>
            <remarks>
            This is an overloaded function for
              Database.Insert(null, key, record, 0).
            </remarks>
        </member>
        <member name="M:Upscaledb.Database.Insert(System.Byte[],System.Byte[],System.Int32)">
            <summary>
            Inserts a Database item
            </summary>
            <remarks>
            This is an overloaded function for
              Database.Insert(null, key, record, flags).
            </remarks>
        </member>
        <member name="M:Upscaledb.Database.Insert(Upscaledb.Transaction,System.Byte[],System.Byte[],System.Int32)">
            <summary>
            Inserts a Database Item
            </summary>
            <remarks>
            This method wraps the native ups_db_insert function.
            <br/>
            This function inserts a key/record pair as a new Database item.
            <br/>
            If the key already exists in the Database, error code
            <see cref="F:Upscaledb.UpsConst.UPS_DUPLICATE_KEY"/> is thrown.
            <br/>
            If you wish to overwrite an existing entry specify the flag
            <see cref="F:Upscaledb.UpsConst.UPS_OVERWRITE"/>
            <br/>
            If you wish to insert a duplicate key specify the flag
            <see cref="F:Upscaledb.UpsConst.UPS_DUPLICATE"/>. (Note that
            the Database has to be created with the flag
            <see cref="F:Upscaledb.UpsConst.UPS_ENABLE_DUPLICATE_KEYS"/> in order
            to use duplicate keys.)
            The duplicate key is inserted after all other duplicate keys (see
            <see cref="F:Upscaledb.UpsConst.UPS_DUPLICATE_INSERT_LAST"/>).
            </remarks>
            <param name="txn">An optional Transaction object</param>
            <param name="key">The key of the new item</param>
            <param name="record">The record of the new item</param>
            <param name="flags">Optional flags for this operation. Possible
            flags are:
            <list type="bullet">
              <item><see cref="F:Upscaledb.UpsConst.UPS_OVERWRITE"/>
                If the key already exists, the record is overwritten.
                Otherwise, the key is inserted.</item>
              <item><see cref="F:Upscaledb.UpsConst.UPS_DUPLICATE"/>
                If the key already exists, a duplicate key is inserted.
                The key is inserted before the already existing duplicates.
                </item>
            </list></param>
            <exception cref="T:Upscaledb.DatabaseException">
              <list type="bullet">
              <item><see cref="F:Upscaledb.UpsConst.UPS_INV_PARAMETER"/>
                if the flags UpsConst.UPS_DUPLICATE <b>AND</b>
                UpsConst.UPS_OVERWRITE were specified, or if
                UpsConst.UPS_DUPLICATE was specified but the Database
                was not created with UpsConst.UPS_ENABLE_DUPLICATE_KEYS</item>
              <item><see cref="F:Upscaledb.UpsConst.UPS_WRITE_PROTECTED"/>
                if you tried to insert a key in a read-only Database</item>
              <item><see cref="F:Upscaledb.UpsConst.UPS_INV_KEYSIZE"/>
                if key size is different than than the key size parameter
                specified for Database.Create.</item>
              </list>
            </exception>
        </member>
        <member name="M:Upscaledb.Database.InsertRecNo(System.Byte[])">
            <summary>
            Inserts a Database Item into a Record Number Database
            </summary>
            <remarks>
            This is an overloaded function for
              Database.InsertRecNo(null, record, 0).
            </remarks>
        </member>
        <member name="M:Upscaledb.Database.InsertRecNo(System.Byte[],System.Int32)">
            <summary>
            Inserts a Database Item into a Record Number Database
            </summary>
            <remarks>
            This is an overloaded function for
              Database.InsertRecNo(null, record, flags).
            </remarks>
        </member>
        <member name="M:Upscaledb.Database.InsertRecNo(Upscaledb.Transaction,System.Byte[],System.Int32)">
            <summary>
            Inserts a Database Item into a Record Number Database
            </summary>
            <returns name="key">The key of the new item</returns>
            <remarks>
            This method wraps the native ups_db_insert function.
            <br/>
            This function inserts a record as a new Database item.
            <br/>
            </remarks>
            <param name="txn">An optional Transaction object</param>
            <param name="record">The record of the new item</param>
            <param name="flags">Optional flags for this operation.</param>
            <exception cref="T:Upscaledb.DatabaseException">
              <list type="bullet">
              <item><see cref="F:Upscaledb.UpsConst.UPS_WRITE_PROTECTED"/>
                if you tried to insert a key in a read-only Database</item>
              </list>
            </exception>
        </member>
        <member name="M:Upscaledb.Database.Erase(System.Byte[])">
            <summary>
            Erases a Database Item
            </summary>
        </member>
        <member name="M:Upscaledb.Database.Erase(Upscaledb.Transaction,System.Byte[])">
            <summary>
            Erases a Database Item
            </summary>
            <remarks>
            This method wraps the native ups_db_erase function.
            <br/>
            This function erases a Database item. If the item with the
            specified key does not exist in the Database, error code
            <see cref="F:Upscaledb.UpsConst.UPS_KEY_NOT_FOUND"/> is thrown.
            <br/>
            Note that this method can not erase a single duplicate key.
            If the key has multiple duplicates, all duplicates of this key
            will be erased. Use <see cref="M:Upscaledb.Cursor.Erase"/> to erase a
            specific duplicate key.
            </remarks>
            <param name="txn">The optional Transaction</param>
            <param name="key">The key of the item to delete</param>
            <exception cref="T:Upscaledb.DatabaseException">
              <list type="bullet">
              <item><see cref="F:Upscaledb.UpsConst.UPS_KEY_NOT_FOUND"/>
                if the key was not found</item>
              <item><see cref="F:Upscaledb.UpsConst.UPS_WRITE_PROTECTED"/>
                if you tried to insert a key in a read-only Database</item>
              </list>
            </exception>
        </member>
        <member name="M:Upscaledb.Database.GetCount(System.Int32)">
            <summary>
            Returns the number of keys in this Database
            </summary>
        </member>
        <member name="M:Upscaledb.Database.GetCount">
            <summary>
            Returns the number of keys in this Database
            </summary>
        </member>
        <member name="M:Upscaledb.Database.GetCount(Upscaledb.Transaction,System.Int32)">
            <summary>
            Returns the number of keys in this Database
            </summary>
            <remarks>
            This method wraps the native ups_db_count function.
            <br />
            You can specify UPS_SKIP_DUPLICATES if you do now want
            to include any duplicates in the count.
            </remarks>
        </member>
        <member name="M:Upscaledb.Database.Close">
            <summary>
            Closes the Database
            </summary>
            <remarks>
            This method wraps the native ups_db_close function.
            <br />
            Before closing the Database, the cache is flushed to Disk.
            </remarks>
        </member>
        <member name="M:Upscaledb.Database.Dispose">
            <summary>
            Closes the Database
            </summary>
        </member>
        <member name="M:Upscaledb.Database.Dispose(System.Boolean)">
            <summary>
            Closes the Database
            </summary>
        </member>
        <member name="M:Upscaledb.Database.AddCursor(Upscaledb.Cursor)">
            <summary>
            Adds a Cursor to the Cursor list
            </summary>
        </member>
        <member name="M:Upscaledb.Database.RemoveCursor(Upscaledb.Cursor)">
            <summary>
            Removes a Cursor from the Cursor list
            </summary>
        </member>
        <member name="P:Upscaledb.Database.Handle">
            <summary>
            Returns the low-level Database handle
            </summary>
        </member>
        <member name="T:Upscaledb.DatabaseException">
            <summary>
            An Exception class for upscaledb errors
            </summary>
        </member>
        <member name="M:Upscaledb.DatabaseException.#ctor">
            <summary>
            Empty Constructor
            </summary>
        </member>
        <member name="M:Upscaledb.DatabaseException.#ctor(System.Int32)">
            <summary>
            Constructor accepting an error code
            </summary>
            <param name="error">A upscaledb error code</param>
        </member>
        <member name="M:Upscaledb.DatabaseException.#ctor(System.String)">
            <summary>
            Constructor accepting an error message
            </summary>
            <param name="message">An error message</param>
        </member>
        <member name="M:Upscaledb.DatabaseException.#ctor(System.String,System.Exception)">
            <summary>
            Constructor provided for standard compliancy
            </summary>
            <param name="message">An error message</param>
            <param name="innerException">An inner exception</param>
        </member>
        <member name="M:Upscaledb.DatabaseException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Constructor accepting Serialization info
            </summary>
            <param name="info">The serialization info</param>
            <param name="context">The serialization context</param>
        </member>
        <member name="P:Upscaledb.DatabaseException.ErrorCode">
            <summary>
            The upscaledb error code
            </summary>
        </member>
        <member name="P:Upscaledb.DatabaseException.Message">
            <summary>
            The upscaledb error message
            </summary>
        </member>
        <member name="T:Upscaledb.Environment">
            <summary>
            A Database Environment class
            </summary>
        </member>
        <member name="M:Upscaledb.Environment.#ctor">
            <summary>
            Default Constructor
            </summary>
        </member>
        <member name="M:Upscaledb.Environment.#ctor(System.IntPtr)">
            <summary>
            Default Constructor which sets the handle
            </summary>
            <remarks>This constructor is used by Database.GetEnvironment()</remarks>
        </member>
        <member name="M:Upscaledb.Environment.Finalize">
            <summary>
            Destructor - automatically closes the Environment
            </summary>
        </member>
        <member name="M:Upscaledb.Environment.Create(System.String)">
            <summary>
            Creates a new Environment
            </summary>
            <remarks>
            This is an overloaded function for
              Create(fileName, 0, 0, null).
            </remarks>
        </member>
        <member name="M:Upscaledb.Environment.Create(System.String,System.Int32)">
            <summary>
            Creates a new Environment
            </summary>
            <remarks>
            This is an overloaded function for
              Create(fileName, flags, 0, null).
            </remarks>
        </member>
        <member name="M:Upscaledb.Environment.Create(System.String,System.Int32,System.Int32)">
            <summary>
            Creates a new Environment
            </summary>
            <remarks>
            This is an overloaded function for
              Create(fileName, flags, mode, null).
            </remarks>
        </member>
        <member name="M:Upscaledb.Environment.Create(System.String,System.Int32,System.Int32,Upscaledb.Parameter[])">
             <summary>
             Creates a new Database
             </summary>
             <remarks>
             This method wraps the native ups_env_create function.
             <br/>
             A Database Environment is a collection of Databases, which are all
             stored in one physical file (or in-memory). Per default, up to 16
             Databases can be stored in one file (<see cref="F:Upscaledb.UpsConst.UPS_PARAM_MAX_DATABASES"/>
             on how to store even more Databases).
             <br/>
             Each Database is identified by a positive 16bit value (except
             0 and values at or above 0xf000).
             Databases in an Environment can be created with
             <see cref="M:Upscaledb.Environment.CreateDatabase(System.Int16)"/> or opened with
             <see cref="M:Upscaledb.Environment.OpenDatabase(System.Int16)"/>.
             </remarks>
            
             <param name="fileName">The file name of the Environment file. If
             the file already exists, it is overwritten. Can be null if you
             create an In-Memory Environment.</param>
             <param name="flags">Optional flags for this operation, combined
             with bitwise OR. Possible flags are:
               <list type="bullet">
               <item><see cref="F:Upscaledb.UpsConst.UPS_ENABLE_FSYNC"/>
                 Immediately write modified pages to the disk. This
                 slows down all Database operations, but may save the
                 Database integrity in case of a system crash.</item><br/>
               <item><see cref="F:Upscaledb.UpsConst.UPS_IN_MEMORY"/>
                 Creates an In-Memory Environment. No file will be created,
                 and the Databases are lost after the Environment
                 is closed. The <paramref name="fileName"/> parameter can
                 be null. Do <b>NOT</b> use in combination with
                 a cache size other than 0.</item><br/>
               <item><see cref="F:Upscaledb.UpsConst.UPS_DISABLE_MMAP"/>
                 Do not use memory mapped files for I/O. By default,
                 upscaledb checks if it can use mmap, since mmap is faster
                 than read/write. For performance reasons, this flag should
                 not be used.</item><br/>
               <item><see cref="F:Upscaledb.UpsConst.UPS_ENABLE_TRANSACTIONS"/>
                 Enables Transactions for this Database.</item><br/>
               </list>
             </param>
             <param name="mode">File access rights for the new file. This is
             the <i>mode</i> parameter for creat(2). Ignored on
             Microsoft Windows.</param>
             <param name="parameters">An array of <see cref="T:Upscaledb.Parameter"/>
             structures. The following parameters are available:<br/>
               <list type="bullet">
               <item><see cref="F:Upscaledb.UpsConst.UPS_PARAM_CACHESIZE"/>
                 The size of the Database cache, in bytes. The default size
                 is defined in <i>src/config.h</i> as UPS_DEFAULT_CACHESIZE
                 - usually 2 MB.</item><br/>
               <item><see cref="F:Upscaledb.UpsConst.UPS_PARAM_PAGESIZE"/>
                 The size of a file page, in bytes. It is recommended not
                 to change the default size. The default size depends on
                 hardware and operating system. Page sizes must be 1024 or a
                 multiple of 2048.</item><br/>
               <item><see cref="F:Upscaledb.UpsConst.UPS_PARAM_MAX_DATABASES"/>
                 The number of maximum Databases in this Environment;
                 default: 16.</item>
               </list>
             </param>
             <exception cref="T:Upscaledb.DatabaseException">
               <list type="bullet">
               <item><see cref="F:Upscaledb.UpsConst.UPS_INV_PARAMETER"/>
                 if an invalid combination of flags was specified</item>
               <item><see cref="F:Upscaledb.UpsConst.UPS_INV_PARAMETER"/>
                 if the value for UPS_PARAM_MAX_DATABASES is too
                 high (either decrease it or increase the page size)</item>
               <item><see cref="F:Upscaledb.UpsConst.UPS_IO_ERROR"/>
                 if the file could not be opened or reading/writing failed</item>
               <item><see cref="F:Upscaledb.UpsConst.UPS_OUT_OF_MEMORY"/>
                 if memory could not be allocated</item>
               <item><see cref="F:Upscaledb.UpsConst.UPS_INV_PAGESIZE"/>
                 if the page size is not a multiple of 1024</item>
               <item><see cref="F:Upscaledb.UpsConst.UPS_INV_KEYSIZE"/>
                 if the key size is too large (at least 4 keys must
                 fit in a page)</item>
               <item><see cref="F:Upscaledb.UpsConst.UPS_WOULD_BLOCK"/>
                 if another process has locked the file</item>
               </list>
             </exception>
        </member>
        <member name="M:Upscaledb.Environment.Open(System.String)">
            <summary>
            Opens an existing Environment
            </summary>
            <remarks>
            This is an overloaded function for
              Open(fileName, 0, null).
            </remarks>
        </member>
        <member name="M:Upscaledb.Environment.Open(System.String,System.Int32)">
            <summary>
            Opens an existing Environment
            </summary>
            <remarks>
            This is an overloaded function for
              Open(fileName, flags, null).
            </remarks>
        </member>
        <member name="M:Upscaledb.Environment.Open(System.String,System.Int32,Upscaledb.Parameter[])">
             <summary>
             Opens an existing Environment
             </summary>
             <remarks>
             This method wraps the native ups_env_open function.
             </remarks>
            
             <param name="fileName">The file name of the Environment file.</param>
             <param name="flags">Optional flags for this operation, combined
             with bitwise OR. Possible flags are:
               <list type="bullet">
               <item><see cref="F:Upscaledb.UpsConst.UPS_READ_ONLY"/>
                 Opens the file for reading only. Operations which need
                 write access (i.e. Database.Insert)
                 will return <see cref="F:Upscaledb.UpsConst.UPS_WRITE_PROTECTED"/>.
                 </item><br/>
               <item><see cref="F:Upscaledb.UpsConst.UPS_ENABLE_FSYNC"/>
                 Immediately write modified pages to the disk. This
                 slows down all Database operations, but may save the
                 Database integrity in case of a system crash.</item><br/>
               <item><see cref="F:Upscaledb.UpsConst.UPS_DISABLE_MMAP"/>
                 Do not use memory mapped files for I/O. By default,
                 upscaledb checks if it can use mmap, since mmap is faster
                 than read/write. For performance reasons, this flag should
                 not be used.</item><br/>
               <item><see cref="F:Upscaledb.UpsConst.UPS_AUTO_RECOVERY"/>
                 Automatically recover the Database, if necessary. This
                 flag imples <see cref="F:Upscaledb.UpsConst.UPS_ENABLE_TRANSACTIONS"/>.
                 </item><br/>
               <item><see cref="F:Upscaledb.UpsConst.UPS_ENABLE_TRANSACTIONS"/>
                 Enables Transactions for this Database.</item><br/>
               </list>
             </param>
             <param name="parameters">An array of <see cref="T:Upscaledb.Parameter"/>
             structures. The following parameters are available:<br/>
               <list type="bullet">
               <item><see cref="F:Upscaledb.UpsConst.UPS_PARAM_CACHESIZE"/>
                 The size of the Database cache, in bytes. The default size
                 is defined in <i>src/config.h</i> as UPS_DEFAULT_CACHESIZE
                 - usually 2 MB.</item><br/>
               </list>
             </param>
             <exception cref="T:Upscaledb.DatabaseException">
               <list type="bullet">
               <item><see cref="F:Upscaledb.UpsConst.UPS_INV_PARAMETER"/>
                 if an invalid combination of flags was specified</item>
               <item><see cref="F:Upscaledb.UpsConst.UPS_FILE_NOT_FOUND"/>
                 if the file does not exist</item>
               <item><see cref="F:Upscaledb.UpsConst.UPS_IO_ERROR"/>
                 if the file could not be opened or reading/writing failed</item>
               <item><see cref="F:Upscaledb.UpsConst.UPS_INV_FILE_VERSION"/>
                 if the Database version is not compatible with the library
                 version</item>
               <item><see cref="F:Upscaledb.UpsConst.UPS_OUT_OF_MEMORY"/>
                 if memory could not be allocated</item>
               <item><see cref="F:Upscaledb.UpsConst.UPS_WOULD_BLOCK"/>
                 if another process has locked the file</item>
               </list>
             </exception>
        </member>
        <member name="M:Upscaledb.Environment.CreateDatabase(System.Int16)">
            <summary>
            Creates a new Database in this Environment
            </summary>
            <remarks>This is an overloaded function for
              CreateDatabase(name, 0, null).</remarks>
            <returns>The new Database object</returns>
        </member>
        <member name="M:Upscaledb.Environment.CreateDatabase(System.Int16,System.Int32)">
            <summary>
            Creates a new Database in this Environment
            </summary>
            <remarks>This is an overloaded function for
              CreateDatabase(name, flags, null).</remarks>
            <returns>The new Database object</returns>
        </member>
        <member name="M:Upscaledb.Environment.CreateDatabase(System.Int16,System.Int32,Upscaledb.Parameter[])">
            <summary>
            Creates a new Database in this Environment
            </summary>
            <remarks>This method wraps the native ups_env_create_db function.
            </remarks>
            <returns>The new Database object</returns>
            <param name="name">The name of the Database. If a Database
            with this name already exists,
            <see cref="F:Upscaledb.UpsConst.UPS_DATABASE_ALREADY_EXISTS"/> is thrown.
            Database names from 0xf000 to 0xffff and 0 are reserved.</param>
            <param name="flags">Optional flags for creating the Database,
            combined with bitwise OR. Possible values are:
              <list>
              <item><see cref="F:Upscaledb.UpsConst.UPS_RECORD_NUMBER"/>
                Creates an "auto-increment" Database. Keys in Record
                Number Databases are automatically assigned an incrementing
                64bit value.</item>
              </list>
            </param>
            <param name="parameters">An array of <see cref="T:Upscaledb.Parameter"/>
            structures. The following parameters are available:<br/>
              <list type="bullet">
              <item><see cref="F:Upscaledb.UpsConst.UPS_PARAM_KEYSIZE"/>
                The size of the keys in the B+Tree index. The default size
                is 21 bytes.</item><br/>
              </list>
            </param>
            <exception cref="T:Upscaledb.DatabaseException">
              <list type="bullet">
              <item><see cref="F:Upscaledb.UpsConst.UPS_INV_PARAMETER"/>
                if an invalid combination of flags was specified</item>
              <item><see cref="F:Upscaledb.UpsConst.UPS_DATABASE_ALREADY_EXISTS"/>
                if a Database with this name already exists in this
                Environment</item>
              <item><see cref="F:Upscaledb.UpsConst.UPS_OUT_OF_MEMORY"/>
                if memory could not be allocated</item>
              <item><see cref="F:Upscaledb.UpsConst.UPS_INV_KEYSIZE"/>
                if the key size is too large (at least 4 keys must
                fit in a page)</item>
              <item><see cref="F:Upscaledb.UpsConst.UPS_LIMITS_REACHED"/>
                if the maximum number of Databases per Environment
                was already created</item>
              </list>
            </exception>
            <returns>The new Database object</returns>
        </member>
        <member name="M:Upscaledb.Environment.OpenDatabase(System.Int16)">
            <summary>
            Opens a Database in this Environment
            </summary>
            <remarks>This is an overloaded function for
              OpenDatabase(name, 0).</remarks>
            <returns>The new Database object</returns>
        </member>
        <member name="M:Upscaledb.Environment.OpenDatabase(System.Int16,System.Int32)">
            <summary>
            Opens a Database in this Environment
            </summary>
            <remarks>This is an overloaded function for
              OpenDatabase(name, flags, null).</remarks>
            <returns>The new Database object</returns>
        </member>
        <member name="M:Upscaledb.Environment.OpenDatabase(System.Int16,System.Int32,Upscaledb.Parameter[])">
            <summary>
            Opens a Database in this Environment
            </summary>
            <remarks>
            This method wraps the native ups_env_open_db function.
            </remarks>
            <param name="name">The name of the Database. If a Database
            with this name does not exist, the function will throw
            <see cref="F:Upscaledb.UpsConst.UPS_DATABASE_NOT_FOUND"/>.</param>
            <param name="flags">Optional flags for this operation, combined
            with bitwise OR. Possible flags are:
              <list type="bullet">
              <item><see cref="F:Upscaledb.UpsConst.UPS_READ_ONLY"/>
                Opens the database for reading.</item>
              </list>
            </param>
            <param name="parameters">An array of <see cref="T:Upscaledb.Parameter"/>
            structures. The following parameters are available:<br/>
              <list type="bullet">
              </list>
            </param>
            <exception cref="T:Upscaledb.DatabaseException">
              <list type="bullet">
              <item><see cref="F:Upscaledb.UpsConst.UPS_INV_PARAMETER"/>
                if an invalid combination of flags was specified</item>
              <item><see cref="F:Upscaledb.UpsConst.UPS_DATABASE_NOT_FOUND"/>
                if a Database with this name does not exist</item>
              <item><see cref="F:Upscaledb.UpsConst.UPS_DATABASE_ALREADY_OPEN"/>
                if this Database was already opened</item>
              <item><see cref="F:Upscaledb.UpsConst.UPS_OUT_OF_MEMORY"/>
                if memory could not be allocated</item>
              <item><see cref="F:Upscaledb.UpsConst.UPS_WOULD_BLOCK"/>
                if another process has locked the file</item>
              </list>
            </exception>
            <returns>The new Database object</returns>
        </member>
        <member name="M:Upscaledb.Environment.RenameDatabase(System.Int16,System.Int16)">
            <summary>
            Renames a Database in this Environment
            </summary>
            <remarks>
            This method wraps the native ups_env_rename_db function.
            </remarks>
            <param name="oldName">The old name of the Database. If a Database
            with this name does not exist, the function will throw
            <see cref="F:Upscaledb.UpsConst.UPS_DATABASE_NOT_FOUND"/>.</param>
            <param name="newName">The new name of the Database. If a Database
            with this name already exists, the function will throw
            <see cref="F:Upscaledb.UpsConst.UPS_DATABASE_ALREADY_EXISTS"/>.</param>
            <exception cref="T:Upscaledb.DatabaseException">
              <list type="bullet">
              <item><see cref="F:Upscaledb.UpsConst.UPS_INV_PARAMETER"/>
                if the new Database name is reserved</item>
              <item><see cref="F:Upscaledb.UpsConst.UPS_DATABASE_NOT_FOUND"/>
                if a Database with this name does not exist</item>
              <item><see cref="F:Upscaledb.UpsConst.UPS_DATABASE_ALREADY_EXISTS"/>
                if a Database with the new name already exists</item>
              <item><see cref="F:Upscaledb.UpsConst.UPS_OUT_OF_MEMORY"/>
                if memory could not be allocated</item>
              </list>
            </exception>
        </member>
        <member name="M:Upscaledb.Environment.EraseDatabase(System.Int16)">
            <summary>
            Deletes a Database from this Environment
            </summary>
            <remarks>
            This method wraps the native ups_env_erase_db function.
            </remarks>
            <param name="name">The name of the Database which is deleted.
            If a Database with this name does not exist, the function will throw
            <see cref="F:Upscaledb.UpsConst.UPS_DATABASE_NOT_FOUND"/>.</param>
            <exception cref="T:Upscaledb.DatabaseException">
              <list type="bullet">
              <item><see cref="F:Upscaledb.UpsConst.UPS_DATABASE_NOT_FOUND"/>
                if a Database with this name does not exist</item>
              <item><see cref="F:Upscaledb.UpsConst.UPS_DATABASE_ALREADY_OPEN"/>
                if the Database with the new name is still open</item>
              </list>
            </exception>
        </member>
        <member name="M:Upscaledb.Environment.Flush">
            <summary>
            Flushes the Environment
            </summary>
            <remarks>
            This method wraps the native ups_env_flush function.
            <br />
            This function flushes the Database cache and writes the whole
            file to disk.
            <br />
            Since In-Memory Environments do not have a file on disk, the
            function will have no effect and will return successfully.
            </remarks>
        </member>
        <member name="M:Upscaledb.Environment.GetDatabaseNames">
            <summary>
            Returns the names of all Databases in this Environment
            </summary>
            <remarks>
            This method wraps the native ups_env_get_database_names function.
            <br />
            This function returns the names of all Databases and the number of
            Databases in an Environment.
            </remarks>
            <returns>An Array with all Database names</returns>
        </member>
        <member name="M:Upscaledb.Environment.Dispose">
            <summary>
            Closes the Environment
            </summary>
        </member>
        <member name="M:Upscaledb.Environment.Dispose(System.Boolean)">
            <summary>
            Closes the Environment
            </summary>
        </member>
        <member name="M:Upscaledb.Environment.Begin">
            <summary>
            Begins a new Transaction
            </summary>
        </member>
        <member name="M:Upscaledb.Environment.Begin(System.Int32)">
            <summary>
            Begins a new Transaction
            </summary>
            <remarks>
            This method wraps the native ups_txn_begin function.
            </remarks>
        </member>
        <member name="M:Upscaledb.Environment.Close">
            <summary>
            Closes the Environment
            </summary>
            <remarks>
            This method wraps the native ups_env_close function.
            <br />
            </remarks>
        </member>
        <member name="M:Upscaledb.Environment.GetHandle">
            <summary>
            Returns the Environment handle
            </summary>
        </member>
        <member name="T:Upscaledb.Transaction">
            <summary>
            A Transaction class
            </summary>
        </member>
        <member name="M:Upscaledb.Transaction.Commit">
            <summary>
            Commits the Transaction
            </summary>
            <remarks>
            This method wraps the native ups_txn_commit function.
            <br />
            Note that the function will fail with UPS_CURSOR_STILL_OPEN if
            a Cursor was attached to this Transaction, and the Cursor was
            not closed.
            </remarks>
        </member>
        <member name="M:Upscaledb.Transaction.Abort">
            <summary>
            Aborts the Transaction if it has not already been committed or aborted.
            </summary>
            <remarks>
            This method wraps the native ups_txn_abort function.
            <br />
            Note that the function will fail with UPS_CURSOR_STILL_OPEN if
            a Cursor was attached to this Transaction, and the Cursor was
            not closed.
            </remarks>
        </member>
        <member name="M:Upscaledb.Transaction.Dispose">
            <summary>
            Aborts the Transaction if it has not already been committed or aborted.
            </summary>
            <see cref="M:Upscaledb.Transaction.Abort"/>
        </member>
        <member name="P:Upscaledb.Transaction.Handle">
            <summary>
            Returns the low-level Transaction handle
            </summary>
        </member>
    </members>
</doc>
